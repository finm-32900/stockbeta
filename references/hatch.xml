This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-27T19:58:44.054Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repomix, visit: https://github.com/yamadashy/repomix
</additional_info>

</file_summary>

<repository_structure>
docs/
  .hooks/
    expand_blocks.py
    inject_version.py
    plugin_register.py
    render_default_test_env.py
    render_ruff_defaults.py
    title_from_content.py
  .overrides/
    partials/
      copyright.html
  .snippets/
    abbrs.txt
    links.txt
  assets/
    css/
      custom.css
    images/
      logo.svg
  blog/
    posts/
      release-hatch-1100.md
      release-hatch-160.md
      release-hatch-180.md
      release-hatch-190.md
    .authors.yml
    index.md
  cli/
    about.md
    reference.md
  community/
    contributing.md
    highlights.md
    users.md
  config/
    environment/
      advanced.md
      overview.md
    internal/
      build.md
      static-analysis.md
      testing.md
    build.md
    context.md
    dependency.md
    hatch.md
    metadata.md
    project-templates.md
  history/
    hatch.md
    hatchling.md
  how-to/
    config/
      dynamic-metadata.md
    environment/
      dependency-resolution.md
      select-installer.md
    integrate/
      vscode.md
    meta/
      report-issues.md
    plugins/
      testing-builds.md
    publish/
      auth.md
      repo.md
    python/
      custom.md
    run/
      python-scripts.md
    static-analysis/
      behavior.md
  meta/
    authors.md
    faq.md
  plugins/
    build-hook/
      custom.md
      reference.md
      version.md
    builder/
      binary.md
      custom.md
      reference.md
      sdist.md
      wheel.md
    environment/
      reference.md
      virtual.md
    environment-collector/
      custom.md
      default.md
      reference.md
    metadata-hook/
      custom.md
      reference.md
    publisher/
      package-index.md
      reference.md
    version-scheme/
      reference.md
      standard.md
    version-source/
      code.md
      env.md
      reference.md
      regex.md
    about.md
    utilities.md
  tutorials/
    environment/
      basic-usage.md
    python/
      manage.md
    testing/
      overview.md
  build.md
  environment.md
  index.md
  install.md
  intro.md
  next-steps.md
  publish.md
  version.md
  why.md
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="docs/.hooks/expand_blocks.py">
import re
import textwrap

from markdown.preprocessors import Preprocessor

_code_tab_regex = re.compile(
    r'^( *)((`{3,})[^ ].*) tab="(.+)"\n([\s\S]+?)\n\1\3$',
    re.MULTILINE,
)
_config_example_regex = re.compile(
    r'^( *)((`{3,})toml\b.*) config-example\n([\s\S]+?)\n\1\3$',
    re.MULTILINE,
)


def _code_tab_replace(m):
    indent, fence_start, fence_end, title, content = m.groups()
    return f"""\
{indent}=== ":octicons-file-code-16: {title}"
{indent}    {fence_start}
{textwrap.indent(content, '    ')}
{indent}    {fence_end}
"""


def _config_example_replace(m):
    indent, fence_start, fence_end, content = m.groups()
    content_without = re.sub(r' *\[tool.hatch\]\n', '', content.replace('[tool.hatch.', '['))
    return f"""\
{indent}=== ":octicons-file-code-16: pyproject.toml"
{indent}    {fence_start}
{textwrap.indent(content, '    ')}
{indent}    {fence_end}

{indent}=== ":octicons-file-code-16: hatch.toml"
{indent}    {fence_start}
{textwrap.indent(content_without, '    ')}
{indent}    {fence_end}
"""


class ExpandedBlocksPreprocessor(Preprocessor):
    def run(self, lines):  # noqa: PLR6301
        markdown = '\n'.join(lines)
        markdown = _config_example_regex.sub(_config_example_replace, markdown)
        markdown = _code_tab_regex.sub(_code_tab_replace, markdown)
        return markdown.splitlines()
</file>

<file path="docs/.hooks/inject_version.py">
import os
import subprocess
from functools import cache

from markdown.preprocessors import Preprocessor

MARKER = '<HATCH_LATEST_VERSION>'
SEMVER_PARTS = 3


@cache
def get_latest_version():
    env = dict(os.environ)
    # Ignore the current documentation environment so that the version
    # command can execute as usual in the default build environment
    env.pop('HATCH_ENV_ACTIVE', None)

    output = subprocess.check_output(['hatch', '--no-color', 'version'], env=env).decode('utf-8').strip()  # noqa: S607

    version = output.replace('dev', '')
    parts = list(map(int, version.split('.')))
    major, minor, patch = parts[:SEMVER_PARTS]
    if len(parts) > SEMVER_PARTS:
        patch -= 1

    return f'{major}.{minor}.{patch}'


class VersionInjectionPreprocessor(Preprocessor):
    def run(self, lines):  # noqa: PLR6301
        for i, line in enumerate(lines):
            lines[i] = line.replace(MARKER, get_latest_version())

        return lines
</file>

<file path="docs/.hooks/plugin_register.py">
import os
import sys

from markdown.extensions import Extension

HERE = os.path.dirname(__file__)


def on_config(
    config,
    **kwargs,  # noqa: ARG001
):
    config.markdown_extensions.append(GlobalExtension())


class GlobalExtension(Extension):
    def extendMarkdown(self, md):  # noqa: N802, PLR6301
        sys.path.insert(0, HERE)

        from expand_blocks import ExpandedBlocksPreprocessor
        from inject_version import VersionInjectionPreprocessor
        from render_default_test_env import TestEnvDefaultsPreprocessor
        from render_ruff_defaults import RuffDefaultsPreprocessor

        md.preprocessors.register(ExpandedBlocksPreprocessor(), ExpandedBlocksPreprocessor.__name__, 100)
        md.preprocessors.register(VersionInjectionPreprocessor(), VersionInjectionPreprocessor.__name__, 101)
        md.preprocessors.register(RuffDefaultsPreprocessor(), RuffDefaultsPreprocessor.__name__, 102)
        md.preprocessors.register(TestEnvDefaultsPreprocessor(), TestEnvDefaultsPreprocessor.__name__, 103)

        sys.path.pop(0)
</file>

<file path="docs/.hooks/render_default_test_env.py">
from __future__ import annotations

import os
from ast import literal_eval
from functools import cache

import tomlkit
from markdown.preprocessors import Preprocessor

MARKER_DEPENDENCIES = '<HATCH_TEST_ENV_DEPENDENCIES>'
MARKER_MATRIX = '<HATCH_TEST_ENV_MATRIX>'
MARKER_SCRIPTS = '<HATCH_TEST_ENV_SCRIPTS>'


@cache
def test_env_config():
    path = os.path.join(os.getcwd(), 'src', 'hatch', 'env', 'internal', 'test.py')
    with open(path, encoding='utf-8') as f:
        contents = f.read()

    value = ''.join(contents.split(' return ')[1].strip().splitlines())
    return literal_eval(value)


@cache
def get_dependencies_toml():
    env_config = {'dependencies': test_env_config()['dependencies']}
    content = tomlkit.dumps({'tool': {'hatch': {'envs': {'hatch-test': env_config}}}}).strip()

    # Reload to fix the long array
    config = tomlkit.loads(content)
    config['tool']['hatch']['envs']['hatch-test']['dependencies'].multiline(True)

    # Reduce indentation
    content = tomlkit.dumps(config).strip()
    return content.replace('    "', '  "')


@cache
def get_matrix_toml():
    env_config = {'matrix': test_env_config()['matrix']}
    return tomlkit.dumps({'tool': {'hatch': {'envs': {'hatch-test': env_config}}}}).strip()


@cache
def get_scripts_toml():
    env_config = {'scripts': test_env_config()['scripts']}
    return tomlkit.dumps({'tool': {'hatch': {'envs': {'hatch-test': env_config}}}}).strip()


class TestEnvDefaultsPreprocessor(Preprocessor):
    def run(self, lines):  # noqa: PLR6301
        return (
            '\n'.join(lines)
            .replace(MARKER_DEPENDENCIES, get_dependencies_toml())
            .replace(MARKER_MATRIX, get_matrix_toml())
            .replace(MARKER_SCRIPTS, get_scripts_toml())
            .splitlines()
        )
</file>

<file path="docs/.hooks/render_ruff_defaults.py">
from __future__ import annotations

import os
import re
from collections import defaultdict
from functools import cache
from typing import Any

from markdown.preprocessors import Preprocessor

MARKER_VERSION = '<HATCH_RUFF_VERSION>'
MARKER_SELECTED_RULES = '<HATCH_RUFF_SELECTED_RULES>'
MARKER_UNSELECTED_RULES = '<HATCH_RUFF_UNSELECTED_RULES>'
MARKER_STABLE_RULES_COUNT = '<HATCH_RUFF_STABLE_RULES_COUNT>'
MARKER_PREVIEW_RULES_COUNT = '<HATCH_RUFF_PREVIEW_RULES_COUNT>'
MARKER_UNSELECTED_RULES_COUNT = '<HATCH_RUFF_UNSELECTED_RULES_COUNT>'
MARKER_PER_FILE_IGNORED_RULES = '<HATCH_RUFF_PER_FILE_IGNORED_RULES>'
RULE_URLS = {'S': 'https://docs.astral.sh/ruff/rules/#flake8-bandit-s'}


def read_constants(path: str, start: str) -> dict[str, Any]:
    with open(path, encoding='utf-8') as f:
        lines = f.read().splitlines()

    for i, line in enumerate(lines):
        if line.startswith(start):
            block_start = i
            break
    else:
        message = f'Could not find {start} in {path}'
        raise RuntimeError(message)

    data = {}
    exec('\n'.join(lines[block_start:]), None, data)  # noqa: S102
    return data


def parse_rules(rules: tuple[str, ...]) -> defaultdict[str, list[str]]:
    selected_rules: defaultdict[str, list[str]] = defaultdict(list)
    separator = re.compile(r'^(\D+)(\d+)$')

    for rule in rules:
        match = separator.search(rule)
        if match is None:
            message = f'Could not parse rule {rule}'
            raise RuntimeError(message)

        group, number = match.groups()
        selected_rules[group].append(number)

    return selected_rules


def construct_collapsed_markdown_rule_list(text: str, rules: defaultdict[str, list[str]]) -> str:
    preview_rule_set = set(ruff_data()['PREVIEW_RULES'])

    lines = [f'??? "{text}"']
    for group, numbers in sorted(rules.items()):
        numbers.sort(key=lambda x: int(x[0]))

        parts = []
        for number in numbers:
            rule = f'{group}{number}'
            part = f'[{rule}](https://docs.astral.sh/ruff/rules/{rule})'
            if f'{group}{number}' in preview_rule_set:
                part += '^P^'
            parts.append(part)

        lines.append(f'    - {", ".join(parts)}')

    return '\n'.join(lines)


@cache
def ruff_data():
    root = os.getcwd()
    data = {}
    for path, start in (
        (os.path.join(root, 'src', 'hatch', 'cli', 'fmt', 'core.py'), 'STABLE_RULES'),
        (os.path.join(root, 'src', 'hatch', 'env', 'internal', 'static_analysis.py'), 'RUFF_DEFAULT_VERSION'),
    ):
        data.update(read_constants(path, start))

    return data


@cache
def get_ruff_version():
    return ruff_data()['RUFF_DEFAULT_VERSION']


@cache
def get_stable_rules_count():
    return str(len(ruff_data()['STABLE_RULES']))


@cache
def get_preview_rules_count():
    return str(len(ruff_data()['PREVIEW_RULES']))


@cache
def get_unselected_rules_count():
    return str(len(UNSELECTED_RULES))


@cache
def get_selected_rules():
    data = ruff_data()
    rules = parse_rules(data['STABLE_RULES'])
    for group, numbers in parse_rules(data['PREVIEW_RULES']).items():
        rules[group].extend(numbers)

    return construct_collapsed_markdown_rule_list('Selected rules', rules)


@cache
def get_unselected_rules():
    return construct_collapsed_markdown_rule_list('Unselected rules', parse_rules(UNSELECTED_RULES))


@cache
def get_per_file_ignored_rules():
    lines = []
    for glob, rules in sorted(ruff_data()['PER_FILE_IGNORED_RULES'].items()):
        parts = []
        for rule in rules:
            url = RULE_URLS.get(rule) or f'https://docs.astral.sh/ruff/rules/{rule}'
            parts.append(f'[{rule}]({url})')

        lines.append(f'- `{glob}`: {", ".join(parts)}')

    return '\n'.join(lines)


class RuffDefaultsPreprocessor(Preprocessor):
    def run(self, lines):  # noqa: PLR6301
        return (
            '\n'.join(lines)
            .replace(MARKER_VERSION, get_ruff_version())
            .replace(MARKER_STABLE_RULES_COUNT, get_stable_rules_count())
            .replace(MARKER_PREVIEW_RULES_COUNT, get_preview_rules_count())
            .replace(MARKER_UNSELECTED_RULES_COUNT, get_unselected_rules_count())
            .replace(MARKER_SELECTED_RULES, get_selected_rules())
            .replace(MARKER_UNSELECTED_RULES, get_unselected_rules())
            .replace(MARKER_PER_FILE_IGNORED_RULES, get_per_file_ignored_rules())
            .splitlines()
        )


UNSELECTED_RULES: tuple[str, ...] = (
    'AIR001',
    'ANN001',
    'ANN002',
    'ANN003',
    'ANN101',
    'ANN102',
    'ANN201',
    'ANN202',
    'ANN204',
    'ANN205',
    'ANN206',
    'ANN401',
    'B027',
    'C901',
    'COM812',
    'COM819',
    'CPY001',
    'D100',
    'D101',
    'D102',
    'D103',
    'D104',
    'D105',
    'D106',
    'D107',
    'D200',
    'D201',
    'D202',
    'D203',
    'D204',
    'D205',
    'D206',
    'D207',
    'D208',
    'D209',
    'D210',
    'D211',
    'D212',
    'D213',
    'D214',
    'D215',
    'D300',
    'D301',
    'D400',
    'D401',
    'D402',
    'D403',
    'D404',
    'D405',
    'D406',
    'D407',
    'D408',
    'D409',
    'D410',
    'D411',
    'D412',
    'D413',
    'D414',
    'D415',
    'D416',
    'D417',
    'D418',
    'D419',
    'DJ001',
    'DJ003',
    'DJ006',
    'DJ007',
    'DJ008',
    'DJ012',
    'DJ013',
    'E111',
    'E114',
    'E117',
    'E301',
    'E302',
    'E303',
    'E304',
    'E305',
    'E306',
    'E501',
    'ERA001',
    'FBT003',
    'FIX001',
    'FIX002',
    'FIX003',
    'FIX004',
    'FURB101',
    'FURB103',
    'FURB140',
    'ISC001',
    'ISC002',
    'NPY001',
    'NPY002',
    'NPY003',
    'NPY201',
    'PD002',
    'PD003',
    'PD004',
    'PD007',
    'PD008',
    'PD009',
    'PD010',
    'PD011',
    'PD012',
    'PD013',
    'PD015',
    'PD101',
    'PD901',
    'PERF203',
    'PGH001',
    'PGH002',
    'PGH003',
    'PGH004',
    'PLR0904',
    'PLR0911',
    'PLR0912',
    'PLR0913',
    'PLR0914',
    'PLR0915',
    'PLR0916',
    'PLR0917',
    'PLR1701',
    'PLR1702',
    'PLR1706',
    'PT004',
    'PT005',
    'PTH100',
    'PTH101',
    'PTH102',
    'PTH103',
    'PTH104',
    'PTH105',
    'PTH106',
    'PTH107',
    'PTH108',
    'PTH109',
    'PTH110',
    'PTH111',
    'PTH112',
    'PTH113',
    'PTH114',
    'PTH115',
    'PTH116',
    'PTH117',
    'PTH118',
    'PTH119',
    'PTH120',
    'PTH121',
    'PTH122',
    'PTH123',
    'PTH124',
    'PTH201',
    'PTH202',
    'PTH203',
    'PTH204',
    'PTH205',
    'PTH206',
    'PTH207',
    'Q000',
    'Q001',
    'Q002',
    'Q003',
    'Q004',
    'RET501',
    'RET502',
    'RUF011',
    'RUF200',
    'S404',
    'S410',
    'S603',
    'SIM401',
    'TD001',
    'TD002',
    'TD003',
    'TRY200',
    'W191',
)
</file>

<file path="docs/.hooks/title_from_content.py">
def on_page_markdown(
    markdown,
    page,
    **kwargs,  # noqa: ARG001
):
    if 'title' in page.meta:
        return

    first_line = markdown.strip().splitlines()[0]
    if first_line.startswith('# '):
        title = first_line[2:].split(' # {:', maxsplit=1)[0].strip()
        page.meta['title'] = title
        page.meta['social'] = {'cards_layout_options': {'title': title}}
</file>

<file path="docs/.overrides/partials/copyright.html">
<div class="md-copyright">
  {% if config.copyright %}
    <div class="md-copyright__highlight">
      {{ config.copyright }}
    </div>
    <div>
      Logo by
      <a
        href="https://openai.com/dall-e-2/"
        target="_blank" rel="noopener"
      >
        DALL·E
      </a>
      and
      <a
        href="https://boriscrowther.com/"
        target="_blank" rel="noopener"
      >
        Boris Crowther
      </a>
    </div>
  {% endif %}
  {% if not config.extra.generator == false %}
    Made with
    <a
      href="https://squidfunk.github.io/mkdocs-material/"
      target="_blank" rel="noopener"
    >
      Material for MkDocs
    </a>
  {% endif %}
</div>
</file>

<file path="docs/.snippets/abbrs.txt">
*[PyPI]: Python Package Index
</file>

<file path="docs/.snippets/links.txt">
[PEP 440 version specifiers]: https://peps.python.org/pep-0440/#version-specifiers
[PEP 508]: https://peps.python.org/pep-0508/
[PEP 517]: https://peps.python.org/pep-0517/
[PEP 639]: https://peps.python.org/pep-0639/
[PEP 660]: https://peps.python.org/pep-0660/
[PEP 665]: https://peps.python.org/pep-0665/
[project metadata standard]: https://packaging.python.org/en/latest/specifications/pyproject-toml/#declaring-project-metadata-the-project-table
</file>

<file path="docs/assets/css/custom.css">
:root > * {
  /* Use font but disable ligatures, see https://github.com/pypa/hatch/issues/104 */
  font-variant-ligatures: none;
}

/* Brighter links for dark mode */
[data-md-color-scheme=slate] {
  /* https://github.com/squidfunk/mkdocs-material/blob/9.1.2/src/assets/stylesheets/main/_colors.scss#L91-L92 */
  --md-typeset-a-color: var(--md-primary-fg-color--light);
}

/* FiraCode https://github.com/tonsky/FiraCode */
code { font-family: 'Fira Code', monospace; }
@supports (font-variation-settings: normal) {
  code { font-family: 'Fira Code VF', monospace; }
}

/* https://github.com/squidfunk/mkdocs-material/issues/1522 */
.md-typeset h5 {
  color: var(--md-default-fg-color);
  text-transform: none;
}
</file>

<file path="docs/assets/images/logo.svg">
<svg width="1024" height="1024" viewBox="0 0 1024 1024" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M543.5 406.195L549 369.195L492 392.695L428 421.695L445 433.695L508 440.195L543.5 406.195Z" fill="url(#paint0_linear_5_2)"/>
<path d="M556.5 299.195L608.5 332.695L591 351.195L556.5 363.695L530.5 377.695L491 393.695L439.5 416.195L390.5 427.695L400 391.195L317 377.695L294 357.695L286 299.195L299.5 286.195L341.5 250.695L366 234.695L396.5 231.195V261.695L429.5 254.195L492.5 273.195H510L523 310.195L556.5 299.195Z" fill="#E9D77A" stroke="black"/>
<path d="M586 353.195L609 334.695L619 348.195L628.5 377.695V409.195L616.5 440.695L594.5 472.195L558 502.195L535.5 533.195L526 559.695L504 568.195L437 599.195L390.5 647.695L397 602.695L421.5 536.195L457 493.195L502 448.695L541 401.195L547.5 365.195L586 353.195Z" fill="#FDF7DD" stroke="black"/>
<path d="M636.5 274.195L560 296.695V297.195L609.5 331.195L632 383.695L613 450.195L579 481.695L537.5 535.195L526 556.195L560 585.695L570 556.195L628.5 495.195L660 443.195L667.5 363.195L636.5 274.195Z" fill="#19A2F4" stroke="black"/>
<path d="M657.5 446.695L736.5 433.695L717 380.195L669 367.695L657.5 446.695Z" fill="url(#paint1_linear_5_2)"/>
<path d="M230.5 185.695L298.5 126.195L351.5 154.695L325 181.695L357.5 217.695H385L395 225.195L364.5 233.195L317.5 270.695L270.5 251.195V233.195L257.5 204.195L220.5 199.695L230.5 185.695Z" fill="url(#paint2_linear_5_2)"/>
<path d="M200 461.195L297 474.695L313.5 499.195L355 461.195L380 503.695L423.5 463.195L454.5 486.695L416 556.195L386.5 647.195L333.5 590.695V566.695L276.5 556.195L226.5 503.695L219.5 521.195L195 499.195L200 461.195Z" fill="url(#paint3_linear_5_2)"/>
<path d="M553.5 581.695L638 487.695L655.5 481.695L688 504.695L716 487.695L732 498.695H752.5L768.5 476.695L790.5 466.195L825 478.695V487.695L724.5 518.695L713 546.695H662.5L641 599.695H575.5L553.5 581.695Z" fill="url(#paint4_linear_5_2)"/>
<path d="M848.5 566.695L829.5 484.695L727.5 518.695L713 545.195H661.5L642.5 600.195H576.5L527 559.195L435.5 600.195L385.5 649.195L338 591.695L335 566.695L277.5 556.195L225.5 499.195L218.5 518.195L190 499.195C187.333 511.028 181.8 536.695 181 544.695C180 554.695 163 653.695 169.5 736.695C176 819.695 271 910.695 305.5 925.195C340 939.695 474 985.195 646 951.195C783.6 923.995 838.333 780.195 848.5 711.695V566.695Z" fill="url(#paint5_radial_5_2)"/>
<path d="M571 77.1947C463.861 37.8394 340.581 83.6949 294 121.695L352.5 151.195L325 181.695L358 217.195L396 217.195L396 258.695L462.5 244.695L485.5 270.195L508.5 276.195L523 309.695L643 270.195L675.5 364.695L714 382.695L738.5 431.695L754 438.269C776.5 364.695 769.5 390.695 776.5 336.433C773.5 273.195 764.226 234.29 745 211.195C725.774 188.1 704.923 126.389 571 77.1947Z" fill="url(#paint6_radial_5_2)"/>
<path d="M510 439.695C492.5 440.361 450.1 438.395 420.5 425.195" stroke="black" stroke-width="16"/>
<path d="M547 377.195C563.333 390.695 602.6 413.195 629 395.195" stroke="black" stroke-width="10"/>
<path d="M524.5 430.195C526.5 446.528 541.7 478.795 586.5 477.195" stroke="black" stroke-width="10"/>
<path d="M471 477.195C475.348 491.921 495.835 521.939 543 524.195" stroke="black" stroke-width="10"/>
<path d="M417.5 556.195C427.667 566.361 456.1 584.595 488.5 576.195" stroke="black" stroke-width="10"/>
<path d="M552.5 298.695C610.5 316.695 637 364.695 628.5 406.195C611.673 488.349 562.5 470.695 524.5 557.695" stroke="black" stroke-width="10"/>
<path d="M168 416.195C281 469.695 341.333 419.028 366 388.695L332.5 381.195C310.5 427.995 214.167 424.028 168 416.195Z" fill="#E356E9"/>
<path d="M366 388.695L369.879 391.849L374.977 385.581L367.092 383.816L366 388.695ZM168 416.195L168.836 411.265C166.374 410.847 163.981 412.311 163.231 414.693C162.481 417.075 163.603 419.645 165.86 420.714L168 416.195ZM332.5 381.195L333.592 376.316L329.68 375.44L327.975 379.068L332.5 381.195ZM362.121 385.54C350.162 400.246 329.689 419.713 298.677 429.097C267.772 438.448 225.721 437.991 170.14 411.676L165.86 420.714C223.279 447.899 267.895 448.858 301.573 438.668C335.144 428.51 357.171 407.477 369.879 391.849L362.121 385.54ZM167.164 421.124C190.562 425.094 226.689 428.099 259.903 424.147C276.512 422.171 292.64 418.428 306.149 412.027C319.678 405.617 330.883 396.387 337.025 383.322L327.975 379.068C323.117 389.403 314.031 397.227 301.867 402.99C289.683 408.763 274.717 412.314 258.722 414.217C226.728 418.024 191.605 415.128 168.836 411.265L167.164 421.124ZM367.092 383.816L333.592 376.316L331.408 386.074L364.908 393.574L367.092 383.816Z" fill="black"/>
<path d="M388 645.195C393.333 607.861 417 525.595 459 487.195C511.5 439.195 547 411.195 549.5 367.695C533.833 370.361 508.227 383.217 485 396.695C444.5 420.195 394 428.695 388.5 428.695C390.5 419.361 398.4 396.795 396 391.195C393 384.195 321 390.195 294 361.695L285.5 303.195C286.333 299.361 291.2 288.095 296 285.695C298.632 284.379 324.871 269.582 337 257.195C360.5 233.195 374.547 230.695 396 230.695" stroke="black" stroke-width="16"/>
<path d="M446 375.195C420.5 388.695 399.667 379.861 387.5 380.195L400 404.695C409 405.195 431.46 403.67 445 396.695C461.5 388.195 487.5 358.195 497.5 350.195C505.5 343.795 521 334.861 527.5 331.195C520 331.195 515.4 331.395 511 332.195C505.5 333.195 483.5 351.195 481 353.695C478.5 356.195 458.577 368.537 446 375.195Z" fill="black"/>
<path d="M298.5 127.695L353 152.695L324 180.695L358 218.695H396.5V262.195L463 247.195L484.5 271.195L508.5 276.195L522 308.695L640.5 271.195L676 372.695L715 380.695L739 435.695" stroke="black" stroke-width="10"/>
<path d="M313.5 273.695L310 266.695L299 268.195L296 256.195L272 254.695V228.195C272 228.195 261 210.195 255.5 204.195C251.1 199.395 225.333 202.195 213 204.195C251 156.028 350.5 53.6361 501.5 67.6948C646.5 81.1948 839 204.195 754 438.195L734.5 433.695L716.5 441.195L707 433.695L661 441.195" stroke="black" stroke-width="16"/>
<path d="M632.5 483.695L657.5 480.695L686 504.695L717 485.195L730 499.195H755.5L766.5 476.195L791 466.695L824.5 476.195C824.5 476.195 985.5 987.336 491 966.195C11.4999 945.695 205 466.695 205 466.695L231 459.695L301 476.195L314 499.195L356 459.695L381.5 504.695L424 464.695L455 489.195" stroke="black" stroke-width="16"/>
<path d="M827 484.695L724.5 520.695L712.5 546.195H661.5L641.5 600.195H576L529 557.695L435.5 600.195L385 652.195L335.5 591.195V566.695L277 557.695L226.5 500.195L219.5 520.695L199.5 500.195" stroke="black" stroke-width="10"/>
<path d="M631 275.695C653.833 304.195 687.2 389.295 654 451.695C612.5 529.695 569.5 546.195 556 582.695" stroke="black" stroke-width="16"/>
<path d="M326.5 301.195V285.695C320 285.195 312 291.195 309 294.195C306 297.195 308.5 306.195 311 308.695C313 310.695 316.167 309.528 317.5 308.695L326.5 301.195Z" fill="black"/>
<path d="M353.482 303.385L367.808 297.468C370.752 303.285 368.26 312.97 366.632 316.888C365.005 320.806 355.732 321.931 352.467 320.574C349.855 319.489 349.725 316.117 349.986 314.566L353.482 303.385Z" fill="black"/>
<path d="M552 364.195C571 361.695 598.691 349.657 606.5 335.695" stroke="black" stroke-width="10"/>
<path d="M442.67 349.364C466.788 355.842 492.259 339.056 499.559 311.873C503.314 297.893 501.532 283.885 495.635 272.695L486 270.695L462 247.695L444 252.165C429.317 257.545 416.952 270.796 412.219 288.415C404.919 315.599 418.552 342.886 442.67 349.364Z" fill="black"/>
<path d="M458.438 268.743C460.823 266.79 464.898 265.325 469.371 266.79C474.478 268.463 481.05 272.649 483.783 278.02C487.262 284.856 487.262 292.668 486.765 302.433C486.342 310.738 480.867 332.561 462.5 334.195C445.102 335.742 444.306 318.104 445 303.195C446 281.695 453.667 272.649 458.438 268.743Z" fill="#FECD10"/>
<path d="M446.814 272.167C446.593 271.194 446.029 269.422 444.314 268.167C442.783 267.047 440.814 266.667 438.814 266.667C436.314 266.667 435.346 267.238 433.689 268.922C432.279 270.353 429.963 274.617 432.667 280.492C435.301 286.214 438.775 284.645 442.542 281.619C446.217 278.666 447.257 274.113 446.814 272.167Z" fill="white"/>
<mask id="mask0_5_2" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="444" y="266" width="43" height="69">
<path d="M458.438 268.743C460.823 266.79 464.898 265.325 469.371 266.79C474.478 268.463 481.05 272.649 483.783 278.02C487.262 284.856 487.262 292.668 486.765 302.433C486.342 310.738 480.867 332.561 462.5 334.195C445.102 335.742 444.306 318.104 445 303.195C446 281.695 453.667 272.649 458.438 268.743Z" fill="#FE9F10"/>
</mask>
<g mask="url(#mask0_5_2)">
<g filter="url(#filter0_f_5_2)">
<path d="M492 309.695L489 276.195L477 265.195L467.5 264.195L460 267.195C483.5 274.695 482.5 310.195 476 328.695L492 309.695Z" fill="#FE9F10"/>
</g>
</g>
<defs>
<filter id="filter0_f_5_2" x="451" y="255.195" width="50" height="82.5" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feGaussianBlur stdDeviation="4.5" result="effect1_foregroundBlur_5_2"/>
</filter>
<linearGradient id="paint0_linear_5_2" x1="488.5" y1="369.195" x2="488.5" y2="440.195" gradientUnits="userSpaceOnUse">
<stop stop-color="#714D29"/>
<stop offset="1" stop-color="#C1A180"/>
</linearGradient>
<linearGradient id="paint1_linear_5_2" x1="697" y1="367.695" x2="697" y2="446.695" gradientUnits="userSpaceOnUse">
<stop stop-color="#714D29"/>
<stop offset="1" stop-color="#C1A180"/>
</linearGradient>
<linearGradient id="paint2_linear_5_2" x1="307.75" y1="126.195" x2="307.75" y2="270.695" gradientUnits="userSpaceOnUse">
<stop stop-color="#714D29"/>
<stop offset="1" stop-color="#C1A180"/>
</linearGradient>
<linearGradient id="paint3_linear_5_2" x1="324.75" y1="461.195" x2="324.75" y2="647.195" gradientUnits="userSpaceOnUse">
<stop stop-color="#C1A180"/>
<stop offset="1" stop-color="#714D29"/>
</linearGradient>
<linearGradient id="paint4_linear_5_2" x1="689.25" y1="466.195" x2="689.25" y2="599.695" gradientUnits="userSpaceOnUse">
<stop stop-color="#C1A180"/>
<stop offset="1" stop-color="#714D29"/>
</linearGradient>
<radialGradient id="paint5_radial_5_2" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(283.5 642.695) rotate(17.4274) scale(512.526 728.349)">
<stop stop-color="white"/>
<stop offset="1" stop-color="#BBBBBB"/>
</radialGradient>
<radialGradient id="paint6_radial_5_2" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(436.5 102.195) rotate(30.5854) scale(363.585 350.906)">
<stop stop-color="white"/>
<stop offset="1" stop-color="#C0C0C0"/>
</radialGradient>
</defs>
</svg>
</file>

<file path="docs/blog/posts/release-hatch-1100.md">
---
date: 2024-05-02
authors: [ofek,flying-sheep]
description: >-
  Hatch v1.10.0 brings a test command, support for UV, and a Python script runner.
categories:
  - Release
---

# Hatch v1.10.0

Hatch [v1.10.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.10.0) brings a test command, support for UV, and a Python script runner.

<!-- more -->

## Test command

The new [`test`](../../cli/reference.md#hatch-test) command allows you to easily run tests for your project on multiple versions of Python. The default behavior follows best practices, using [pytest](https://github.com/pytest-dev/pytest) with select plugins for test execution and [coverage.py](https://github.com/nedbat/coveragepy) for code coverage measurement.

The command is designed to be both simple to use while also satisfying the needs of most projects. For example, the following shows Hatch running tests for [Jinja](https://github.com/pallets/jinja) in all environments in the [default matrix](../../config/internal/testing.md#matrix):

<figure markdown>
  ![Testing Jinja example](release-hatch-1100/testing-jinja.gif){ loading=lazy role="img" }
</figure>

Here is us testing [Rich](https://github.com/Textualize/rich), with a bit of configuration:

<figure markdown>
  ![Testing Rich example](release-hatch-1100/testing-rich.gif){ loading=lazy role="img" }
</figure>

See the [tutorial](../../tutorials/testing/overview.md) for a detailed walk-through and the [config reference](../../config/internal/testing.md) for options.

## UV

The package installer [UV](https://github.com/astral-sh/uv), brought to you by the same folks behind [Ruff](https://github.com/astral-sh/ruff), is now supported. In any environment, you can set the `installer` option to `uv` to use UV in place of [virtualenv](https://github.com/pypa/virtualenv) & [pip](https://github.com/pypa/pip) for virtual environment creation and dependency management, respectively. This often results in a significant performance benefit.

For example, if you wanted to enable this functionality for the [default](../../config/environment/overview.md#inheritance) environment, you could set the following:

```toml config-example
[tool.hatch.envs.default]
installer = "uv"
```

Semi-internal environments like those used for [testing](../../config/internal/testing.md) and [static analysis](../../config/internal/static-analysis.md) have this enabled by default.

See the [how-to guide](../../how-to/environment/select-installer.md) for more information about switching the installer.

## Python script runner

The [`run`](../../cli/reference.md#hatch-run) command now supports executing Python scripts with [inline metadata](https://packaging.python.org/en/latest/specifications/inline-script-metadata/) as standardized by [PEP 723](https://peps.python.org/pep-0723/).

As an example, consider the following script:

```python tab="script.py"
# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "httpx",
#   "rich",
# ]
# ///

import httpx
from rich.pretty import pprint

resp = httpx.get("https://peps.python.org/api/peps.json")
data = resp.json()
pprint([(k, v["title"]) for k, v in data.items()][:10])
```

If you run the script for the first time as follows:

```
hatch run script.py
```

Hatch will create a dedicated environment for that script using a version of Python greater than or equal to 3.11 with dependencies `httpx` and `rich`.

<figure markdown>
  ![Script running example](release-hatch-1100/run-script.gif){ loading=lazy role="img" }
</figure>

See the [how-to guide](../../how-to/run/python-scripts.md) for more information.

## Static analysis

The environment used for static analysis is now [completely configurable](../../config/internal/static-analysis.md#customize-behavior) such that you can fully alter the underlying behavior of the [`fmt`](../../cli/reference.md#hatch-fmt) command (see the [how-to](../../how-to/static-analysis/behavior.md)).

Additionally, Ruff has been updated to version 1.4.0 and the rules selected by default have been updated accordingly. Check out their [blog post](https://astral.sh/blog/ruff-v0.4.0) about how the new hand-written parser has made it twice as fast!

## Community highlights

### Visual Studio Code

Visual Studio Code [announced support](https://code.visualstudio.com/updates/v1_88#_hatch-environment-discovery) for Hatch environments in their latest release. This means that you can now easily discover and select Hatch environments for your projects directly from the editor.

See the [how-to guide](../../how-to/integrate/vscode.md) for detailed instructions.

### CMake build plugin

A [new release](https://github.com/scikit-build/scikit-build-core/releases/tag/v0.9.0) of the extension module builder [scikit-build-core](https://github.com/scikit-build/scikit-build-core) has introduced a [build plugin](https://scikit-build-core.readthedocs.io/en/stable/plugins/hatchling.html) for Hatchling. This means that you can use Hatchling as your build backend while also shipping extension modules built with CMake.

To get started, add the dependency to your [build requirements](../../config/build.md#build-system):

```toml tab="pyproject.toml"
[build-system]
requires = ["hatchling>=1.24.2", "scikit-build-core~=0.9.3"]
build-backend = "hatchling.build"
```

Then explicitly enable the `experimental` option (acknowledging that the plugin will move to a dedicated package in the future):

```toml config-example
[tool.hatch.build.targets.wheel.hooks.scikit-build]
experimental = true
```

At this point, you can create your `CMakeLists.txt` file as usual and start building your extension modules with CMake! Check out the dedicated [example project](https://github.com/scikit-build/scikit-build-sample-projects/tree/main/projects/hatchling-pybind11-hello) for a complete demonstration.

## Meta

### Docs

The efforts toward documentation improvements have increased substantially and the priorities have [shifted](https://github.com/pypa/hatch/issues/1245). From now on expect to see far more tutorials and how-to guides rather than just reference material.

### Future

Upcoming features include:

- workspaces functionality [similar to Cargo](https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html)
- commands to manage dependencies
- Windows release artifacts signed by the PSF (just like macOS)
- performance improvements for both the CLI and the Hatchling build system

### Support

If you or your organization finds value in what Hatch provides, consider a [sponsorship](https://github.com/sponsors/ofek) to assist with maintenance and more rapid development!
</file>

<file path="docs/blog/posts/release-hatch-160.md">
---
date: 2022-10-08
authors: [ofek]
description: >-
  Hatch v1.6.0 brings improvements to build environments, better handling
  of dynamic metadata, and support for tools like Visual Studio Code.
categories:
  - Release
---

# Hatch v1.6.0

Hatch [v1.6.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.6.0) brings improvements to build environments, better handling of dynamic metadata, and support for tools like Visual Studio Code.

<!-- more -->

## Build environments

Originally, the environment interface method for providing builder sub-environments was intended to be used in conjunction with some cleanup logic in order to provide a fresh setup every time. However, this is unnecessary in practice because build dependencies rarely change.

Without caching, repeat build environment use is slow which affects the following scenarios:

- the [`build`](../../cli/reference.md#hatch-build) command
- commands that read project metadata, like [`dep hash`](../../cli/reference.md#hatch-dep-hash), if any fields are [set dynamically](../../config/metadata.md#dynamic)

Now a new environment interface method `build_environment_exists` is used by Hatch to determine whether or not it has already been created, for implementations that have a caching mechanism.

The [`virtual`](../../plugins/environment/virtual.md) environment type now uses this method to cache build environments.

## Project metadata

Dynamically defined metadata is now supported everywhere, thanks to the new caching of `virtual` build environments.

A [`project metadata`](../../cli/reference.md#hatch-project-metadata) command is introduced that displays the fully resolved [metadata](../../config/metadata.md). The output format is JSON unless a field is specified as an argument.

For example, if you checkout a project that is built by Hatch, like [FastAPI](https://github.com/tiangolo/fastapi), and run:

```
hatch project metadata readme
```

only the `readme` text will be displayed. If the content is in Markdown, then [Rich](https://github.com/Textualize/rich) will render it directly in your terminal:

![FastAPI readme](release-hatch-160/rich-readme.png)

## Virtual environment location

The [`virtual`](../../plugins/environment/virtual.md) environment type now uses a flat layout for storage in the configured `virtual` [environment directory](../../config/hatch.md#environments) if the directory resides somewhere within the project root or if it is set to a `.virtualenvs` directory within the user's home directory.

For example, if you define the following Hatch configuration:

```toml tab="config.toml"
[dirs.env]
virtual = ".hatch"
```

and the following [matrix](../../config/environment/advanced.md#matrix):

```toml config-example
[[tool.hatch.envs.test.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]
```

then [locating](../../cli/reference.md#hatch-env-find) environments with the following command:

```
hatch env find test
```

will show that the general directory structure is:

```
.hatch
├── test.py3.7
├── test.py3.8
├── test.py3.9
├── test.py3.10
└── test.py3.11
```

This flat structure is required for detection of virtual environments by tools like Visual Studio Code and PyCharm.

Additionally, the `virtual` environment type now supports a `path` option to specify an explicit path that all [inherited](../../config/environment/overview.md#inheritance) environments will share, such as the common `.venv`.

## Migration script improvements

The [script](https://github.com/pypa/hatch/blob/hatch-v1.6.0/src/hatch/cli/new/migrate.py) used to migrate [existing projects](../../intro.md#existing-project) from `setuptools` has been improved to handle more edge cases that were encountered in the wild and now no longer modifies the formatting of existing `pyproject.toml` configuration.

## Hatchling

Hatch now depends on Hatchling [v1.11.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.11.0), which was also just released.

### Environment version source

A new [`env` version source](../../plugins/version-source/env.md) is available that allows for the project version to be defined by an environment variable.

### Relaxed version bumping

The [`standard` version scheme](../../plugins/version-scheme/standard.md) now supports a `validate-bump` option that when set to `false` will forego the check when [updating the version](../../version.md#updating) that the desired version is higher than the current version.

This use case comes from [Project Jupyter](https://jupyter.org):

> A common pattern we use in Jupyter is to bump to a `.dev0` minor version bump after making a release.  If we have a  bug fix that needs to go out in the interim, we'd rather not be forced to create a branch every time.
</file>

<file path="docs/blog/posts/release-hatch-180.md">
---
date: 2023-12-11
authors: [ofek]
description: >-
  Hatch v1.8.0 brings Python distribution management, static analysis and
  formatting backed by Ruff, and binaries for every platform.
categories:
  - Release
---

# Hatch v1.8.0

Hatch [v1.8.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.8.0) brings Python distribution management, static analysis and formatting backed by Ruff, and binaries for every platform.

<!-- more -->

## Installation made easy

One thing that has been a perpetual problem for Hatch and other Python applications is that Python itself is a dependency. You, and more importantly your users, need to in some way get Python before your software can even be used. The recommended way to go about that is platform-dependent and even differs based on your target audience. I viewed this as a central UX problem for Hatch and so severe that I took a bit of a hiatus to solve it.

Luckily, I have to my satisfaction solved this problem in the form of [PyApp](https://github.com/ofek/pyapp). It is a runtime installer for Python projects written in Rust. Apps are distributed as standalone executables as users have come to expect and bootstrapping occurs upon the first invocation. Here is an example of what you would see the first time you run a binary from this release:

<figure markdown>
  ![Installation example](release-hatch-180/install-demo.gif){ loading=lazy role="img" }
</figure>

Now that we have binaries, creating installers for different platforms becomes trivial. Starting with this release not only are binaries available for every platform but also we have installers for Windows and macOS. The installer for macOS is signed using a certificate from the same account used to sign the official distributions from https://www.python.org, so users will not get any security pop-ups. Shout out to @ewdurbin for their extreme generosity in setting up multiple certificates in their free time!

These installers and binaries are now the [recommended way](../../install.md) to install and update Hatch. These binaries have built-in management so you can update to the latest version by running `hatch self update`.

!!! note "Windows signing"
    In future we will sign the installers for Windows but I did not have time to look into how that works. macOS signing took way longer than I anticipated :sweat_smile:

## Python management

For a long time I and other users have desired that Hatch gain the ability to manage Python distributions. In my mind this was always blocked on a better installation experience because there was sort of a chicken-or-egg problem where you want a Python manager but you first need Python. No longer is that the case!

The new [`python`](../../cli/reference.md#hatch-python) command group allows for easy installation of various distributions to arbitrary locations which are then added to your PATH by default. Hatch supports CPython and PyPy distributions:

<figure markdown>
  ![Available Python distributions](release-hatch-180/available-pythons.png){ loading=lazy width="200" role="img" }
</figure>

## Virtual environment Python resolution

The `virtual` environment type is now far more intelligent when resolving the parent distribution to use and guarantees that, when no specific version is requested, the resolved distribution will always be [compatible](../../config/metadata.md#python-support) with the project.

Additionally, when a requested version cannot be found on PATH it will [automatically](../../plugins/environment/virtual.md#python-resolution) be downloaded and managed internally.

## Static analysis

There is a new [`fmt`](../../cli/reference.md#hatch-fmt) command, backed entirely by [Ruff](https://github.com/astral-sh/ruff), that checks and fixes your code for formatting and linting issues.

Starting with this release, Hatch maintains [default settings](../../config/internal/static-analysis.md#default-settings) that are guaranteed to be up-to-date and represent best practices for programming in modern Python. The idea is to provide defaults that are so broadly applicable that the majority of users will maintain little if any of their own [overrides](../../config/internal/static-analysis.md#extending-config).

The default behavior is internal management of settings to provide an OOTB experience that works. It is recommended however that you [persist](../../config/internal/static-analysis.md#persistent-config) the default config file in version control so that other tools like IDEs can utilize your full configuration.

Since Ruff is now provided as a built-in feature, new project templates no longer have such configuration and are much less verbose.

## Build improvements

[Building](../../cli/reference.md#hatch-build) projects that do not use Hatchling as a backend is now supported and such builds are managed with the standard [build](https://github.com/pypa/build) tool.

The bridge between Hatch and the Hatchling CLI has been removed. Previously, the builder would send serialized messages to Hatch that would contain the desired content and style for each line of output. This was done in an effort to allow builder and build hook plugins to output pretty messages without actually requiring a dependency like [Rich](https://github.com/Textualize/rich). A problem that arises with this is that builders that invoke subprocesses will not display ANSI codes as one might expect and will lose out on the interactive experience of such invocations, like the built-in [binary builder plugin](../../plugins/builder/binary.md) calling `cargo build`. So now everything is simpler at the expense of no colored output without manual logic, or adding a dependency if you're a third-party plugin.

## Faster environment usage

[Spawning a shell](../../environment.md#entering-environments) or [running commands](../../environment.md#command-execution) within environments always first checks that your project's dependencies are satisfied and if not synchronizes the environment with what is defined. Previously, this had the potential to be quite slow for projects that have many dependencies.

Now the set of dependency definitions is [hashed](../../plugins/environment/reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependency_hash) and no check is performed if the hash is the same as before, significantly speeding up environment usage in most cases.

## Hatchling

Hatch now depends on Hatchling [v1.19.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.19.0), which was also just released.

### Better defaults

Hatchling is all about providing the best possible defaults, even at the expense of backward compatibility. In this release, there are two breaking changes that provide a much better user experience and were in fact requested by users.

- Both the [`force-include`](../../config/build.md#forced-inclusion) option and the [`force_include_editable`](../../plugins/builder/wheel.md#build-data) wheel build data setting now raise errors if source paths do not exist.
- The `wheel` build target now raises an error when no file inclusion options have been defined and none of its [heuristics](../../plugins/builder/wheel.md#default-file-selection) to determine what to ship are satisfied.

### Binary build target

A new [`binary`](../../plugins/builder/binary.md) build target is now stable that allows for the building of standalone binaries for projects. This is what Hatch itself uses for its binaries.

## Meta

### Why Hatch?

A [new page](../../why.md) has been introduced that discusses the value proposition of Hatch and Hatchling in comparison to alternatives. Currently, it only addresses a few features but in future this page will become more comprehensive.

### Future

Upcoming features include a `test` command, commands to manage dependencies, and workspaces functionality [similar to Cargo](https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html) that will make managing monorepos far easier.

Next year there will be two large efforts that you should expect to see:

1. A significant amount of my free time (and some at work) will be devoted to introducing lock file functionality in Hatch and trying to get whatever that happens to be standardized.

    I met with @brettcannon about his thoughts post-[PEP 665](https://peps.python.org/pep-0665/) and about [mousebender](https://github.com/brettcannon/mousebender). I also met with the [prefix.dev](https://github.com/prefix-dev) team about [rip](https://github.com/prefix-dev/rip) and was fortunate enough to be shown a demo before its official announcement.

    At the moment, the two options I see are to either go all in and contribute to mousebender or rely on the Prefix folks and use rip. The latter has the benefit of _potentially_ supporting Conda as a side effect with the downside of being quite new with the spec firmly out of our control. The former has the benefit of being able to easily gain institutional support from the Python packaging team and each of our employers with the downside being a significant amount of work needing to be done.

1. When @henryiii is able to get some free time away from teaching I plan to work with him once again and push very hard for the Python build ecosystem to adopt the [extensionlib](https://github.com/ofek/extensionlib) approach.

    I am of the opinion that the Python community has not fully completed the expressed outcome of [PEP 517][] in that build backends are still (for the most part) reliant on setuptools for building non-Python code bases.

    Basically, there are components that interact with compilers to produce extension modules and components that pack files into an archive which we call a build backend. These are two distinct pieces of functionality and my view is that there should be an API that allows backends to consume extension module builders to find out where things got created and where they should be shipped inside archives.

    In this hypothetical future any build backend would be able to trigger the building of extension modules based on user configuration.

### Support

If you or your organization finds value in what Hatch provides, consider a [sponsorship](https://github.com/sponsors/ofek) to assist with maintenance and more rapid development!
</file>

<file path="docs/blog/posts/release-hatch-190.md">
---
date: 2023-12-18
authors: [ofek]
description: >-
  Hatch v1.9.0 brings improvements to static analysis and important bug fixes.
categories:
  - Release
---

# Hatch v1.9.0

Hatch [v1.9.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.9.0) brings improvements to static analysis and important bug fixes.

<!-- more -->

## Static analysis

The default version of Ruff has been increased to [v0.1.8](https://astral.sh/blog/ruff-v0.1.8). This release brings formatting capabilities to docstrings and Hatch enables this by default with line length set to 80. This length was chosen as the default because it plays nicely with the rendering of the most popular themes for Python documentation, such as [Material for MkDocs](https://github.com/squidfunk/mkdocs-material) and [Furo](https://github.com/pradyunsg/furo).

Additionally, it is now possible for projects to [pin](../../config/internal/static-analysis.md#dependencies) to specific versions of Ruff for upgrading at a later time:

```toml config-example
[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff==X.Y.Z"]
```

## Notable fixes

- Python resolution for environments that do not install the project is no longer bound by the project's [Python requirement](../../config/metadata.md#python-support).
- Fixed an edge case for out-of-the-box static analysis when there was existing configuration.
- Compatibility checks for environments no longer occur if the environment is already created. This significantly increases the responsiveness of environment usage.
</file>

<file path="docs/blog/.authors.yml">
authors:
  ofek:
    name: Ofek Lev
    description: Creator
    avatar: https://avatars.githubusercontent.com/u/9677399
  flying-sheep:
    name: Phil A.
    description: Contributor
    avatar: https://avatars.githubusercontent.com/u/291575
</file>

<file path="docs/blog/index.md">
# Blog
</file>

<file path="docs/cli/about.md">
# CLI usage

-----

## Verbosity

The amount of displayed output is controlled solely by the `-v`/`--verbose` (environment variable `HATCH_VERBOSE`) and  `-q`/`--quiet` (environment variable `HATCH_QUIET`) [root options](reference.md#hatch).

The levels are documented [here](../config/hatch.md#terminal).

## Project awareness

No matter the [mode](../config/hatch.md#mode), Hatch will always change to the project's root directory for [entering](../environment.md#entering-environments) or [running commands](../environment.md#command-execution) in environments.

## Tab completion

Completion is achieved by saving a script and then executing it as a part of your shell's startup sequence.

Afterward, you'll need to start a new shell in order for the changes to take effect.

=== "Bash"
    Save the script somewhere:

    ```console
    _HATCH_COMPLETE=bash_source hatch > ~/.hatch-complete.bash
    ```

    Source the file in `~/.bashrc` (or `~/.bash_profile` if on macOS):

    ```bash
    . ~/.hatch-complete.bash
    ```

=== "Z shell"
    Save the script somewhere:

    ```console
    _HATCH_COMPLETE=zsh_source hatch > ~/.hatch-complete.zsh
    ```

    Source the file in `~/.zshrc`:

    ```zsh
    . ~/.hatch-complete.zsh
    ```

=== "fish"
    Save the script in `~/.config/fish/completions`:

    ```console
    _HATCH_COMPLETE=fish_source hatch > ~/.config/fish/completions/hatch.fish
    ```
</file>

<file path="docs/cli/reference.md">
::: mkdocs-click
    :module: hatch.cli
    :command: hatch
    :depth: 0
    :style: table
    :remove_ascii_art: true
</file>

<file path="docs/community/contributing.md">
# Contributing

The usual process to make a contribution is to:

1. Check for existing related issues
2. Fork the repository and create a new branch
3. Make your changes
4. Make sure formatting, linting and tests passes.
5. Add tests if possible to cover the lines you added.
6. Commit, and send a Pull Request.

## Clone the repository

Clone the `hatch` repository, `cd` into it, and create a new branch for your contribution:

```bash
cd hatch
git switch -c add-my-contribution
```

## Run the tests

Run the test suite while developing:

```bash
hatch test
```

Run the test suite with coverage report:

```bash
hatch test --cover
```

Run the extended test suite with coverage:

```bash
hatch test --cover --all
```

## Lint

Run automated formatting:

```bash
hatch fmt
```

Run full linting and type checking:

```bash
hatch fmt --check
hatch run types:check
```

## Docs

Start the documentation in development:

```bash
hatch run docs:serve
```

Build and validate the documentation website:

```bash
hatch run docs:build-check
```
</file>

<file path="docs/community/highlights.md">
# Community highlights

-----

## Integration

- Project Jupyter - https://blog.jupyter.org/packaging-for-jupyter-in-2022-c7be64c38926
- Visual Studio Code - https://code.visualstudio.com/updates/v1_88#_hatch-environment-discovery

## Adoption

- Black - https://ichard26.github.io/blog/2022/10/black-22.10.0/#goodbye-python-36-and-hello-hatchling
- "Switching to Hatch" - https://andrich.me/2023/08/switching-to-hatch/
</file>

<file path="docs/community/users.md">
# Users

-----

The following is not intended to be a complete enumeration. Be sure to view the [development version](/dev/community/users/) of this page for an up-to-date listing.

## Projects

[aiogram](https://github.com/aiogram/aiogram/blob/a2e5f9a8b8c994ad65bce05cde9c744760f47c4c/pyproject.toml#L1-L3)
| [Apache Airflow](https://github.com/apache/airflow/blob/ba2ba7f49395b528ea67611c423ddd71b64b8ede/pyproject.toml#L18-L39)
| [argon2-cffi](https://github.com/hynek/argon2-cffi/blob/59c7470af1a65b3b71e18fbf9abeca2cca3d707a/pyproject.toml#L3-L5)
| [attrs](https://github.com/python-attrs/attrs/blob/01413df3db8e64437547f7fa6439a646fa116a98/pyproject.toml#L3-L5)
| [Black](https://github.com/psf/black/blob/f22273a72b3f1c15085f2d4a43e8d785bf48c822/pyproject.toml#L28-L30)
| [coffea](https://github.com/CoffeaTeam/coffea/blob/bab41f66869293f8ba630556f21ac093828788b7/pyproject.toml#L1-L3)
| [Colorama](https://github.com/tartley/colorama/blob/cd653d75be52f4d8c3953eb6942fe597375f8b97/pyproject.toml#L1-L5)
| [Django Anymail](https://github.com/anymail/django-anymail/blob/63e355084c057d60bcce41afa1de315b163b6235/pyproject.toml#L1-L3)
| [Django Debug Toolbar](https://github.com/jazzband/django-debug-toolbar/blob/d04b9d1a666fd6427604c92f86f91380597eae14/pyproject.toml#L1-L5)
| [Django NYT](https://github.com/django-wiki/django-nyt/blob/b87107f5fadc2a77941bb15e7dfb95dba3d7f40d/pyproject.toml#L1-L3)
| [Django OTP](https://github.com/django-otp/django-otp/blob/1cb288fceaab66e7921f80c27f40df475c056811/pyproject.toml#L135-L137)
| [Django OTP Agents](https://github.com/django-otp/django-otp-agents/blob/b9cd473bef9153c05c8768f72208229f2a25951d/pyproject.toml#L118-L120)
| [Django OTP Twilio](https://github.com/django-otp/django-otp-twilio/blob/a0c68a829cbffe373605df03f62e093b3f9d4170/pyproject.toml#L118-L120)
| [Django OTP YubiKey](https://github.com/django-otp/django-otp-yubikey/blob/fbd121dfb0f4890745df10ce2fb129e2b588da24/pyproject.toml#L118-L120)
| [Django Places](https://github.com/oscarmcm/django-places/blob/76630ccc1a45380d40cca1262fa4f9a269cf5112/pyproject.toml#L1-L3)
| [Django Wiki](https://github.com/django-wiki/django-wiki/blob/1b03661c3fe7260b0eb82565cc3812b96de6b674/pyproject.toml#L1-L3)
| [FastAPI](https://github.com/tiangolo/fastapi/blob/1073062c7f2c48bcc28bcedbdc009c18c171f6fb/pyproject.toml#L1-L3)
| [filelock](https://github.com/tox-dev/filelock/blob/c06aa983616804c349007c7a536c361d0e1a8cff/pyproject.toml#L1-L6)
| [Fluentd](https://github.com/fluent/fluent-logger-python/blob/1e58a7e8b62b435d42f80f7b8ca264012925edce/pyproject.toml#L1-L3)
| [github3.py](https://github.com/sigmavirus24/github3.py/blob/94541f8adee67e39f3061c6b29db3e39cef5ce05/pyproject.toml#L1-L3)
| [Gradio](https://github.com/gradio-app/gradio/blob/f43481c18ac6468fbf30bf9a80981b7eab453961/pyproject.toml#L1-L3)
| [HTTPX](https://github.com/encode/httpx/blob/45b7cfaad3a8987ea35fa5bf092bbdda485444fd/pyproject.toml#L1-L3)
| [iCalendar for Humans](https://github.com/ics-py/ics-py/blob/133a0955f6efbb83ff0eae45ad0bbe6902a8f2f1/pyproject.toml#L61-L63)
| [LinkChecker](https://github.com/linkchecker/linkchecker/blob/de40321b57a2271e90e696b5320c0409faaa895d/pyproject.toml#L29-L34)
| [Litestar](https://github.com/litestar-org/litestar/blob/f9e3f727e8ae71e4b58a518240fb6c66e83c10de/pyproject.toml#L181-L183)
| [Material for MkDocs](https://github.com/squidfunk/mkdocs-material/blob/7ca1c1d623b4750d4aaa0cfd673b0ed2c6050c2b/pyproject.toml#L21-L23)
| [MicroPython](https://github.com/micropython/micropython/blob/30a9ccf4caa72c62cb8656a1572518fef34b08a4/tools/mpremote/pyproject.toml#L1-L7)
| [MkDocs](https://github.com/mkdocs/mkdocs/blob/65c24c21f0057ec4717d20d14d5fb7af22fe8caf/pyproject.toml#L1-L3)
| [openSUSE](https://github.com/openSUSE/py2pack/blob/25be8cdb53ee6966213474e3399fe451f33993f6/pyproject.toml#L1-L3)
| [Nox](https://github.com/wntrblm/nox/blob/cc710bde9d6a8781833144bac02a5f4581d9eca7/pyproject.toml#L1-L5)
| [Packit](https://github.com/packit/packit/blob/6e286a7b4d0f79cd2a8213a8ae978788be5219c5/pyproject.toml#L1-L3)
| [pipx](https://github.com/pypa/pipx/blob/bc7dd03c4d872c443257685109a650ec3d524814/pyproject.toml#L1-L3)
| [platformdirs](https://github.com/platformdirs/platformdirs/blob/382e961c436f9974e56dc69ce105b6fd8945c343/pyproject.toml#L1-L3)
| [Pydantic](https://github.com/pydantic/pydantic/blob/f341049b9e5538a125751d75b4e44c1609b53df6/pyproject.toml#L1-L3)
| [Pygments](https://github.com/pygments/pygments/blob/0f3ddb3a6e3ed99957fe20aab695446f85835387/pyproject.toml#L1-L3)
| [PyHamcrest](https://github.com/hamcrest/PyHamcrest/blob/07a787207619a7f7d51088d36051a632432a0144/pyproject.toml#L1-L3)
| [PyMdown Extensions](https://github.com/facelessuser/pymdown-extensions/blob/72390ce2d0b40df638e31b75f1f02f45659724de/pyproject.toml#L1-L5)
| [Python JSON Schema](https://github.com/python-jsonschema/jsonschema/blob/afc22f09e74d696ab00be8a711bbc5c2a15327b7/pyproject.toml#L1-L3)
| [Rye](https://github.com/mitsuhiko/rye/blob/92b571bfd42e5748d2e535174d78fc7311a889a3/pyproject.toml#L20-L22)
| [SALib](https://github.com/SALib/SALib/blob/7490a686e959b436f7db9bc9cf6fa4b2e7bfa3fc/pyproject.toml#L1-L3)
| [Spack](https://github.com/spack/spack/blob/7a5e527cab5980cb4732bb3504fab77d75286a19/pyproject.toml#L36-L38)
| [Starlette](https://github.com/encode/starlette/blob/31164e346b9bd1ce17d968e1301c3bb2c23bb418/pyproject.toml#L1-L3)
| [structlog](https://github.com/hynek/structlog/blob/6e2e8c6025fb90484c5e6c5ff2fd3e96a61854cf/pyproject.toml#L3-L5)
| [tox](https://github.com/tox-dev/tox/blob/f2b4a4a6f5e8bbc8f9f0cff3dd5d17c50e874172/pyproject.toml#L1-L3)
| [Twisted](https://github.com/twisted/twisted/blob/960e26bb1f4c67b3f7819553d0c45b25e6db4aae/pyproject.toml#L1-L7)
| [urllib3](https://github.com/urllib3/urllib3/blob/8dda1974ae51839304f8517ab7993006c0d9db2e/pyproject.toml#L3-L5)
| [Uvicorn](https://github.com/encode/uvicorn/blob/ccd1aae48e49dd8c9365600fd79e886efe88be1d/pyproject.toml#L1-L3)
| [virtualenv](https://github.com/pypa/virtualenv/blob/69664d522d98899c21dcf0e88a0af3efcb0c71e7/pyproject.toml#L1-L6)
| [Voilà](https://github.com/voila-dashboards/voila/blob/71292e4124b1f4a6f91c8b4e16ea9ad6b5ef500b/pyproject.toml#L1-L7)
| [XGBoost](https://github.com/dmlc/xgboost/blob/62571b79eb08398a031873c3704da4e9cfd2c301/python-package/pyproject.toml#L1-L6)
| [Ypy](https://github.com/y-crdt/ypy/tree/b9241a9e7ca248b6c44b62707d719b1ef20eef74#using-hatch)
| [yt-dlp](https://github.com/yt-dlp/yt-dlp/blob/111b61ddef305584d45a48e7b7c73ffcedf062a2/pyproject.toml#L1-L3)

## Industry

- [Anaconda](https://www.anaconda.com) <sup>\[[1](https://github.com/ContinuumIO/dask-awkward/blob/105275b1937cce9a80a352af0b200d4e264f27f7/pyproject.toml#L1-L3)|[2](https://github.com/conda-incubator/ensureconda/blob/b20dbcf7166009ff4e9270f35ed75da7afc3db60/pyproject.toml#L1-L3)|[3](https://github.com/conda-incubator/conda-lock/blob/9187487698f9afbb08e131cd585a17bba82ce9f2/pyproject.toml#L1-L3)|[4](https://github.com/conda-incubator/conda-auth/blob/437ca609ea8bf4b8bd91d32dd427abe8294f6a3b/pyproject.toml#L1-L3)|[5](https://github.com/conda/conda-content-trust/blob/f72a50b04126177f37b965c25d02564223b7acf8/pyproject.toml#L1-L6)|[6](https://github.com/conda/conda-build/blob/37ab8d3de084d32b907b726ba2ad4570e91d326b/pyproject.toml#L1-L6)|[7](https://github.com/conda/conda/blob/0c38f5660f7eca66434827af910beddf9f7e462d/pyproject.toml#L1-L6)\]</sup>
- [Airbnb](https://www.airbnb.com) <sup>\[[1](https://github.com/airbnb/omniduct/blob/98c66e10b493c83d42f69bc6b97fab7a8c91eab1/pyproject.toml#L1-L3)\]</sup>
- [Astronomer](https://www.astronomer.io) <sup>\[[1](https://github.com/astronomer/astronomer-cosmos/blob/29886492a46cf1dccd4c17a1643010975cb8094a/pyproject.toml#L1-L3)|[2](https://github.com/astronomer/astro-provider-databricks/blob/3e1ca039a024a98f9079d178478aa24702e15453/pyproject.toml#L1-L3)|[3](https://github.com/astronomer/astro-providers-template/blob/5be542eb5763f3d9accc7d6d7bc35c9214d15904/pyproject.toml#L1-L3)\]</sup>
- [Bitwarden](https://bitwarden.com) <sup>\[[1](https://github.com/bitwarden/gh-actions/blob/c3bc6a192283618c6ae92f33bde7c2f28e198539/lint-workflow-v2/pyproject.toml#L1-L3)\]</sup>
- [Bloomberg](https://www.bloomberg.com) <sup>\[[1](https://github.com/bloomberg/ipydatagrid/blob/04b73fe67bf33d054e69036fe2794ac72057b105/pyproject.toml#L1-L6)|[2](https://github.com/bloomberg/pytest-memray/blob/4ea6a7608adb0de4572d35768fbd370aee016627/pyproject.toml#L1-L3)\]</sup>
- [Blue Robotics](https://bluerobotics.com) <sup>\[[1](https://github.com/bluerobotics/navigator-lib/blob/1d8afadb0804ffbbf32147232b1c627e92786c07/pyproject.toml#L26-L38)\]</sup>
- [Cars.com](https://www.cars.com) <sup>\[[1](https://github.com/carsdotcom/cars-forge/blob/ba14db991a5c7cb3c5adc3a4a364121e43f6aa0e/pyproject.toml#L63-L65)\]</sup>
- [Cisco](https://www.cisco.com) <sup>\[[1](https://github.com/CiscoDevNet/sastre/blob/76da836c9df01f1d3d40df5475c0d2caff4db566/pyproject.toml#L1-L3)|[2](https://github.com/CiscoDevNet/sdwan-devops/blob/bb6dde778af881be257fab722b12196599f63ddf/sdwan_config_builder/pyproject.toml#L1-L3)\]</sup>
- [Databricks](https://www.databricks.com) <sup>\[[1](https://github.com/databrickslabs/ucx/blob/80145a4f2b6dccf65c1ad048fdb4d1e2622afa09/pyproject.toml#L1-L3)|[2](https://github.com/databricks-industry-solutions/many-model-forecasting/blob/a9e347b0444354bf836a8f528e4deb547e7bdd05/pyproject.toml#L35-L37)|[3](https://github.com/databrickslabs/pylint-plugin/blob/3b33c79dea74bdaac011488e16ad0121db4150b1/pyproject.toml#L34-L36)\]</sup>
- [Datadog](https://www.datadoghq.com) <sup>\[[1](https://github.com/DataDog/datadogpy/blob/63d0c01b5bbcb8158cf3ddab153639951ab44945/pyproject.toml#L1-L3)|[2](https://github.com/DataDog/integrations-core/pulls?q=is%3Apr+author%3Aofek+in%3Atitle+Add+pyproject.toml+file)|[3](https://github.com/DataDog/integrations-extras/pulls?q=is%3Apr+author%3Aofek+in%3Atitle+Add+pyproject.toml+file)|[4](https://github.com/DataDog/mkdocs-click/blob/434925323f3bb187595d4c7f6a2c80b790015109/pyproject.toml#L1-L3)\]</sup>
- [deepset](https://www.deepset.ai) <sup>\[[1](https://github.com/deepset-ai/haystack/blob/728383a14968111b0a032480ac276d6e3313332b/pyproject.toml#L1-L5)|[2](https://github.com/deepset-ai/deepset-cloud-sdk/blob/18c76d4b7a3863040fac0d9e6f47c765f266d7fa/pyproject.toml#L1-L3)\]</sup>
- [Elastic](https://www.elastic.co) <sup>\[[1](https://github.com/elastic/rally/blob/8ba7980bb25b85f25fe20f3fd5dd8e12b9b1214b/pyproject.toml#L1-L3)|[2](https://github.com/elastic/rally-tracks/blob/33840005cd3e2a6191d73a567e5c2c0858169270/pyproject.toml#L1-L3)|[3](https://github.com/elastic/curator/blob/b41743a061ad790820affe7acee5f71abe819357/pyproject.toml#L1-L3)\]</sup>
- [Google](https://about.google) <sup>\[[1](https://github.com/google/latexify_py/blob/9307e6e70df0d0a5f7d524833a85e2c25ffe66ef/pyproject.toml#L1-L5)|[2](https://github.com/google/gcp_scanner/blob/93dc594a6d920d1aff9bc8fef780a32056c12e27/pyproject.toml#L1-L3)|[3](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/a66407bc412a2726781f30063923a49bb6789064/python-example-noncontainer-artifacts/pyproject.toml#L1-L3)|[4](https://github.com/google/visualblocks/blob/3809f598253cdad2d93ed82b1e2623c10b4a5a0b/python/pyproject.toml#L1-L3)|[5](https://github.com/google/jaxtyping/blob/1acc0d7153f3881870b0376496d8efa27689cb3b/pyproject.toml#L29-L31)|[6](https://github.com/GoogleCloudPlatform/database-assessment/blob/d14d587cb2cab55cc0b1b92d79d0b30f12807b42/pyproject.toml#L126-L128)\]</sup>
- [IBM](https://www.ibm.com) <sup>\[[1](https://github.com/IBM/python-log-router/blob/b0fc624cde262c6faadd5cb2e780e1ed7847f6c2/pyproject.toml#L1-L3)\]</sup>
- [JPMorgan Chase](https://www.jpmorganchase.com) <sup>\[[1](https://github.com/jpmorganchase/jupyter-fs/blob/e7ea3ced16e8f7f1297ac8bed3f028b641558256/pyproject.toml#L1-L7)\]</sup>
- [Intel Corporation](https://www.intel.com) <sup>\[[1](https://github.com/intel/neural-compressor/blob/5f6f38b96d45d0253b8de239df51c09b2471a8fb/neural_coder/extensions/neurl_compressor_ext_lab_alibaba/pyproject.toml#L1-L3)|[2](https://github.com/intel/tdx-tools/blob/ba4ba1796f21388d15cb14ecf673747c303ea0ae/utils/ovmfkeyenroll/pyproject.toml#L1-L3)|[3](https://github.com/intel/open-domain-question-and-answer/blob/6d8e90acb738ea3fe33d400c549c45ee05461afc/pyproject.toml#L1-L5)\]</sup>
- [McKinsey](https://www.mckinsey.com) <sup>\[[1](https://github.com/mckinsey/vizro/blob/a7e88f19b7f50df19f9e0981ae19b36ccd83bc52/vizro-core/pyproject.toml#L1-L3)|[2](https://github.com/mckinsey/vizro/blob/a7e88f19b7f50df19f9e0981ae19b36ccd83bc52/vizro-ai/pyproject.toml#L1-L3)\]</sup>
- [Meta](https://about.facebook.com) <sup>\[[1](https://github.com/facebook/usort/blob/b3d1dc49abac0c06ac29f1ceb332d2b86a50e850/pyproject.toml#L1-L3)|[2](https://github.com/Instagram/Fixit/blob/c95b0ef9f8c02adfd6a541b55f22f0bd6a922706/pyproject.toml#L1-L3)|[3](https://github.com/meta-llama/llama-recipes/blob/44b66374bec23ad77c00af4348197e6641a8d2e3/pyproject.toml#L1-L3)\]</sup>
- [Microsoft](https://www.microsoft.com) <sup>\[[1](https://github.com/microsoft/qsharp/blob/2ef271eea86f6cc4dff3c79526aaa79422489fcd/jupyterlab/pyproject.toml#L1-L3)|[2](https://github.com/microsoft/responsible-ai-toolbox-tracker/blob/4e37f81726ba7ccf76d0539a5edc3ba6a988c3a5/pyproject.toml#L1-L7)|[3](https://github.com/microsoft/CoML/blob/9a4d670c3f7ff7710556b8d75e502824f74664ce/pyproject.toml#L1-L3)|[4](https://github.com/microsoft/microxcaling/blob/142efb98622df68e4a4c01ca77d2fc02dfdec261/pyproject.toml#L18-L20)|[5](https://github.com/microsoft/sca-fuzzer/blob/c0d42786e06115daf8281e40e5475e8e69f6b10e/pyproject.toml#L1-L3)|[6](https://github.com/microsoft/TypeChat/blob/f53b971179d0136424a75d67287903a2421af98b/python/pyproject.toml#L1-L3)\]</sup>
- [OpenAI](https://openai.com) <sup>\[[1](https://github.com/openai/openai-python/blob/e36956673d9049713c91bca6ce7aebe58638f483/pyproject.toml#L88-L90)\]</sup>
- [Oracle](https://www.oracle.com) <sup>\[[1](https://github.com/oracle/graalpython/blob/9b41424fd80727614878b5903f9d8ae0447bfd4e/graalpy_virtualenv/pyproject.toml#L40-L42)\]</sup>
- [Palo Alto Networks](https://www.paloaltonetworks.com) <sup>\[[1](https://github.com/PaloAltoNetworks/pc-python-integration/blob/a3e29d71c6704dfb07cf85d592dec15a9ea575b7/pyproject.toml#L1-L3)\]</sup>
- [Quansight](https://quansight.com) <sup>\[[1](https://github.com/Quansight-Labs/jupyter-a11y-testing/blob/f36bf5b2e8cb87613c637fc5aa03401c92ec58d0/pyproject.toml#L3-L6)\]</sup>
- [Red Hat](https://www.redhat.com) <sup>\[[1](https://github.com/RedHatQE/wrapanapi/blob/036f85a7fa97b86eee732804f61cfe574c571a6e/pyproject.toml#L1-L3)|[2](https://github.com/RedHatQE/widgetastic.core/blob/c40d7f50f3e55c9ac9f0da1b91a56f89949bbe0c/pyproject.toml#L52-L54)|[3](https://github.com/RedHatQE/widgetastic.patternfly4/blob/5b19fcdc123732639edc8cf715dbe5fc64f3bd28/pyproject.toml#L38-L40)|[4](https://github.com/redhat-developer/devspaces-images/blob/db8de2f54466e37986ce64d96436b566c75b0677/devspaces-udi/build/python/requirements-build.in#L12)|[5](https://github.com/RedHatQE/Sentaku/blob/19dc91c00b70cb2054e0c28d69906e894fa8c104/pyproject.toml#L1-L6)\]</sup>
- [Salesforce](https://www.salesforce.com) <sup>\[[1](https://github.com/SalesforceAIResearch/uni2ts/blob/ce27c2f9a0c6ee9119997e8ef0026388f143dcd6/pyproject.toml#L1-L3)\]</sup>
- [Snowflake](https://www.snowflake.com) <sup>\[[1](https://github.com/Snowflake-Labs/snowcli/blob/a8cafe80ef81969655a4391425b0f45c2874d1a4/pyproject.toml#L1-L3)\]</sup>
- [Splunk](https://www.splunk.com) <sup>\[[1](https://github.com/splunk/splunk-mltk-container-docker/blob/e13ae55a4a16ea459092ee9c1e9ba9772cbe6bf2/package-dsdlsupport/pyproject.toml#L1-L3)\]</sup>
- [The Westervelt Company](https://westervelt.com) <sup>\[[1](https://github.com/westerveltco/django-twc-project/blob/f20768d4d42761ec0ce44f3f2283b66e47f2c8f8/pyproject.toml#L1-L3)|[2](https://github.com/westerveltco/django-email-relay/blob/e576c0561408f3c27babc9035b7284fd580a69c2/pyproject.toml#L1-L3)|[3](https://github.com/westerveltco/django-simple-nav/blob/4c0dfd5ee4bfa28fd6696e1394e6bbe2e119bfcc/pyproject.toml#L1-L3)|[4](https://github.com/westerveltco/django-q-registry/blob/59ae52978a8d900b05a50465f40e2834a16f4303/pyproject.toml#L1-L3)|[5](https://github.com/westerveltco/wagtail-heroicons/blob/a8b8985ec3994156b85c07a440a30c8ad2f21263/pyproject.toml#L1-L3)|[6](https://github.com/westerveltco/django-opfield/blob/7818ce3cdc56d25807cd5bc8f613eb12de2c6177/pyproject.toml#L1-L3)\]</sup>
- [Virtru](https://www.virtru.com) <sup>\[[1](https://github.com/virtru/access-pdp/blob/46089e8a2ef691b80f92bbd6777bdfbcff1c1671/clients/python/accesspdp/pyproject.toml#L24-L26)|[2](https://github.com/virtru/access-pdp/blob/46089e8a2ef691b80f92bbd6777bdfbcff1c1671/clients/python/attributes/pyproject.toml#L21-L23)\]</sup>
- [VMware](https://www.vmware.com) <sup>\[[1](https://github.com/vmware/versatile-data-kit/blob/f77faec3e9ccd840b6dc6fdc95af8a434e822e71/projects/vdk-plugins/vdk-jupyter/vdk-jupyterlab-extension/pyproject.toml#L1-L3)|[2](https://github.com/vmware/repository-service-tuf-cli/blob/374f1ac0c2a4ada6d7a7c26fba55e811f2998be8/pyproject.toml#L1-L4)|[3](https://github.com/vmware/vhpc-toolkit/blob/b8429bc4753caa302a4fc8bb160cca89e84cfd45/pyproject.toml#L20-L22)\]</sup>
- [Volvo Group](https://www.volvogroup.com) <sup>\[[1](https://github.com/VolvoGroup/dymoval/blob/75261b85635dce594719b01c5fc33ad951ce55b0/pyproject.toml#L1-L3)\]</sup>

## Organizations

- [Free Ebook Foundation](https://ebookfoundation.org) <sup>\[[1](https://github.com/EbookFoundation/alt-text/blob/00433b1a971309a441ef4822322cc6ea6347d9b2/pyproject.toml#L1-L3)\]</sup>
- [Greater Paris University Hospitals (AP-HP)](https://www.aphp.fr) <sup>\[[1](https://github.com/aphp/edspdf/blob/ec083ed7fedddbdbb398c6feee530e05273f7dbb/pyproject.toml#L195-L197)\]</sup>
- [Massachusetts General Hospital](https://www.massgeneral.org) <sup>\[[1](https://github.com/pinellolab/DNA-Diffusion/blob/6530de4ae4e0ff95f6e0852cd0d77ee763fb8833/pyproject.toml#L1-L3)\]</sup>
- [Let's Encrypt](https://letsencrypt.org) <sup>\[[1](https://github.com/letsencrypt/mariadb-sequential-partition-manager-py/blob/666de864bcd3e17001513cd14f8919b01be7dd58/pyproject.toml#L1-L3)\]</sup>
- [Max Planck Society](https://www.mpg.de/en) <sup>\[[1](https://github.com/center-for-humans-and-machines/transformer-heads/blob/0a362a6654a9a0e357d759700c08991017b39fec/pyproject.toml#L1-L3)\]</sup>
- [OpenTelemetry](https://opentelemetry.io) <sup>\[[1](https://github.com/open-telemetry/opentelemetry-python/issues/2884#issuecomment-1229539511)|[2](https://github.com/open-telemetry/opentelemetry-python-contrib/issues/1259#issuecomment-1235028860)\]</sup>
- [Smithsonian Institution](https://www.si.edu) <sup>\[[1](https://github.com/Smithsonian/ngehtutil/blob/02921f3a2ce11eb3f1555a0b9d3b177592d2be37/pyproject.toml#L1-L3)\]</sup>
- [The New York Public Library](https://www.nypl.org) <sup>\[[1](https://github.com/NYPL/python-utils/blob/79b6d1b98d35b318af23c2af2f4f25e2c8162b15/pyproject.toml#L1-L3)\]</sup>

## Government

- [European Molecular Biology Laboratory](https://www.embl.org)
    - [European Bioinformatics Institute](https://www.ebi.ac.uk) <sup>\[[1](https://github.com/MarioniLab/oor_benchmark/blob/9117c354bb780b3cb5a73a30e68aa26fc68efdb5/pyproject.toml#L1-L3)\]</sup>
- [Germany](https://en.wikipedia.org/wiki/Germany)
    - [Berlin Institute of Health](https://www.bihealth.org/en/) <sup>\[[1](https://github.com/BIH-CEI/napkon-string-matching/blob/48d0d0ade9f1f173df9a2881a71412bbe73a006b/pyproject.toml#L25-L27)\]</sup>
    - [Helmholtz Munich](https://www.helmholtz-munich.de/en) <sup>\[[1](https://github.com/theislab/moscot/blob/545d8ac7c6a648931699cddaa757ea47b63d9b5e/pyproject.toml#L1-L3)|[2](https://github.com/theislab/multigrate/blob/1974d5901d2894573acd823c3d4d3c4ba23aba7a/pyproject.toml#L1-L3)\]</sup>
- [Norway](https://en.wikipedia.org/wiki/Norway)
    - [Statistics Norway](https://www.ssb.no/en/) <sup>\[[1](https://github.com/statisticsnorway/dapla-hurtigstart-jupyter-extension/blob/96ac7441c46ed92684a8850df5cc72be15446289/pyproject.toml#L1-L3)\]</sup>
- [United Kingdom](https://en.wikipedia.org/wiki/United_Kingdom)
    - [The Alan Turing Institute](https://www.turing.ac.uk) <sup>\[[1](https://github.com/alan-turing-institute/bureau/blob/6ed1882eaeb2410814549c4ffc2c1860c1acf7ca/build/pyproject.toml#L1-L3)\]</sup>
    - [Department for Business and Trade](https://www.gov.uk/government/organisations/department-for-business-and-trade) <sup>\[[1](https://github.com/uktrade/mirror-git-to-s3/blob/ce38c7c689f5dba1f3c9de4e10b8889afc8e44b7/pyproject.toml#L1-L3)\]</sup>
    - [The National Archives](https://www.nationalarchives.gov.uk) <sup>\[[1](https://github.com/nationalarchives/da-ayr-webapp/blob/1e62d38c0fe14f7d391835c704ba715241affcdb/pyproject.toml#L1-L3)\]</sup>
- [United States](https://en.wikipedia.org/wiki/United_States)
    - [NASA](https://www.nasa.gov) <sup>\[[1](https://github.com/spacetelescope/hstaxe/blob/c6a73c8211c3eac71f0aa6eb4125f5be227ae7c4/pyproject.toml#L1-L3)\]</sup>
    - [National Institute of Standards and Technology](https://www.nist.gov) <sup>\[[1](https://github.com/usnistgov/thermoextrap/blob/536bb94b5c08814171dccfe9569d16854a5404bc/pyproject.toml#L1-L7)|[2](https://github.com/usnistgov/labbench/blob/fc5762fc155b8eb30ba32b487b5244ed6ff78739/pyproject.toml#L99-L101)|[3](https://github.com/NERSC/sfapi_client/blob/685c4988501cd10ec3cb495368e2839d3b648124/pyproject.toml#L1-L3)|[4](https://github.com/usnistgov/cmomy/blob/1689a97c65d00fc6d48221e128b789839c56b034/pyproject.toml#L1-L7)|[5](https://github.com/usnistgov/tmmc-lnpy/blob/ee6e16e21aef5824352f214042ed52ba252bd588/pyproject.toml#L1-L7)\]</sup>
    - [National Security Agency](https://www.nsa.gov) <sup>\[[1](https://github.com/NationalSecurityAgency/ghidra/blob/6242fda158fed6c7dbbd6928a4a74371a212c373/Ghidra/Debug/Debugger-agent-lldb/src/main/py/pyproject.toml#L1-L3)|[2](https://github.com/NationalSecurityAgency/ghidra/blob/6242fda158fed6c7dbbd6928a4a74371a212c373/Ghidra/Debug/Debugger-agent-gdb/src/main/py/pyproject.toml#L1-L3)\]</sup>
    - [National Telecommunications and Information Administration](https://www.ntia.gov) <sup>\[[1](https://github.com/NTIA/scos-tekrsa/blob/73090a737fdc0bd3a6c7c08deb170e00018d9ceb/pyproject.toml#L1-L3)|[2](https://github.com/NTIA/scos-actions/blob/a388aa46d414c7b5e67f76f8982bff2f534014f7/pyproject.toml#L1-L3)|[3](https://github.com/NTIA/tekrsa-api-wrap/blob/edce621075f053809c1640c6197c46bbc6456a10/pyproject.toml#L1-L3)|[4](https://github.com/NTIA/Preselector/pull/10)\]</sup>

## Academia

- [Brown University](https://www.brown.edu)
    - [Carney Institute for Brain Science](https://www.brown.edu/carney/) <sup>\[[1](https://github.com/AutoResearch/sourpea/blob/f3007a58d3e5a647ccfb37fee24e44468d5ec707/pyproject.toml#L1-L3)\]</sup>
- [Carnegie Mellon University](https://www.cmu.edu)
    - [Department of Chemical Engineering](https://www.cheme.engineering.cmu.edu/) <sup>\[[1](https://github.com/FAIR-Chem/fairchem/blob/e344dc83f9e295c4be3830118302daf96e8a9b78/packages/fairchem-core/pyproject.toml#L1-L3)|[2](https://github.com/FAIR-Chem/fairchem/blob/e344dc83f9e295c4be3830118302daf96e8a9b78/packages/fairchem-data-oc/pyproject.toml#L1-L3)|[3](https://github.com/FAIR-Chem/fairchem/blob/e344dc83f9e295c4be3830118302daf96e8a9b78/packages/fairchem-data-om/pyproject.toml#L1-L3)|[4](https://github.com/FAIR-Chem/fairchem/blob/e344dc83f9e295c4be3830118302daf96e8a9b78/packages/fairchem-demo-ocpapi/pyproject.toml#L1-L3)|[5](https://github.com/FAIR-Chem/fairchem/blob/e344dc83f9e295c4be3830118302daf96e8a9b78/packages/fairchem-applications-AdsorbML/pyproject.toml#L1-L3)|[6](https://github.com/FAIR-Chem/fairchem/blob/e344dc83f9e295c4be3830118302daf96e8a9b78/packages/fairchem-applications-cattsunami/pyproject.toml#L1-L3)\]</sup>
- [Chinese Academy of Sciences](https://english.cas.cn)
    - [Academy of Mathematics and Systems Science](http://english.amss.cas.cn) <sup>\[[1](https://github.com/zhanglabtools/ConsTADs/blob/db732cf820569564f933cd290736ad83b9c99dea/pyproject.toml#L1-L3)\]</sup>
- [Georgia Institute of Technology](https://www.gatech.edu)
    - [Georgia Tech Database Group](https://db.cc.gatech.edu) <sup>\[[1](https://github.com/georgia-tech-db/sqlfuzz/blob/e85895dae1c92a223cbc13b12d4a19f297c410ab/pyproject.toml#L1-L3)\]</sup>
- [Harvard University](https://www.harvard.edu)
    - [Department of Molecular and Cellular Biology](https://www.mcb.harvard.edu) <sup>\[[1](https://github.com/Hekstra-Lab/raman-analysis/blob/4b548b5ea935e52a7bd1f0ec8f4a00c822b81ede/pyproject.toml#L2-L4)\]</sup>
- [Heidelberg University](https://www.uni-heidelberg.de)
    - [Center for Molecular Biology](https://www.zmbh.uni-heidelberg.de) <sup>\[[1](https://github.com/anders-biostat/pymetdense/blob/a1d210f2c03d2919b549f2fed1e4db986d01c8d5/pyproject.toml#L1-L3)\]</sup>
- [Leiden University](https://www.universiteitleiden.nl/en)
    - [Leiden University Libraries](https://www.library.universiteitleiden.nl) <sup>\[[1](https://github.com/LeidenUniversityLibrary/maps-tools/blob/d7a9fc683be919d4f5538f6a6c80319558064968/pyproject.toml#L3-L5)|[2](https://github.com/LeidenUniversityLibrary/archminer/blob/61465dc36924ffe593653aa5888a27617c93860e/pyproject.toml#L1-L3)\]</sup>
- [Maastricht University](https://www.maastrichtuniversity.nl)
    - [Institute of Data Science](https://www.maastrichtuniversity.nl/research/institute-data-science) <sup>\[[1](https://github.com/MaastrichtU-IDS/fair-test/blob/9c88c18cb1b0fa8d37336cdd2b7b132cb979a83a/pyproject.toml#L95-L97)|[2](https://github.com/MaastrichtU-IDS/fair-enough-metrics/blob/dad29ef1f99f5e01a76799d909e538565ae2ed4e/pyproject.toml#L50-L52)|[3](https://github.com/MaastrichtU-IDS/cookiecutter-python-package/blob/1eda79b6ca64c27b4b12407464b3c2dc2511af94/%7B%7Bcookiecutter.package_name%7D%7D/pyproject.toml#L70-L72)|[4](https://github.com/MaastrichtU-IDS/translator-openpredict/blob/b6e0f5f5100129d3038618f86e4c2c05d62d51f4/pyproject.toml#L1-L3)|[5](https://github.com/MaastrichtU-IDS/cookiecutter-trapi-predict-kit/blob/a329c6d66c1b96b53e9fd02501c762aee32a69fb/%7B%7Bcookiecutter.package_name%7D%7D/pyproject.toml#L1-L3)|[6](https://github.com/MaastrichtU-IDS/sparql-profiler/blob/ac70a9e8575f9c9769eb1caf140e2f81b136835c/pyproject.toml#L1-L3)|[7](https://github.com/MaastrichtU-IDS/knowledge-collaboratory/blob/8263d69e7b8e485b0aff7e88a3a7aed3cceaa253/backend/pyproject.toml#L1-L3)|[8](https://github.com/MaastrichtU-IDS/LUCE/blob/94c9a0dda840a3d81828a89aefcfb19fee51cd60/pyproject.toml#L1-L3)\]</sup>
- [Massachusetts Institute of Technology](https://www.mit.edu)
    - [Computer Science and Artificial Intelligence Laboratory](https://www.csail.mit.edu) <sup>\[[1](https://github.com/Learning-and-Intelligent-Systems/lisdf/blob/d49a85a3924909f1d10fef40463757b141f47f90/pyproject.toml#L1-L3)\]</sup>
    - [Digital Humanities](https://digitalhumanities.mit.edu) <sup>\[[1](https://github.com/cuthbertLab/music21/blob/5417b3ce6415ab016a39564e21e29799387263e9/pyproject.toml#L1-L5)\]</sup>
- [Medical University of Innsbruck](https://www.i-med.ac.at/mypoint/index.xml.en)
    - [Institute of Bioinformatics](https://icbi.i-med.ac.at) <sup>\[[1](https://github.com/icbi-lab/infercnvpy/blob/12c103f4062860d5d91152222163eb7d22340146/pyproject.toml#L1-L3)\]</sup>
- [Polytechnique Montréal](https://www.polymtl.ca/en/)
    - [Department of Computer Engineering and Software Engineering](https://www.polymtl.ca/gigl/) <sup>\[[1](https://github.com/corail-research/seahorse/blob/e876042f92c704180c16055a6720ef828c21e0ae/pyproject.toml#L1-L3)\]</sup>
- [Siberian Branch of the Russian Academy of Sciences](https://www.sbras.ru/en/)
    - [Institute of Cytology and Genetics](https://www.icgbio.ru/en/) <sup>\[[1](https://github.com/genomech/FastContext/blob/f8ff7f4bbea9d6d3cdf2e3a361f72e9283b04f67/pyproject.toml#L1-L3)|[2](https://github.com/genomech/exoclasma-index/blob/2e0555c3e86d731f3aa8c978b23b586d3a0c492e/pyproject.toml#L1-L3)|[3](https://github.com/genomech/exoclasma-fastq/blob/80ea3eddf603d2b54bb02b5ada6d275a9436f287/pyproject.toml#L1-L3)|[4](https://github.com/genomech/exoclasma-pipe/blob/fbe365dd9301eec51879ef53b1704be66813bb8b/pyproject.toml#L1-L3)\]</sup>
- [Stanford University](https://www.stanford.edu)
    - [Empirical Security Research Group](https://esrg.stanford.edu/) <sup>\[[1](https://github.com/stanford-esrg/gps/blob/66f803bfd4726cd9d1b3e1724abfd34a36079530/pyproject.toml#L1-L3)\]</sup>
- [University of British Columbia](https://www.ubc.ca)
    - [Department of Earth, Ocean and Atmospheric Sciences](https://www.eoas.ubc.ca) <sup>\[[1](https://github.com/UBC-MOAD/cookiecutter-MOAD-pypkg/blob/75441f962a6e7b87c09bcae031fdfaec3cf75f74/%7B%7Bcookiecutter.package_name%7D%7D/pyproject.toml#L18-L20)|[2](https://github.com/SalishSeaCast/NEMO-Cmd/blob/be5425d49eaf845eaba8f1611455f2de75aa194b/pyproject.toml#L19-L21)|[3](https://github.com/SalishSeaCast/SalishSeaNowcast/blob/1a850c1368b7f3504e5804101647ab481fbe7048/pyproject.toml#L19-L21)\]</sup>
- [University of California, Berkeley](https://www.berkeley.edu)
    - [Center for Computational Biology](https://ccb.berkeley.edu) <sup>\[[1](https://github.com/YosefLab/scib-metrics/blob/4dcbf55d80e21cf141332ba718fc5c0eb012eac1/pyproject.toml#L1-L3)\]</sup>
- [University of California, Santa Barbara](https://www.ucsb.edu)
    - [Department of Computer Science](https://www.cs.ucsb.edu) <sup>\[[1](https://github.com/UCSBarchlab/PyRTL/blob/46b0f3d2ff0e334d9cf3a04ef5b090bd55fcc177/pyproject.toml#L10-L12)\]</sup>
- [University of Freiburg](https://uni-freiburg.de)
    - [Freiburg Center for Data Analysis and Modeling](https://www.fdm.uni-freiburg.de) <sup>\[[1](https://github.com/Spatial-Systems-Biology-Freiburg/FisInMa/blob/b9c5a980ae03d6f577e17242e6bce7822f665f94/pyproject.toml#L1-L3)\]</sup>
- [University of Illinois Urbana-Champaign](https://illinois.edu)
    - [Grainger College of Engineering](https://grainger.illinois.edu) <sup>\[[1](https://github.com/SPI2Py/SPI2Py/blob/feefd7bb003b42f4790982d68e7e4e5fdb6ca8ad/pyproject.toml#L1-L3)\]</sup>
- [University of Lausanne](https://www.unil.ch/central/en/home.html)
    - [Department of Computational Biology](https://www.unil.ch/dbc/en/home.html) <sup>\[[1](https://github.com/CSOgroup/cellcharter/blob/00b4cd44f13702bd8832ed6705614efda048b7b7/pyproject.toml#L1-L3)\]</sup>
- [University of Ljubljana](https://www.uni-lj.si/eng/)
    - [Faculty of Mechanical Engineering](https://www.uni-lj.si/academies_and_faculties/faculties/2013071111460582/) <sup>\[[1](https://github.com/ladisk/speckle_pattern/blob/055f45b66c7985564a9fa400d8d2f41ddd181d31/pyproject.toml#L1-L3)\]</sup>
- [University of Massachusetts Amherst](https://www.umass.edu)
    - [College of Information and Computer Sciences](https://www.cics.umass.edu) <sup>\[[1](https://github.com/plasma-umass/ChatDBG/blob/1bc32332464afe2f3932b0a9f586a88c8fb7a357/pyproject.toml#L1-L3)\]</sup>
- [University of Oxford](https://www.ox.ac.uk)
    - [Oxford Research Software Engineering](https://www.rse.ox.ac.uk) <sup>\[[1](https://github.com/OxfordRSE/oxrse_unit_conv/blob/e4cb7d15bbc8ba4ab7ff816d3bbdfb65fbda3f76/pyproject.toml#L21-L23)\]</sup>
- [University of Pennsylvania](https://www.upenn.edu)
    - [Lifespan Informatics and Neuroimaging Center](https://www.pennlinc.io) <sup>\[[1](https://github.com/PennLINC/qsiprep/blob/f0d661589cc2efd9a787b2c1b3db397a897daa98/pyproject.toml#L1-L3)|[2](https://github.com/PennLINC/xcp_d/blob/e68c802604ac9ca2c179ca2f164ceb4db7c1fe66/pyproject.toml#L1-L3)|[3](https://github.com/PennLINC/aslprep/blob/aeee1a22fce8f8f1bd922de6d822124fb7b3343f/pyproject.toml#L1-L3)|[4](https://github.com/PennLINC/CuBIDS/blob/fac73803b7c6d6ab938af142783c8159a6df6c60/pyproject.toml#L1-L3)\]</sup>
- [University of Regensburg](https://www.uni-regensburg.de/en)
    - [Spang Lab](https://www.spang-lab.de) <sup>\[[1](https://github.com/spang-lab/adadmire/blob/14f169a4d493952433224e518c4ed2484d6cc2bd/pyproject.toml#L1-L3)\]</sup>
- [University of Sussex](https://www.sussex.ac.uk)
    - [Predictive Analytics Lab](https://wearepal.ai) <sup>\[[1](https://github.com/wearepal/teext/blob/9253c9412b4ca340c42c0b9de0e8ac8f5ccdd0e3/pyproject.toml#L1-L3)\]</sup>
- [University of Toronto Scarborough](https://www.utsc.utoronto.ca/home/)
    - [utsc-networking](https://github.com/utsc-networking) <sup>\[[1](https://github.com/utsc-networking/utsc-tools/blob/02a79d48d133470a4394fced138b40c660cf111c/projects/core/pyproject.toml#L1-L3)|[2](https://github.com/utsc-networking/utsc-tools/blob/02a79d48d133470a4394fced138b40c660cf111c/projects/nautobot/pyproject.toml#L1-L3)|[3](https://github.com/utsc-networking/utsc-tools/blob/02a79d48d133470a4394fced138b40c660cf111c/projects/switchconfig/pyproject.toml#L1-L3)|[4](https://github.com/utsc-networking/utsc-tools/blob/02a79d48d133470a4394fced138b40c660cf111c/projects/scripts/pyproject.toml#L1-L3)\]</sup>
- [University of Washington](https://www.washington.edu)
    - [Interactive Data Lab](https://idl.cs.washington.edu) <sup>\[[1](https://github.com/uwdata/mosaic/blob/a3b78fef28fcc3e711bb922c97c3113aa6cf9122/packages/widget/pyproject.toml#L1-L3)\]</sup>
    - [Virtual Brain Lab](https://github.com/VirtualBrainLab) <sup>\[[1](https://github.com/VirtualBrainLab/ephys-link/blob/ebdf3a1488f1010faa19f22397f10d6be4d29d6f/pyproject.toml#L1-L3)\]</sup>
- [University of Wisconsin-Madison](https://www.wisc.edu)
    - [Data Science Institute](https://datascience.wisc.edu/institute/) <sup>\[[1](https://github.com/UW-Madison-DSI/ask-xDD/blob/ae62d038303927b69dba9dadfef94b55b55731b3/pyproject.toml#L20-L22)\]</sup>
- [Waseda University](https://www.waseda.jp/top/en/)
    - [Tackeuchi Laboratory](https://www.f.waseda.jp/atacke/) <sup>\[[1](https://github.com/wasedatakeuchilab/python-project-template-hatch/blob/58949ab351d81b67f14aa45abf7c70b87394e2dc/pyproject.toml#L1-L3)|[2](https://github.com/wasedatakeuchilab/webapp-photo-luminescence/blob/864d1019650a2b057f761aa91ed9a6cbe6c1b455/pyproject.toml#L1-L3)|[3](https://github.com/wasedatakeuchilab/tlab-analysis/blob/72f0a710e35613e8996f473a80e5cb6c3f8c523e/pyproject.toml#L1-L3)|[4](https://github.com/wasedatakeuchilab/tlab-pptx/blob/ef331176906447dbbcf33e46f060b60ac3c007c5/pyproject.toml#L1-L3)|[5](https://github.com/wasedatakeuchilab/tlab-google/blob/53ae597611a146c90116b3b9277430832e1d04c9/pyproject.toml#L1-L3)\]</sup>
- [Wellcome Sanger Institute](https://www.sanger.ac.uk) <sup>\[[1](https://github.com/sanger/lab-share-lib/blob/b3290b1922aabc29ac256dc034b8cfcc7b30f143/pyproject.toml#L25-L27)\]</sup>

## Research

- [Clariah](https://www.clariah.nl) <sup>\[[1](https://github.com/CLARIAH/pure3d/blob/3f93d62cb1f5223836c9ebf4c058e6f491de71b9/pyproject.toml#L1-L3)\]</sup>
- [CloudDrift](https://cloud-drift.github.io/clouddrift/) <sup>\[[1](https://github.com/Cloud-Drift/clouddrift/blob/5e654569c869a027fe0a486f06917b358837d41e/pyproject.toml#L1-L3)\]</sup>
- [Dask](https://www.dask.org) <sup>\[[1](https://github.com/dask/dask-ml/blob/b95ba909c6dcd37c566f5193ba0b918396edaaee/pyproject.toml#L1-L3)|[2](https://github.com/dask/dask-labextension/blob/39b69ac5b8bfdb726347aabe3da86a15cb201b77/pyproject.toml#L1-L3)\]</sup>
- [GAMA](https://gama-platform.org) <sup>\[[1](https://github.com/gama-platform/Gama-client-python/blob/d9fecae0dff9050f39a011c4f4bdb02f5137b241/pyproject.toml#L1-L3)\]</sup>
- [IPython](https://ipython.org) <sup>\[[1](https://github.com/ipython/ipykernel/blob/dd0a9863e07c1d49f5aaf72c0c62670acee71b55/pyproject.toml#L1-L3)|[2](https://github.com/ipython/ipyparallel/blob/06f5d3df1f6e858a83c3af29438ae6d5af801267/pyproject.toml#L1-L6)|[3](https://github.com/ipython/traitlets/blob/ac13bbb885c275fd446f85a9d2e74d8058c2b3c1/pyproject.toml#L1-L3)\]</sup>
- [MNE](https://mne.tools) <sup>\[[1](https://github.com/mne-tools/mne-python/blob/8af33df490f94c3dd628cfc23beafed1a6cc6361/pyproject.toml#L1-L3)|[2](https://github.com/mne-tools/mne-bids-pipeline/blob/a6995abc39fab333ab957baa45b0026bdb12a3f9/pyproject.toml#L1-L3)|[3](https://github.com/mne-tools/mne-bids/blob/8321aef66e1c920bd4df748e326e06b0bf696e4c/pyproject.toml#L1-L3)\]</sup>
- [NIPY](https://nipy.org) <sup>\[[1](https://github.com/nipy/nibabel/blob/298788070a36e8d8616df36ebed0d4339f00e43b/pyproject.toml#L1-L3)|[2](https://github.com/nipy/quickshear/blob/83b362b794d52183ff40ec5dcc98239b94c5633a/pyproject.toml#L1-L3)\]</sup>
- [Project Jupyter](https://jupyter.org)
    - [Jupyter](https://github.com/jupyter) <sup>\[[1](https://github.com/jupyter/notebook/blob/b9bab689c9a2f33eb3b2cca1383c2d99baa7a2e8/pyproject.toml#L1-L3)|[2](https://github.com/jupyter/jupyter_core/blob/2a6fb6d2b28ca712268eee15d7b907a3a73271d8/pyproject.toml#L1-L3)|[3](https://github.com/jupyter/jupyter_client/blob/e526895a29e0331a167167070b1603f20a4b2840/pyproject.toml#L1-L3)|[4](https://github.com/jupyter/nbconvert/blob/af70c9fa83bee4d0c92e06b4ede4ef5ea7c920b0/pyproject.toml#L1-L3)\]</sup>
    - [JupyterLab](https://github.com/jupyterlab) <sup>\[[1](https://github.com/jupyterlab/hatch_jupyter_builder)|[2](https://github.com/jupyterlab/jupyterlab/pull/12606)|[3](https://github.com/jupyterlab/maintainer-tools/blob/0e95a837469f5325e5a840bd194fe8273087d2f6/pyproject.toml#L1-L3)|[4](https://github.com/jupyterlab/pytest-check-links/blob/b07e705d590e9fce22dc21191018f4f72ec7215b/pyproject.toml#L1-L3)|[5](https://github.com/jupyterlab/extension-cookiecutter-js/pull/41)\]</sup>
    - [Jupyter Server](https://github.com/jupyter-server) <sup>\[[1](https://github.com/jupyter-server/jupyter_server/blob/061d846fbd0cf2f0be50d12c4a15feffd3214774/pyproject.toml#L1-L3)|[2](https://github.com/jupyter-server/enterprise_gateway/blob/b45a81ae70680be7f8e0d1e3daed1df3063667fa/pyproject.toml#L1-L3)|[3](https://github.com/jupyter-server/jupyter_server_terminals/blob/4b32ceb34b9b6ae9c677424cc65c9c3bfe243719/pyproject.toml#L1-L3)|[4](https://github.com/jupyter-server/synchronizer/blob/5809e9ffd188beff743874a434884662867bb573/pyproject.toml#L1-L3)\]</sup>
- [RAPIDS](https://rapids.ai) <sup>\[[1](https://github.com/rapidsai/jupyterlab-nvdashboard/blob/578b58b4fd0ec31a7cc02ac6d2795622c00ef478/pyproject.toml#L3-L9)\]
- [Scikit-HEP](https://scikit-hep.org) <sup>\[[1](https://github.com/scikit-hep/uproot-browser/blob/f41ce3f3887057f5ec9a6cd164c3c41d1ec3d633/pyproject.toml#L1-L3)|[2](https://github.com/scikit-hep/uhi/blob/95ad870218a6fd7f2ab02f3d2b5c421e93a1f03f/pyproject.toml#L1-L3)|[3](https://github.com/scikit-hep/repo-review/blob/007026a62c6c61914ec49e111be587104f59b8ae/pyproject.toml#L1-L3)|[4](https://github.com/scikit-hep/hist/blob/768ea7de75f20c06caa6ded72d70bd132e4c9467/pyproject.toml#L1-L3)|[5](https://github.com/scikit-hep/vector/blob/cac88a2e0f1c4bf7bceaafbea6e234b3147e3ca3/pyproject.toml#L1-L6)|[6](https://github.com/scikit-hep/uproot5/blob/f9213e0f8c29435890e5aa72e336330bb7a785fe/pyproject.toml#L1-L5)|[7](https://github.com/scikit-hep/particle/blob/723c1618c7058feb0a914a6738d8b8018a5df1bd/pyproject.toml#L1-L3)|[8](https://github.com/scikit-hep/hepunits/blob/bd1302cbb85ed486c057f8b078ad4e026d65bb1c/pyproject.toml#L1-L3)|[9](https://github.com/scikit-hep/decaylanguage/blob/eae09aee69acef2d1c19f55665c5ca8b28588e01/pyproject.toml#L1-L6)|[10](https://github.com/scikit-hep/pyhf/blob/efbf201b57345063afec66c254aace3148f1f055/pyproject.toml#L1-L3)\]</sup>
- [scverse](https://scverse.org) <sup>\[[1](https://github.com/scverse/spatialdata-io/blob/15c395de859d6d06e5032016c9406acae5cac454/pyproject.toml#L1-L3)|[2](https://github.com/scverse/spatialdata-notebooks/blob/2b539a1d23b06b509a46a6bf3cb6594f1952f830/pyproject.toml#L1-L3)|[3](https://github.com/scverse/cookiecutter-scverse/blob/2892e1ddf0dd558cb9b547b47a7c2d0a156c9ef1/%7B%7Bcookiecutter.project_name%7D%7D/pyproject.toml#L1-L3)\]</sup>
- [Spyder](https://www.spyder-ide.org) <sup>\[[1](https://github.com/spyder-ide/envs-manager/blob/9c487532cbb4804c94d7cf23dcec9404b2a1c7ec/pyproject.toml#L1-L3)\]</sup>

## Security

- [Armory](https://github.com/twosixlabs/armory/blob/330caa23d54ce82886606810f103ce1a0eec98ce/pyproject.toml#L129-L134)
- [in-toto](https://github.com/in-toto/in-toto/blob/2768904b8a3892529aba8f8a605461fd178d9a58/pyproject.toml#L1-L3)
- [The Update Framework](https://github.com/theupdateframework/python-tuf/blob/72424a958b60817155fcacfed1216163790b26f7/pyproject.toml#L2-L4)

## Crypto

- [Ocean Protocol](https://oceanprotocol.com) <sup>\[[1](https://github.com/oceanprotocol/pybundlr/blob/484c755d96be2da35cda83f01861745867cdb2d4/pyproject.toml#L1-L6)\]</sup>
</file>

<file path="docs/config/environment/advanced.md">
# Advanced environment configuration

-----

## Context formatting

All environments support the following extra [context formatting](../context.md) fields:

| Field | Description |
| --- | --- |
| `env_name` | The name of the environment |
| `env_type` | The [type](overview.md#type) of environment |
| `matrix` | Its modifier selects the value of that matrix variable. If the environment is not part of a matrix or was not generated with the variable, you must specify a default value as an additional modifier e.g. `{matrix:version:v1.0.0}`. |
| `verbosity` | The integer verbosity value of Hatch. A `flag` modifier is supported that will render the value as a CLI flag e.g. `-2` becomes `-qq`, `1` becomes `-v`, and `0` becomes an empty string. An additional flag integer modifier may be used to adjust the verbosity level. For example, if you wanted to make a command quiet by default, you could use `{verbosity:flag:-1}` within the command. |
| `args` | For [executed commands](../../environment.md#command-execution) only, any extra command line arguments with an optional default modifier if none were provided |

## Matrix

Environments can define a series of matrices with the `matrix` option:

```toml config-example
[tool.hatch.envs.test]
dependencies = [
  "pytest"
]

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11"]
version = ["42", "3.14"]

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]
version = ["9000"]
feature = ["foo", "bar"]
```

Doing so will result in the product of each variable combination being its own environment.

### Naming

The name of the generated environments will be the variable values of each combination separated by hyphens, altogether prefixed by `<ENV_NAME>.`. For example, the following configuration:

```toml config-example
[[tool.hatch.envs.test.matrix]]
version = ["42"]
feature = ["foo", "bar"]
```

would indicate the following unique environments:

```
test.42-foo
test.42-bar
```

The exceptions to this format are described below.

#### Python variables

If the variables `py` or `python` are specified, then they will rank first in the product result and will be prefixed by `py` if the value is not. For example, the following configuration:

```toml config-example
[[tool.hatch.envs.test.matrix]]
version = ["42"]
python = ["3.9", "pypy3"]
```

would generate the following environments:

```
test.py3.9-42
test.pypy3-42
```

!!! note
    The value of this variable sets the [Python version](overview.md#python-version).

#### Name formatting

You can set the `matrix-name-format` option to modify how each variable part is formatted which recognizes the placeholders `{variable}` and `{value}`. For example, the following configuration:

```toml config-example
[tool.hatch.envs.test]
matrix-name-format = "{variable}_{value}"

[[tool.hatch.envs.test.matrix]]
version = ["42"]
feature = ["foo", "bar"]
```

would produce the following environments:

```
test.version_42-feature_foo
test.version_42-feature_bar
```

By default this option is set to `{value}`.

#### Default environment

If the `default` environment defines matrices, then the generated names will not be prefixed by the environment name. This can be useful for projects that only need a single series of matrices without any standalone environments.

### Selection

Rather than [selecting](../../environment.md#selection) a single generated environment, you can select the root environment to target all of them. For example, if you have the following configuration:

```toml config-example
[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-cov",
]

[tool.hatch.envs.test.scripts]
cov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]
version = ["42", "3.14"]
```

you could then run your tests consecutively in all 4 environments with:

```
hatch run test:cov
```

## Option overrides

You can modify options based on the conditions of different sources like [matrix variables](#matrix-variable-overrides) with the `overrides` table, using [dotted key](https://toml.io/en/v1.0.0#table) syntax for each declaration:

```toml config-example
[tool.hatch.envs.<ENV_NAME>.overrides]
<SOURCE>.<CONDITION>.<OPTION> = <VALUE>
```

The [type](#types) of the selected option determines the types of values.

### Platform overrides

Options can be modified based on the current platform using the `platform` source.

```toml config-example
[tool.hatch.envs.test.overrides]
platform.windows.scripts = [
  'run=pytest -m "not io_uring"',
]
```

The following platforms are supported:

- `linux`
- `windows`
- `macos`

### Environment variable overrides

Environment variables can modify options using the `env` source.

```toml config-example
[tool.hatch.envs.test.overrides]
env.GITHUB_ACTIONS.dev-mode = { value = false, if = ["true"] }
```

### Matrix variable overrides

The [matrix](#matrix) variables used to generate each environment can be used to modify options within using the `matrix` source.

```toml config-example
[tool.hatch.envs.test.overrides]
matrix.version.env-vars = "PRODUCT_VERSION"
matrix.auth.features = [
  { value = "oauth", if = ["oauth2"] },
  { value = "kerberos", if = ["kerberos"] },
]

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]
version = ["legacy", "latest"]
auth = ["oauth2", "kerberos", "noauth"]
```

### Name overrides

When a [matrix](#matrix) is defined, the `name` source can be used for regular expression matching on the generated name, minus the prefix for non-[default](#default-environment) environments.

```toml config-example
[tool.hatch.envs.test.overrides]
name."^0".env-vars = "TESTING_UNSTABLE=true"

[[tool.hatch.envs.test.matrix]]
version = ["0.1.0", "0.2.0", "1.0.0"]
```

### Types

- Literal types like strings for the [Python version](overview.md#python-version) or booleans for [skipping installation](overview.md#skip-install) can be set using the value itself, an inline table, or an array. For example:

    ```toml config-example
    [tool.hatch.envs.test.overrides]
    matrix.foo.python = "3.10"
    matrix.bar.skip-install = { value = true, if = ["..."] }
    env.CI.dev-mode = [
      { value = false, if = ["..."] },
      true,
    ]
    ```

    For arrays, the first allowed value will be used.

- Array types like [dependencies](overview.md#dependencies) or [commands](overview.md#commands) can be appended to using an array of strings or inline tables. For example:

    ```toml config-example
    [tool.hatch.envs.test.overrides]
    matrix.foo.dependencies = [
      "httpx",
      { value = "cryptography" },
    ]
    ```

- Mapping types like [environment variables](overview.md#environment-variables) or [scripts](overview.md#scripts) can have keys set using a string, or an array of strings or inline tables. For example:

    ```toml config-example
    [tool.hatch.envs.test.overrides]
    matrix.foo.env-vars = "KEY=VALUE"
    matrix.bar.env-vars = [
      "KEY1=VALUE1",
      { key = "KEY2", value = "VALUE2" },
    ]
    ```

    If the value is missing (no `=` for strings, no `value` key for inline tables), then the value will be set to the value of the source condition.

### Overwriting

Rather than supplementing the values within mapping types or array types, you can overwrite the option as a whole by prefixing the name with `set-`:

```toml config-example
[tool.hatch.envs.test.overrides]
matrix.foo.set-platforms = ["macos", "linux"]
```

When overwriting entire options or keys within mappings, override sources are applied in the following order:

1. [platform](#platform-overrides)
2. [environment variables](#environment-variable-overrides)
3. [matrix variables](#matrix-variable-overrides)
4. [names](#name-overrides)

### Conditions

You may specify certain extra keys for any inline table that will determine whether or not to apply that entry. These modifiers may be combined with others and any negative evaluation will immediately cause the entry to be skipped.

#### Allowed values

The `if` key represents the allowed values for that condition. If the value of the condition is not listed, then that entry will not be applied:

```toml config-example
[tool.hatch.envs.test.overrides]
matrix.version.python = { value = "pypy", if = ["3.14"] }
matrix.version.env-vars = [
  { key = "KEY1", value = "VALUE1", if = ["42"] },
  { key = "KEY2", value = "VALUE2", if = ["3.14"] },
]

[[tool.hatch.envs.test.matrix]]
version = ["42", "3.14"]
```

#### Specific platforms

The `platform` key represents the desired platforms. If the current platform is not listed, then that entry will not be applied:

```toml config-example
[tool.hatch.envs.test.overrides]
env.EXPERIMENTAL.python = { value = "pypy", if = ["1"], platform = ["macos"] }
matrix.version.env-vars = [
  { key = "KEY1", value = "VALUE1", if = ["42"], platform = ["linux"] },
  { key = "KEY2", value = "VALUE2", if = ["3.14"] },
]

[[tool.hatch.envs.test.matrix]]
version = ["42", "3.14"]
```

#### Required environment variables

The `env` key represents the required environment variables. If any of the listed environment variables are not set or the defined value does not match, then that entry will not be applied:

```toml config-example
[tool.hatch.envs.test.overrides]
platform.windows.python = { value = "pypy", env = ["EXPERIMENTAL"] }
matrix.version.env-vars = [
  { key = "KEY1", value = "VALUE1", if = ["42"], env = ["FOO", "BAR=BAZ"] },
  { key = "KEY2", value = "VALUE2", if = ["3.14"] },
]

[[tool.hatch.envs.test.matrix]]
version = ["42", "3.14"]
```
</file>

<file path="docs/config/environment/overview.md">
# Environment configuration

-----

All environments are defined as sections within the `tool.hatch.envs` table.

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
```

The [storage location](../hatch.md#environments) for environments is completely configurable.

Unless an environment is explicitly selected on the command line, the `default` environment will be used. The [type](#type) of this environment defaults to `virtual`.

!!! info
    Environments prefixed by `hatch-` are used for special purposes e.g. [testing](../internal/testing.md).

## Inheritance

All environments inherit from the environment defined by its `template` option, which defaults to `default`.

So for the following configuration:

```toml config-example
[tool.hatch.envs.foo]
type = "baz"
skip-install = true

[tool.hatch.envs.bar]
template = "foo"
skip-install = false
```

the environment `bar` will be of type `baz` with `skip-install` set to `false`.

!!! note
    Environments do not inherit [matrices](advanced.md#matrix).

### Self-referential environments

You can disable inheritance by setting `template` to the environment's own name:

```toml config-example
[tool.hatch.envs.foo]
template = "foo"
```

### Detached environments

A common use case is standalone environments that do not require inheritance nor the installation of the project, such as for linting or sometimes building documentation. Enabling the `detached` option will make the environment [self-referential](#self-referential-environments) and will [skip project installation](#skip-install):

```toml config-example
[tool.hatch.envs.lint]
detached = true
```

## Dependencies

You can install [dependencies](../dependency.md) in addition to the ones defined by your [project's metadata](../metadata.md#dependencies). Entries support [context formatting](advanced.md#context-formatting).

```toml config-example
[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-cov",
  "pytest-mock",
]
```

If you define environments with dependencies that only slightly differ from their [inherited environments](#inheritance), you can use the `extra-dependencies` option to avoid redeclaring the `dependencies` option:

```toml config-example
[tool.hatch.envs.default]
dependencies = [
  "foo",
  "bar",
]

[tool.hatch.envs.experimental]
extra-dependencies = [
  "baz",
]
```

!!! tip
    Hatch uses [pip](https://github.com/pypa/pip) to install dependencies so any [configuration](https://pip.pypa.io/en/stable/topics/configuration/) it supports Hatch does as well. For example, if you wanted to only use a private repository you could set the `PIP_INDEX_URL` [environment variable](#environment-variables).

## Installation

### Features (extras) ### {: #features }

If your project defines [optional dependencies](../metadata.md#optional), you can select which groups to install using the `features` option:

```toml config-example
[tool.hatch.envs.nightly]
features = [
  "server",
  "grpc",
]
```

!!! note
    Features/optional dependencies are also known as `extras` in other tools.

### Dev mode

By default, environments will always reflect the current state of your project on disk, for example, by installing it in editable mode in a Python environment. Set `dev-mode` to `false` to disable this behavior and have your project installed only upon creation of a new environment. From then on, you need to manage your project installation manually.

```toml config-example
[tool.hatch.envs.static]
dev-mode = false
```

### Skip install

By default, environments will install your project during creation. To ignore this step, set `skip-install` to `true`:

```toml config-example
[tool.hatch.envs.lint]
skip-install = true
```

## Environment variables

### Defined

You can define environment variables with the `env-vars` option:

```toml config-example
[tool.hatch.envs.docs]
dependencies = [
  "mkdocs"
]
[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
```

Values support [context formatting](advanced.md#context-formatting).

### Filters

By default, environments will have access to all environment variables. You can filter with wildcard patterns using the `env-include`/`env-exclude` options:

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
env-include = [
  "FOO*",
]
env-exclude = [
  "BAR",
]
```

Exclusion patterns take precedence but will never affect [defined](#defined) environment variables.

## Scripts

You can define named scripts that may be [executed](../../environment.md#command-execution) or referenced at the beginning of other scripts. [Context formatting](advanced.md#context-formatting) is supported.

For example, in the following configuration:

```toml config-example
[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-cov",
  "pytest-mock",
]
[tool.hatch.envs.test.scripts]
run-coverage = "pytest --cov-config=pyproject.toml --cov=pkg --cov=tests"
run = "run-coverage --no-cov"
```

the `run` script would be expanded to:

```
pytest --cov-config=pyproject.toml --cov=pkg --cov=tests --no-cov
```

Scripts can also be defined as an array of strings.

```toml config-example
[tool.hatch.envs.style]
detached = true
dependencies = [
  "flake8",
  "black",
  "isort",
]
[tool.hatch.envs.style.scripts]
check = [
  "flake8 .",
  "black --check --diff .",
  "isort --check-only --diff .",
]
fmt = [
  "isort .",
  "black .",
  "check",
]
```

Similar to [make](https://www.gnu.org/software/make/manual/html_node/Errors.html), you can ignore the exit code of commands that start with `-` (a hyphen). For example, the script `error` defined by the following configuration would halt after the second command with `3` as the exit code:

```toml config-example
[tool.hatch.envs.test.scripts]
error = [
  "- exit 1",
  "exit 3",
  "exit 0",
]
```

### Extra scripts

Individual scripts [inherit](#inheritance) from parent environments just like options. To guarantee that individual scripts do not override those defined by parent environments, you can use the `extra-scripts` option instead which is only capable of adding scripts that have not been defined.

## Commands

All commands are able to use any defined [scripts](#scripts). Also like scripts, [context formatting](advanced.md#context-formatting) is supported and the exit code of commands that start with a hyphen will be ignored.

### Pre-install

You can run commands immediately before environments [install](#skip-install) your project.

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
pre-install-commands = [
  "...",
]
```

### Post-install

You can run commands immediately after environments [install](#skip-install) your project.

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
post-install-commands = [
  "...",
]
```

## Python version

The `python` option specifies which version of Python to use, or an absolute path to a Python interpreter:

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
python = "3.10"
```

All [environment types](#type) should respect this option.

## Supported platforms

The `platforms` option indicates the operating systems with which the environment is compatible:

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
platforms = ["linux", "windows", "macos"]
```

The following platforms are supported:

- `linux`
- `windows`
- `macos`

If unspecified, the environment is assumed to be compatible with all platforms.

## Description

The `description` option is purely informational and is displayed in the output of the [`env show`](../../cli/reference.md#hatch-env-show) command:

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
description = """
Lorem ipsum ...
"""
```

## Type

An environment's `type` determines which [environment plugin](../../plugins/environment/reference.md) will be used for management. The only built-in environment type is [`virtual`](../../plugins/environment/virtual.md), which uses virtual Python environments.
</file>

<file path="docs/config/internal/build.md">
#  Build environment configuration

-----

You can fully alter the behavior of the environment used by the [`build`](../../cli/reference.md#hatch-build) command.

## Dependencies

Build environments will always have what is required by the [build system](../build.md#build-system), [targets](../build.md#target-dependencies), and [hooks](../build.md#hook-dependencies).

You can define [dependencies](../environment/overview.md#dependencies) that your builds may require in the environment as well:

```toml config-example
[tool.hatch.envs.hatch-build]
dependencies = [
  "cython",
]
```

!!! warning "caution"
    It's recommended to only use the standard mechanisms to define build dependencies for better compatibility with other tools.

## Environment variables

You can define [environment variables](../environment/overview.md#environment-variables) that will be set during builds:

```toml config-example
[tool.hatch.envs.hatch-build.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
```

## Installer

By default, [UV is enabled](../../how-to/environment/select-installer.md). You may disable that behavior as follows:

```toml config-example
[tool.hatch.envs.hatch-build]
installer = "pip"
```
</file>

<file path="docs/config/internal/static-analysis.md">
# Static analysis configuration

-----

Static analysis performed by the [`fmt`](../../cli/reference.md#hatch-fmt) command is ([by default](#customize-behavior)) backed entirely by [Ruff](https://github.com/astral-sh/ruff).

Hatch provides [default settings](#default-settings) that user configuration can [extend](#extending-config).

## Extending config

When defining your configuration, be sure to use options that are prefixed by `extend-` such as [`extend-select`](https://docs.astral.sh/ruff/settings/#extend-select), for example:

=== ":octicons-file-code-16: pyproject.toml"

    ```toml
    [tool.ruff.format]
    preview = true
    quote-style = "single"

    [tool.ruff.lint]
    preview = true
    extend-select = ["C901"]

    [tool.ruff.lint.extend-per-file-ignores]
    "docs/.hooks/*" = ["INP001", "T201"]

    [tool.ruff.lint.isort]
    known-first-party = ["foo", "bar"]
    ```

=== ":octicons-file-code-16: ruff.toml"

    ```toml
    [format]
    preview = true
    quote-style = "single"

    [lint]
    preview = true
    extend-select = ["C901"]

    [lint.extend-per-file-ignores]
    "docs/.hooks/*" = ["INP001", "T201"]

    [lint.isort]
    known-first-party = ["foo", "bar"]
    ```

!!! note
    When not [persisting config](#persistent-config), there is no need to explicitly [extend](https://docs.astral.sh/ruff/settings/#extend) the defaults as Hatch automatically handles that.

## Persistent config

If you want to store the default configuration in the project, set an explicit path like so:

```toml config-example
[tool.hatch.envs.hatch-static-analysis]
config-path = "ruff_defaults.toml"
```

Then instruct Ruff to consider your configuration as an extension of the default file:

=== ":octicons-file-code-16: pyproject.toml"

    ```toml
    [tool.ruff]
    extend = "ruff_defaults.toml"
    ```

=== ":octicons-file-code-16: ruff.toml"

    ```toml
    extend = "ruff_defaults.toml"
    ```

Anytime you wish to update the defaults (such as when upgrading Hatch), you must run the [`fmt`](../../cli/reference.md#hatch-fmt) command once with the `--sync` flag e.g.:

```
hatch fmt --check --sync
```

!!! tip
    This is the recommended approach since it allows other tools like IDEs to use the default configuration.

### No config

If you don't want Hatch to use any of its default configuration and rely entirely on yours, set the path to anything and then simply don't `extend` in your Ruff config:

```toml config-example
[tool.hatch.envs.hatch-static-analysis]
config-path = "none"
```

## Customize behavior

You can fully alter the behavior of the environment used by the [`fmt`](../../cli/reference.md#hatch-fmt) command. See the [how-to](../../how-to/static-analysis/behavior.md) for a detailed example.

### Dependencies

Pin the particular version of Ruff by explicitly defining the environment [dependencies](../environment/overview.md#dependencies):

```toml config-example
[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff==X.Y.Z"]
```

### Scripts

If you want to change the default commands that are executed, you can override the [scripts](../environment/overview.md#scripts). The following four scripts must be defined:

```toml config-example
[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = "..."
format-fix = "..."
lint-check = "..."
lint-fix = "..."
```

The `format-*` scripts correspond to the `--formatter`/`-f` flag while the `lint-*` scripts correspond to the `--linter`/`-l` flag. The `*-fix` scripts run by default while the `*-check` scripts correspond to the `--check` flag.

!!! note "Reminder"
    If you choose to use different tools for static analysis, be sure to update the required [dependencies](#dependencies).

### Installer

By default, [UV is enabled](../../how-to/environment/select-installer.md). You may disable that behavior as follows:

```toml config-example
[tool.hatch.envs.hatch-static-analysis]
installer = "pip"
```

## Default settings

### Non-rule settings

- [Line length](https://docs.astral.sh/ruff/settings/#line-length) set to 120
- [Docstring formatting](https://docs.astral.sh/ruff/formatter/#docstring-formatting) enabled with [line length](https://docs.astral.sh/ruff/settings/#format_docstring-code-line-length) set to 80
- Only absolute imports [are allowed](https://docs.astral.sh/ruff/settings/#lint_flake8-tidy-imports_ban-relative-imports), [except for tests](#per-file-ignored-rules)
- The normalized [project name](../metadata.md#name) is a [known first party](https://docs.astral.sh/ruff/settings/#lint_isort_known-first-party) import

### Per-file ignored rules

<HATCH_RUFF_PER_FILE_IGNORED_RULES>

### Selected rules

The following rules are based on version <HATCH_RUFF_VERSION> of Ruff. Rules with a ^P^ are only selected when [preview](https://docs.astral.sh/ruff/preview/) mode is enabled.

There are <HATCH_RUFF_STABLE_RULES_COUNT> selected stable rules and <HATCH_RUFF_PREVIEW_RULES_COUNT> selected preview rules.

<HATCH_RUFF_SELECTED_RULES>

#### Unselected

There are <HATCH_RUFF_UNSELECTED_RULES_COUNT> unselected rules.

<HATCH_RUFF_UNSELECTED_RULES>
</file>

<file path="docs/config/internal/testing.md">
# Testing configuration

-----

Check out the [testing overview tutorial](../../tutorials/testing/overview.md) for a more comprehensive walk-through.

## Settings

If an option has a corresponding [`test`](../../cli/reference.md#hatch-test) command flag, the flag will always take precedence.

### Default arguments

You can define default arguments for the [`test`](../../cli/reference.md#hatch-test) command by setting the `default-args` option, which must be an array of strings. The following is the default configuration:

```toml config-example
[tool.hatch.envs.hatch-test]
default-args = ["tests"]
```

### Extra arguments

You can define extra internal arguments for test [scripts](#scripts) by setting the `extra-args` option, which must be an array of strings. For example, if you wanted to increase the verbosity of `pytest`, you could set the following:

```toml config-example
[tool.hatch.envs.hatch-test]
extra-args = ["-vv"]
```

### Randomize test order

You can [randomize](https://github.com/pytest-dev/pytest-randomly) the order of tests by enabling the `randomize` option which corresponds to the `--randomize`/`-r` flag:

```toml config-example
[tool.hatch.envs.hatch-test]
randomize = true
```

### Parallelize test execution

You can [parallelize](https://github.com/pytest-dev/pytest-xdist) test execution by enabling the `parallel` option which corresponds to the `--parallel`/`-p` flag:

```toml config-example
[tool.hatch.envs.hatch-test]
parallel = true
```

### Retry failed tests

You can [retry](https://github.com/pytest-dev/pytest-rerunfailures) failed tests by setting the `retries` option which corresponds to the `--retries` flag:

```toml config-example
[tool.hatch.envs.hatch-test]
retries = 2
```

You can also set the number of seconds to wait between retries by setting the `retry-delay` option which corresponds to the `--retry-delay` flag:

```toml config-example
[tool.hatch.envs.hatch-test]
retry-delay = 1
```

## Customize environment

You can fully alter the behavior of the environment used by the [`test`](../../cli/reference.md#hatch-test) command.

### Dependencies

You can define [extra dependencies](../environment/overview.md#dependencies) that your tests may require:

```toml config-example
[tool.hatch.envs.hatch-test]
extra-dependencies = [
  "pyfakefs",
  "pytest-asyncio",
  "pytest-benchmark",
  "pytest-memray",
  "pytest-playwright",
  "pytest-print",
]
```

The following is the default configuration:

```toml config-example
<HATCH_TEST_ENV_DEPENDENCIES>
```

### Matrix

You can override the default series of [matrices](../environment/advanced.md#matrix):

```toml config-example
<HATCH_TEST_ENV_MATRIX>
```

### Scripts

If you want to change the default commands that are executed, you can override the [scripts](../environment/overview.md#scripts). The following default scripts must be redefined:

```toml config-example
<HATCH_TEST_ENV_SCRIPTS>
```

The `run` script is the default behavior while the `run-cov` script is used instead when measuring code coverage. The `cov-combine` script runs after all tests complete when measuring code coverage, as well as the `cov-report` script when not using the `--cover-quiet` flag.

!!! note
    The `HATCH_TEST_ARGS` environment variable is how the [`test`](../../cli/reference.md#hatch-test) command's flags are translated and internally populated without affecting the user's arguments. This is also the way that [extra arguments](#extra-arguments) are passed.

### Installer

By default, [UV is enabled](../../how-to/environment/select-installer.md). You may disable that behavior as follows:

```toml config-example
[tool.hatch.envs.hatch-test]
installer = "pip"
```
</file>

<file path="docs/config/build.md">
# Build configuration

-----

[Build targets](#build-targets) are defined as sections within `tool.hatch.build.targets`:

```toml config-example
[tool.hatch.build.targets.<TARGET_NAME>]
```

!!! tip
    Although not recommended, you may define global configuration in the `tool.hatch.build` table. Keys may then be overridden by target config.

## Build system

To be compatible with the broader [Python packaging ecosystem](../build.md#packaging-ecosystem), you must define the [build system](https://peps.python.org/pep-0517/#source-trees) as follows:

```toml tab="pyproject.toml"
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
```

The version of `hatchling` defined here will be used to build all targets.

Hatchling is a standards-compliant[^1] build backend and is a dependency of Hatch itself.

## File selection

### VCS

By default, Hatch will respect the first `.gitignore` or `.hgignore` file found in your project's root directory or parent directories. Set `ignore-vcs` to `true` to disable this behavior:

```toml config-example
[tool.hatch.build.targets.sdist]
ignore-vcs = true
```

!!! note
    For `.hgignore` files only glob syntax is supported.

### Patterns

You can set the `include` and `exclude` options to select exactly which files will be shipped in each build, with `exclude` taking precedence. Every entry represents a [Git-style glob pattern](https://git-scm.com/docs/gitignore#_pattern_format).

For example, the following configuration:

```toml config-example
[tool.hatch.build.targets.sdist]
include = [
  "pkg/*.py",
  "/tests",
]
exclude = [
  "*.json",
  "pkg/_compat.py",
]
```

will exclude every file with a `.json` extension, and will include everything under a `tests` directory located at the root and every file with a `.py` extension that is directly under a `pkg` directory located at the root except for `_compat.py`.

### Artifacts

If you want to include files that are [ignored by your VCS](#vcs), such as those that might be created by [build hooks](#build-hooks), you can use the `artifacts` option. This option is semantically equivalent to `include`.

Note that artifacts are not affected by the `exclude` option. Artifacts can
be excluded by using more explicit paths or by using the `!` negation operator.
When using the `!` operator, the negated pattern(s) must come after the more
generic ones.

```toml config-example
[tool.hatch.build.targets.wheel]
artifacts = [
  "*.so",
  "*.dll",
  "!/foo/*.so",
]
```

### Explicit selection

#### Generic

You can use the `only-include` option to prevent directory traversal starting at the project root and only select specific relative paths to directories or files. Using this option ignores any defined [`include` patterns](#patterns).

```toml config-example
[tool.hatch.build.targets.sdist]
only-include = ["pkg", "tests/unit"]
```

#### Packages

The `packages` option is semantically equivalent to `only-include` (which takes precedence) except that the shipped path will be collapsed to only include the final component.

So for example, if you want to ship a package `foo` that is stored in a directory `src` you would do:

```toml config-example
[tool.hatch.build.targets.wheel]
packages = ["src/foo"]
```

### Forced inclusion

The `force-include` option allows you to select specific files or directories from anywhere on the file system that should be included and map them to the desired relative distribution path.

For example, if there was a directory alongside the project root named `artifacts` containing a file named `lib.so` and a file named `lib.h` in your home directory, you could ship both files in a `pkg` directory with the following configuration:

```toml config-example
[tool.hatch.build.targets.wheel.force-include]
"../artifacts" = "pkg"
"~/lib.h" = "pkg/lib.h"
```

!!! note
    - Files must be mapped exactly to their desired paths, not to directories.
    - The contents of directory sources are recursively included.
    - To map directory contents directly to the root use `/` (a forward slash).
    - Sources that do not exist will raise an error.

!!! warning
    Files included using this option will overwrite any file path that was already included by other file selection options.

### Default file selection

If no file selection options are provided, then what gets included is determined by each [build target](#build-targets).

### Excluding files outside packages

If you want to exclude non-[artifact](#artifacts) files that do not reside within a Python package, set `only-packages` to `true`:

```toml config-example
[tool.hatch.build.targets.wheel]
only-packages = true
```

### Rewriting paths

You can rewrite relative paths to directories with the `sources` option. For example, the following configuration:

```toml config-example
[tool.hatch.build.targets.wheel.sources]
"src/foo" = "bar"
```

would distribute the file `src/foo/file.ext` as `bar/file.ext`.

If you want to remove path prefixes entirely, rather than setting each to an empty string, you can define `sources` as an array:

```toml config-example
[tool.hatch.build.targets.wheel]
sources = ["src"]
```

If you want to add a prefix to paths, you can use an empty string. For example, the following configuration:

```toml config-example
[tool.hatch.build.targets.wheel.sources]
"" = "foo"
```

would distribute the file `bar/file.ext` as `foo/bar/file.ext`.

The [packages](#packages) option itself relies on sources. Defining `#!toml packages = ["src/foo"]` for the `wheel` target is equivalent to the following:

```toml config-example
[tool.hatch.build.targets.wheel]
only-include = ["src/foo"]
sources = ["src"]
```

### Performance

All encountered directories are traversed by default. To skip non-[artifact](#artifacts) directories that are excluded, set `skip-excluded-dirs` to `true`:

```toml config-example
[tool.hatch.build]
skip-excluded-dirs = true
```

!!! warning
    This may result in not shipping desired files. For example, if you want to include the file `a/b/c.txt` but your [VCS ignores](#vcs) `a/b`, the file `c.txt` will not be seen because its parent directory will not be entered. In such cases you can use the [`force-include`](#forced-inclusion) option.

## Reproducible builds

By default, [build targets](#build-targets) will build in a reproducible manner provided that they support that behavior. To disable this, set `reproducible` to `false`:

```toml config-example
[tool.hatch.build]
reproducible = false
```

When enabled, the [SOURCE_DATE_EPOCH](https://reproducible-builds.org/specs/source-date-epoch/) environment variable will be used for all build timestamps. If not set, then Hatch will use an [unchanging default value](../plugins/utilities.md#hatchling.builders.utils.get_reproducible_timestamp).

## Output directory

When the output directory is not provided to the [`build`](../cli/reference.md#hatch-build) command, the `dist` directory will be used by default. You can change the default to a different directory using a relative or absolute path like so:

```toml config-example
[tool.hatch.build]
directory = "<PATH>"
```

## Dev mode

By default for [dev mode](environment/overview.md#dev-mode) environment installations or [editable installs](https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs), the `wheel` target will determine which directories should be added to Python's search path based on the [selected files](#file-selection).

If you want to override this detection or perhaps instruct other build targets as well, you can use the `dev-mode-dirs` option:

```toml config-example
[tool.hatch.build]
dev-mode-dirs = ["."]
```

If you don't want to add entire directories to Python's search path, you can enable a more targeted mechanism with the mutually exclusive `dev-mode-exact` option:

```toml config-example
[tool.hatch.build]
dev-mode-exact = true
```

!!! warning
    The `dev-mode-exact` mechanism is [not supported](https://github.com/microsoft/pylance-release/issues/2114) by static analysis tools & IDEs, therefore functionality such as autocompletion is unlikely to work.

## Build targets

A build target can be provided by any [builder plugin](../plugins/builder/reference.md). There are three built-in build targets: [wheel](../plugins/builder/wheel.md), [sdist](../plugins/builder/sdist.md), and [custom](../plugins/builder/custom.md).

### Dependencies ### {: #target-dependencies }

You can specify additional dependencies that will be installed in each build environment, such as for third party builders:

```toml config-example
[tool.hatch.build.targets.your-target-name]
dependencies = [
  "your-builder-plugin"
]
```

You can also declare dependence on the project's [runtime dependencies](metadata.md#required) with the `require-runtime-dependencies` option:

```toml config-example
[tool.hatch.build.targets.your-target-name]
require-runtime-dependencies = true
```

Additionally, you may declare dependence on specific [runtime features](metadata.md#optional) of the project with the `require-runtime-features` option:

```toml config-example
[tool.hatch.build.targets.your-target-name]
require-runtime-features = [
  "feature1",
  "feature2",
]
```

### Versions

If a build target supports multiple build strategies or if there are major changes over time, you can specify exactly which versions you want to build using the `versions` option:

```toml config-example
[tool.hatch.build.targets.<TARGET_NAME>]
versions = [
  "v1",
  "beta-feature",
]
```

See the [wheel](../plugins/builder/wheel.md#versions) target for a real world example.

## Build hooks

A build hook defines code that will be executed at various stages of the build process and can be provided by any [build hook plugin](../plugins/build-hook/reference.md). There is one built-in build hook: [custom](../plugins/build-hook/custom.md).

Build hooks can be applied either globally:

```toml config-example
[tool.hatch.build.hooks.<HOOK_NAME>]
```

or to specific build targets:

```toml config-example
[tool.hatch.build.targets.<TARGET_NAME>.hooks.<HOOK_NAME>]
```

### Dependencies ### {: #hook-dependencies }

You can specify additional dependencies that will be installed in each build environment, such as for third party build hooks:

```toml config-example
[tool.hatch.build.hooks.your-hook-name]
dependencies = [
  "your-build-hook-plugin"
]
```

You can also declare dependence on the project's [runtime dependencies](metadata.md#required) with the `require-runtime-dependencies` option:

```toml config-example
[tool.hatch.build.hooks.your-hook-name]
require-runtime-dependencies = true
```

Additionally, you may declare dependence on specific [runtime features](metadata.md#optional) of the project with the `require-runtime-features` option:

```toml config-example
[tool.hatch.build.hooks.your-hook-name]
require-runtime-features = [
  "feature1",
  "feature2",
]
```

### Order of execution

For each build target, build hooks execute in the order in which they are defined, starting with global hooks.

As an example, for the following configuration:

```toml config-example
[tool.hatch.build.targets.foo.hooks.hook2]

[tool.hatch.build.hooks.hook3]
[tool.hatch.build.hooks.hook1]
```

When target `foo` is built, build hook `hook3` will be executed first, followed by `hook1`, and then finally `hook2`.

### Conditional execution

If you want to disable a build hook by default and control its use by [environment variables](#environment-variables), you can do so by setting the `enable-by-default` option to `false`:

```toml config-example
[tool.hatch.build.hooks.<HOOK_NAME>]
enable-by-default = false
```

## Environment variables

| Variable | Default | Description |
| --- | --- | --- |
| `HATCH_BUILD_CLEAN` | `false` | Whether or not existing artifacts should first be removed |
| `HATCH_BUILD_CLEAN_HOOKS_AFTER` | `false` | Whether or not build hook artifacts should be removed after each build |
| `HATCH_BUILD_HOOKS_ONLY` | `false` | Whether or not to only execute build hooks |
| `HATCH_BUILD_NO_HOOKS` | `false` | Whether or not to disable all build hooks; this takes precedence over other options |
| `HATCH_BUILD_HOOKS_ENABLE` | `false` | Whether or not to enable all build hooks |
| `HATCH_BUILD_HOOK_ENABLE_<HOOK_NAME>` | `false` | Whether or not to enable the build hook named `<HOOK_NAME>` |
| `HATCH_BUILD_LOCATION` | `dist` | The location with which to build the targets; only used by the [`build`](../cli/reference.md#hatch-build) command |

[^1]: Support for [PEP 517][] and [PEP 660][] guarantees interoperability with other build tools.
</file>

<file path="docs/config/context.md">
# Context formatting

-----

You can populate configuration with the values of certain supported fields using the syntax of Python's [format strings](https://docs.python.org/3/library/string.html#formatstrings). Each field interprets the modifier part after the colon differently, if at all.

## Global fields

Any configuration that declares support for context formatting will always support these fields.

### Paths

| Field | Description |
| --- | --- |
| `root` | The root project directory |
| `home` | The user's home directory |

All paths support the following modifiers:

| Modifier | Description |
| --- | --- |
| `uri` | The normalized absolute URI path prefixed by `file:` |
| `real` | The path with all symbolic links resolved |
| `parent` | The parent of the preceding path |

!!! tip
    The `parent` modifier can be chained and may be combined with either the `uri` or `real` modifier, with the latter placed at the end. For example:

    ```toml config-example
    [tool.hatch.envs.test]
    dependencies = [
        "example-project @ {root:parent:parent:uri}/example-project",
    ]
    ```

### System separators

| Field | Description |
| --- | --- |
| `/` | `\` on Windows, `/` otherwise |
| `;` | `;` on Windows, `:` otherwise |

### Environment variables

The `env` field and its modifier allow you to select the value of an environment variable. If the environment variable is not set, you must specify a default value as an additional modifier e.g. `{env:PATH:DEFAULT}`.

## Field nesting

You can insert fields within others. For example, if you wanted a [script](environment/overview.md#scripts) that displays the value of the environment variable `FOO`, with a fallback to the environment variable `BAR`, with its own fallback to the user's home directory, you could do the following:

```toml config-example
[tool.hatch.envs.test.scripts]
display = "echo {env:FOO:{env:BAR:{home}}}"
```
</file>

<file path="docs/config/dependency.md">
# Dependency configuration

-----

[Project dependencies](metadata.md#dependencies) are defined with [PEP 508][] strings using optional [PEP 440 version specifiers][].

## Version specifiers

A version specifier consists of a series of version clauses, separated by commas. For example:

```toml tab="pyproject.toml"
[project]
...
dependencies = [
  "cryptography",
  "click>=7, <9, != 8.0.0",
  "python-dateutil==2.8.*",
  "numpy~=1.21.4",
]
```

The comma is equivalent to a logical `AND` operator: a candidate version must match all given version clauses in order to match the specifier as a whole.

### Operators

| Operators | Function |
| :---: | --- |
| `~=` | [Compatible release](#compatible-release) |
| `==` | [Version matching](#version-matching) |
| `!=` | [Version exclusion](#version-exclusion) |
| `<=`, `>=` | [Inclusive ordered comparison](#ordered-comparison) |
| `<`, `>` | [Exclusive ordered comparison](#ordered-comparison) |
| `===` | [Arbitrary equality](#arbitrary-equality) |

### Version matching

A version matching clause includes the version matching operator `==` and a version identifier.

By default, the version matching operator is based on a strict equality comparison: the specified version must be exactly the same as the requested version.

| Clause | Allowed versions |
| --- | --- |
| `==1` | `1.0.0` |
| `==1.2` | `1.2.0` |

Prefix matching may be requested instead of strict comparison, by appending a trailing `.*` to the version identifier in the version matching clause. This means that additional trailing segments will be ignored when determining whether or not a version identifier matches the clause.

| Clause | Allowed versions |
| --- | --- |
| `==1.*` | `>=1.0.0, <2.0.0` |
| `==1.2.*` | `>=1.2.0, <1.3.0` |

### Compatible release

A compatible release clause consists of the compatible release operator `~=` and a version identifier. It matches any candidate version that is expected to be compatible with the specified version.

For a given release identifier `V.N`, the compatible release clause is approximately equivalent to the following pair of comparison clauses:

```
>= V.N, == V.*
```

This operator cannot be used with a single segment version number such as `~=1`.

| Clause | Allowed versions |
| --- | --- |
| `~=1.2` | `>=1.2.0, <2.0.0` |
| `~=1.2.3` | `>=1.2.3, <1.3.0` |

### Version exclusion

A version exclusion clause includes the version exclusion operator `!=` and a version identifier.

The allowed version identifiers and comparison semantics are the same as those of the [Version matching](#version-matching) operator, except that the sense of any match is inverted.

### Ordered comparison

Inclusive comparisons allow for the version identifier part of clauses whereas exclusive comparisons do not. For example, `>=1.2` allows for version `1.2.0` while `>1.2` does not.

Unlike the inclusive ordered comparisons `<=` and `>=`, the exclusive ordered comparisons `<` and `>` specifically exclude pre-releases, post-releases, and local versions of the specified version.

### Arbitrary equality

Though heavily discouraged, arbitrary equality comparisons allow for simple string matching without any version semantics, for example `===foobar`.

## Environment markers

[Environment markers](https://peps.python.org/pep-0508/#environment-markers) allow for dependencies to only be installed when certain conditions are met.

For example, if you need to install the latest version of `cryptography` that is available for a given Python major version you could define the following:

```
cryptography==3.3.2; python_version < "3"
cryptography>=35.0; python_version > "3"
```

Alternatively, if you only need it on Python 3 when running on Windows you could do:

```
cryptography; python_version ~= "3.0" and platform_system == "Windows"
```

The available environment markers are as follows.

| Marker | Python equivalent | Examples |
| --- | --- | --- |
| `os_name` | `#!python import os`<br>`os.name` | <ul><li>posix</li><li>java</li></ul> |
| `sys_platform` | `#!python import sys`<br>`sys.platform` | <ul><li>linux</li><li>win32</li><li>darwin</li></ul> |
| `platform_machine` | `#!python import platform`<br>`platform.machine()` | <ul><li>x86_64</li></ul> |
| `platform_python_implementation` | `#!python import platform`<br>`platform.python_implementation()` | <ul><li>CPython</li><li>Jython</li></ul> |
| `platform_release` | `#!python import platform`<br>`platform.release()` | <ul><li>1.8.0_51</li><li>3.14.1-x86_64-linode39</li></ul> |
| `platform_system` | `#!python import platform`<br>`platform.system()` | <ul><li>Linux</li><li>Windows</li><li>Darwin</li></ul> |
| `platform_version` | `#!python import platform`<br>`platform.version()` | <ul><li>10.0.19041</li><li>\#1 SMP Fri Apr 2 22:23:49 UTC 2021</li></ul> |
| `python_version` | `#!python import platform`<br>`'.'.join(platform.python_version_tuple()[:2])` | <ul><li>2.7</li><li>3.10</li></ul> |
| `python_full_version` | `#!python import platform`<br>`platform.python_version()` | <ul><li>2.7.18</li><li>3.11.0b1</li></ul> |
| `implementation_name` | `#!python import sys`<br>`sys.implementation.name` | <ul><li>cpython</li></ul> |
| `implementation_version` | See [here](https://peps.python.org/pep-0508/#environment-markers) | <ul><li>2.7.18</li><li>3.11.0b1</li></ul> |

## Features

You can select groups of [optional dependencies](metadata.md#optional) to install using the [extras](https://peps.python.org/pep-0508/#extras) syntax. For example, if a dependency named `foo` defined the following:

```toml tab="pyproject.toml"
[project.optional-dependencies]
crypto = [
  "PyJWT",
  "cryptography",
]
fastjson = [
  "orjson",
]
cli = [
  "prompt-toolkit",
  "colorama; platform_system == 'Windows'",
]
```

You can select the `cli` and `crypto` features like so:

```
foo[cli,crypto]==1.*
```

Note that the features come immediately after the package name, before any [version specifiers](#version-specifiers).

### Self-referential

Feature groups can self-referentially extend others. For example, for a project called `awesome-project`, the `dev` feature group in the following `pyproject.toml` file would select everything in the `crypto` feature group, plus `black`:

```toml tab="pyproject.toml"
[project]
name = "awesome-project"

[project.optional-dependencies]
crypto = [
  "PyJWT",
  "cryptography",
]
dev = [
  "awesome-project[crypto]",
  "black",
]
```

## Direct references

Instead of using normal [version specifiers](#version-specifiers) and fetching packages from an index like PyPI, you can define exact sources using [direct references](https://peps.python.org/pep-0440/#direct-references) with an explicit [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax).

Direct references are usually not meant to be used for dependencies of a published project but rather are used for defining [dependencies for an environment](environment/overview.md#dependencies).

All direct reference types are prefixed by the package name like:

```
<NAME> @ <REFERENCE>
```

### Version control systems

Various version control systems (VCS) are [supported](#supported-vcs) as long as the associated executable is available along your `PATH`.

VCS direct references are defined using one of the following formats:

```
<NAME> @ <SCHEME>://<PATH>
<NAME> @ <SCHEME>://<PATH>@<REVISION>
```

You may also append a `#subdirectory=<PATH>` component for specifying the relative path to the Python package when it is not located at the root e.g. `#subdirectory=lib/foo`.

For more information, refer to [this](https://pip.pypa.io/en/stable/topics/vcs-support/).

#### Supported VCS

=== "Git"
    | Executable | Schemes | Revisions | Example |
    | --- | --- | --- | --- |
    | `git` | <ul><li><code>git+file</code></li><li><code>git+https</code></li><li><code>git+ssh</code></li><li><code>git+http</code> :warning:</li><li><code>git+git</code> :warning:</li><li><code>git</code> :warning:</li></ul> | <ul><li>Commit hash</li><li>Tag name</li><li>Branch name</li></ul> | `proj @ git+https://github.com/org/proj.git@v1` |

=== "Mercurial"
    | Executable | Schemes | Revisions | Example |
    | --- | --- | --- | --- |
    | `hg` | <ul><li><code>hg+file</code></li><li><code>hg+https</code></li><li><code>hg+ssh</code></li><li><code>hg+http</code> :warning:</li><li><code>hg+static-http</code> :warning:</li></ul> | <ul><li>Revision hash</li><li>Revision number</li><li>Tag name</li><li>Branch name</li></ul> | `proj @ hg+file:///path/to/proj@v1` |

=== "Subversion"
    | Executable | Schemes | Revisions | Example |
    | --- | --- | --- | --- |
    | `svn` | <ul><li><code>svn+https</code></li><li><code>svn+ssh</code></li><li><code>svn+http</code> :warning:</li><li><code>svn+svn</code> :warning:</li><li><code>svn</code> :warning:</li></ul> | <ul><li>Revision number</li></ul> | `proj @ svn+file:///path/to/proj` |

=== "Bazaar"
    | Executable | Schemes | Revisions | Example |
    | --- | --- | --- | --- |
    | `bzr` | <ul><li><code>bzr+https</code></li><li><code>bzr+ssh</code></li><li><code>bzr+sftp</code></li><li><code>bzr+lp</code></li><li><code>bzr+http</code> :warning:</li><li><code>bzr+ftp</code> :warning:</li></ul> | <ul><li>Revision number</li><li>Tag name</li></ul> | `proj @ bzr+lp:proj@v1` |

### Local

You can install local packages with the `file` scheme in the following format:

```
<NAME> @ file://<HOST>/<PATH>
```

The `<HOST>` is only used on Windows systems, where it can refer to a network share. If omitted it is assumed to be `localhost` and the third slash must still be present.

The `<PATH>` can refer to a source archive, a wheel, or a directory containing a Python package.

| Type | Unix | Windows |
| --- | --- | --- |
| Source archive | `proj @ file:///path/to/pkg.tar.gz` | `proj @ file:///c:/path/to/pkg.tar.gz` |
| Wheel | `proj @ file:///path/to/pkg.whl` | `proj @ file:///c:/path/to/pkg.whl` |
| Directory | `proj @ file:///path/to/pkg` | `proj @ file:///c:/path/to/pkg` |

!!! tip
    You may also specify paths relative to your project's root directory on all platforms by using [context formatting](context.md#paths):

    ```
    <NAME> @ {root:uri}/pkg_inside_project
    <NAME> @ {root:parent:uri}/pkg_alongside_project
    ```

### Remote

You can install source archives and wheels by simply referring to a URL:

```
black @ https://github.com/psf/black/archive/refs/tags/21.10b0.zip
pytorch @ https://download.pytorch.org/whl/cu102/torch-1.10.0%2Bcu102-cp39-cp39-linux_x86_64.whl
```

An expected hash value may be specified by appending a `#<HASH_ALGORITHM>=<EXPECTED_HASH>` component:

```
requests @ https://github.com/psf/requests/archive/refs/tags/v2.26.0.zip#sha256=eb729a757f01c10546ebd179ae2aec852dd0d7f8ada2328ccf4558909d859985
```

If the hash differs from the expected hash, the installation will fail.

It is recommended that only hashes which are unconditionally provided by the latest version of the standard library's [hashlib module](https://docs.python.org/dev/library/hashlib.html) be used for hashes. As of Python 3.10, that list consists of:

- `md5`
- `sha1`
- `sha224`
- `sha256`
- `sha384`
- `sha512`
- `blake2b`
- `blake2s`

### Complex syntax

The following is an example that uses [features](#features) and [environment markers](#environment-markers):

```
pkg[feature1,feature2] @ <REFERENCE> ; python_version < "3.7"
```

Note that the space before the semicolon is required.
</file>

<file path="docs/config/hatch.md">
# Hatch configuration

-----

Configuration for Hatch itself is stored in a `config.toml` file located by default in one of the following platform-specific directories.

| Platform | Path |
| --- | --- |
| macOS | `~/Library/Application Support/hatch` |
| Windows | `%USERPROFILE%\AppData\Local\hatch` |
| Unix | `$XDG_CONFIG_HOME/hatch` (the [XDG_CONFIG_HOME](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables) environment variable default is `~/.config`) |

You can select a custom path to the file using the `--config` [root option](../cli/reference.md#hatch) or by setting the `HATCH_CONFIG` environment variable.

The file can be managed by the [`config`](../cli/reference.md#hatch-config) command group.

## Mode

The `mode` key controls how Hatch selects the project to work on.

### Local

```toml tab="config.toml"
mode = "local"
```

By default, Hatch will look for a `pyproject.toml` file in the current working directory
and any parent directories. The directory storing the first found file will be considered the project root.

### Project

```toml tab="config.toml"
mode = "project"
project = "proj1"

[projects]
proj1 = "/path/to/project1"
proj2 = {"location": "/path/to/project2"}

[dirs]
project = ["/path/to/monorepo1", "/path/to/monorepo2"]
```

In this mode, Hatch will only work on the selected `project`. The project is located using multiple heuristics:

1. If the project is defined in the `projects` table then it must be a string, or an inline table with a `location` key, that is the full path to the project.
2. If the project matches a subdirectory in any of the directories listed in `dirs.project`, then that will be used as the project root.

An error will occur if the project cannot be found.

You can use the [`config set`](../cli/reference.md#hatch-config-set) command to change the project you are working on:

```console
$ hatch config set project proj2
New setting:
project = "proj2"
```

The project can be selected on a per-command basis with the `-p`/`--project` (environment variable `HATCH_PROJECT`) [root option](../cli/reference.md#hatch).

### Aware

```toml tab="config.toml"
mode = "aware"
```

This is essentially the `local` mode with a fallback to the `project` mode.

## Shell

You can control the shell used to [enter environments](../environment.md#entering-environments) with the `shell` key.

If defined as a string, it must be the name of one of the [supported shells](#supported) and be available along your `PATH`.

```toml tab="config.toml"
shell = "fish"
```

If the executable name of your shell differs from the supported name, you can define the `shell` as a table with `name` and `path` keys.

```toml tab="config.toml"
[shell]
name = "bash"
path = "/bin/ash"
```

You can change the default arguments used to spawn most shells with the `args` key. The default for such supported shells is usually `["-i"]`.

```toml tab="config.toml"
[shell]
name = "bash"
args = ["--login"]
```

### Supported

| Shell | Name | Arguments | macOS | Windows | Unix |
| --- | --- | --- | --- | --- | --- |
| [Almquist shell](https://en.wikipedia.org/wiki/Almquist_shell) | `ash` | `["-i"]` | :white_check_mark: | | :white_check_mark: |
| [Bash](https://www.gnu.org/software/bash/) | `bash` | `["-i"]` | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| [Command Prompt](https://en.wikipedia.org/wiki/Cmd.exe) | `cmd` | | | :white_check_mark: | |
| [C shell](https://en.wikipedia.org/wiki/C_shell) | `csh` | `["-i"]` | :white_check_mark: | | :white_check_mark: |
| [fish](https://github.com/fish-shell/fish-shell) | `fish` | `["-i"]` | :white_check_mark: | | :white_check_mark: |
| [Nushell](https://github.com/nushell/nushell) | `nu` | `[]` | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| [PowerShell](https://github.com/PowerShell/PowerShell) | `pwsh`, `powershell` | | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| [tcsh](https://en.wikipedia.org/wiki/Tcsh) | `tcsh` | `["-i"]` | :white_check_mark: | | :white_check_mark: |
| [xonsh](https://github.com/xonsh/xonsh) | `xonsh` | `["-i"]` | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| [Z shell](https://en.wikipedia.org/wiki/Z_shell) | `zsh` | `["-i"]` | :white_check_mark: | | :white_check_mark: |

### Default

Hatch will attempt to use the current shell based on parent processes. If the shell cannot be determined, then on Windows systems Hatch will use the `SHELL` environment variable, if present, followed by the `COMSPEC` environment variable, defaulting to `cmd`. On all other platforms only the `SHELL` environment variable will be used, defaulting to `bash`.

## Directories

### Data

```toml tab="config.toml"
[dirs]
data = "..."
```

This is the directory that is used to persist data. By default it is set to one of the following platform-specific directories.

| Platform | Path |
| --- | --- |
| macOS | `~/Library/Application Support/hatch` |
| Windows | `%USERPROFILE%\AppData\Local\hatch` |
| Unix | `$XDG_DATA_HOME/hatch` (the [XDG_DATA_HOME](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables) environment variable default is `~/.local/share`) |

You can select a custom path to the directory using the `--data-dir` [root option](../cli/reference.md#hatch) or by setting the `HATCH_DATA_DIR` environment variable.

### Cache

```toml tab="config.toml"
[dirs]
cache = "..."
```

This is the directory that is used to cache data. By default it is set to one of the following platform-specific directories.

| Platform | Path |
| --- | --- |
| macOS | `~/Library/Caches/hatch` |
| Windows | `%USERPROFILE%\AppData\Local\hatch\Cache` |
| Unix | `$XDG_CACHE_HOME/hatch` (the [XDG_CACHE_HOME](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables) environment variable default is `~/.cache`) |

You can select a custom path to the directory using the `--cache-dir` [root option](../cli/reference.md#hatch) or by setting the `HATCH_CACHE_DIR` environment variable.

### Environments

```toml tab="config.toml"
[dirs.env]
<ENV_TYPE> = "..."
```

This determines where to store environments, with every key being the [type of environment](environment/overview.md#type) and the value being the desired storage location.

For example, if you wanted to store [virtual environments](../plugins/environment/virtual.md) in a `.virtualenvs` directory within your home directory, you could specify the following:

```toml tab="config.toml"
[dirs.env]
virtual = "~/.virtualenvs"
```

Any environment variables are also expanded.

If the path is not absolute, then it will be relative to the project root. So if you wanted to use a directory named `.hatch` in each project directory, you could do:

```toml tab="config.toml"
[dirs.env]
virtual = ".hatch"
```

Any type of environment that is not explicitly defined will default to `<DATA_DIR>/env/<ENV_TYPE>`.

### Python installations

```toml tab="config.toml"
[dirs]
python = "..."
```

This determines where to install specific versions of Python.

The following values have special meanings:

| Value | Path |
| --- | --- |
| `isolated` (default) | `<DATA_DIR>/pythons` |

## Terminal

You can configure how all output is displayed using the `terminal.styles` table. These settings are also applied to all plugins.

```toml tab="config.toml"
[terminal.styles]
error = "..."
...
```

Cross-platform terminal capabilities are provided by [Rich](https://github.com/Textualize/rich).

### Output levels

The levels of output are as follows. Note that the [verbosity](../cli/about.md) indicates the minimum level at which the output is displayed.

| Level | Default | Verbosity | Description |
| --- | --- | ---: | --- |
| `debug` | `bold` | 1 - 3 | Messages that are not useful for most user experiences |
| `error` | `bold red` | -2 | Messages indicating some unrecoverable error |
| `info` | `bold` | 0 | Messages conveying basic information |
| `success` | `bold cyan` | 0 | Messages indicating some positive outcome |
| `waiting` | `bold magenta` | 0 | Messages shown before potentially time consuming operations |
| `warning` | `bold yellow` | -1 | Messages conveying important information |

See the [documentation](https://rich.readthedocs.io/en/latest/style.html) and [color reference](https://rich.readthedocs.io/en/latest/appendix/colors.html) for guidance on valid values.

### Spinner

You can select the [sequence](https://github.com/Textualize/rich/blob/master/rich/_spinners.py) used for waiting animations with the `spinner` option.

```toml tab="config.toml"
[terminal.styles]
spinner = "..."
```
</file>

<file path="docs/config/metadata.md">
# Configuring project metadata

-----

Project metadata is stored in a `pyproject.toml` file located at the root of a project's tree
and is based entirely on [the standard][project metadata standard].

## Name (*required*) ## {: #name }

The name of the project.

```toml tab="pyproject.toml"
[project]
name = "your-app"
```

## Version (*required*) ## {: #version }

=== ":octicons-file-code-16: pyproject.toml"

    === "Dynamic"
        See the dedicated [versioning](../version.md) section.

        ```toml
        [project]
        ...
        dynamic = ["version"]

        [tool.hatch.version]
        path = "..."
        ```

    === "Static"
        ```toml
        [project]
        ...
        version = "0.0.1"
        ```

## Description

A brief summary of the project.

```toml tab="pyproject.toml"
[project]
...
description = '...'
```

## Readme

The full description of the project.

=== ":octicons-file-code-16: pyproject.toml"

    === "Simple"
        The file extension must be `.md`, `.rst`, or `.txt`.

        ```toml
        [project]
        ...
        readme = "README.md"
        ```

    === "Complex"
        The `content-type` field must be set to `text/markdown`, `text/x-rst`, or `text/plain`.

        === "File"
            A `charset` field may also be set to instruct which encoding to
            use for reading the file, defaulting to `utf-8`.

            ```toml
            [project]
            ...
            readme = {"file" = "README.md", "content-type" = "text/markdown"}
            ```

        === "Text"
            The `content-type` field must be set to `text/markdown` or `text/x-rst`.

            ```toml
            [project]
            ...
            readme = {"text" = "...", "content-type" = "text/markdown"}
            ```

!!! note
    If this is defined as a file, then it will always be included in [source distributions](../plugins/builder/sdist.md) for consistent builds.

## Python support

The Python version requirements of the project.

```toml tab="pyproject.toml"
[project]
...
requires-python = ">=3.8"
```

## License

For more information, see [PEP 639][].

=== ":octicons-file-code-16: pyproject.toml"

    === "SPDX expression"

        ```toml
        [project]
        ...
        license = "Apache-2.0 OR MIT"
        ```

    === "Files"

        ```toml
        [project]
        ...
        license-files = ["LICENSES/*"]
        ```

## Ownership

The people or organizations considered to be the `authors` or `maintainers` of the project.
The exact meaning is open to interpretation; it may list the original or primary authors,
current maintainers, or owners of the package. If the values are the same, prefer only the
use of the `authors` field.

```toml tab="pyproject.toml"
[project]
...
authors = [
  { name = "...", email = "..." },
]
maintainers = [
  { name = "...", email = "..." },
]
```

## Keywords

The keywords used to assist in the discovery of the project.

```toml tab="pyproject.toml"
[project]
...
keywords = [
  "...",
]
```

## Classifiers

The [trove classifiers](https://pypi.org/classifiers/) that apply to the project.

```toml tab="pyproject.toml"
[project]
...
classifiers = [
  "...",
]
```

## URLs

A table of URLs where the key is the URL label and the value is the URL itself.

```toml tab="pyproject.toml"
[project.urls]
Documentation = "..."
"Source code" = "..."
```

## Dependencies

See the [dependency specification](dependency.md) page for more information.

Entries support [context formatting](context.md) and [disallow direct references](#allowing-direct-references) by default.

### Required

```toml tab="pyproject.toml"
[project]
...
dependencies = [
  "...",
]
```

### Optional

```toml tab="pyproject.toml"
[project.optional-dependencies]
option1 = [
  "...",
]
option2 = [
  "...",
]
```

## Entry points

[Entry points](https://packaging.python.org/specifications/entry-points/) are a mechanism for
the project to advertise components it provides to be discovered and used by other code.

### CLI

After installing projects that define CLI scripts, each key will be available along your `PATH` as a command that will call its associated object.

```toml tab="pyproject.toml"
[project.scripts]
cli-name = "pkg.subpkg:func"
```

Using the above example, running `cli-name` would essentially execute the following Python script:

```python
import sys

from pkg.subpkg import func

sys.exit(func())
```

### GUI

GUI scripts are exactly the same as CLI scripts except on Windows, where they are handled specially so that they can be started without a console.

```toml tab="pyproject.toml"
[project.gui-scripts]
gui-name = "pkg.subpkg:func"
```

### Plugins

```toml tab="pyproject.toml"
[project.entry-points.plugin-namespace]
plugin-name1 = "pkg.subpkg1"
plugin-name2 = "pkg.subpkg2:func"
```

## Dynamic

If any metadata fields are set dynamically, like the [`version`](#version) may be, then they must be listed here.

```toml tab="pyproject.toml"
[project]
...
dynamic = [
  "...",
]
```

## Metadata options

### Allowing direct references

By default, [dependencies](#dependencies) are not allowed to define [direct references](https://peps.python.org/pep-0440/#direct-references). To disable this check, set `allow-direct-references` to `true`:

```toml config-example
[tool.hatch.metadata]
allow-direct-references = true
```

### Allowing ambiguous features

By default, names of [optional dependencies](#optional) are normalized to prevent ambiguity. To disable this normalization, set `allow-ambiguous-features` to `true`:

```toml config-example
[tool.hatch.metadata]
allow-ambiguous-features = true
```

!!! danger "Deprecated"
    This option temporarily exists to provide better interoperability with tools that do not yet support [PEP 685](https://peps.python.org/pep-0685/) and will be removed in the first minor release after Jan 1, 2024.
</file>

<file path="docs/config/project-templates.md">
# Project templates

-----

You can control how new projects are created by the [new](../cli/reference.md#hatch-new) command using Hatch's [config file](hatch.md).

## Author

```toml tab="config.toml"
[template]
name = "..."
email = "..."
```

## Licenses

```toml tab="config.toml"
[template.licenses]
headers = true
default = [
  "MIT",
]
```

The list of licenses should be composed of [SPDX identifiers](https://spdx.org/licenses/). If multiple licenses are specified, then they will be placed in a [LICENSES](https://reuse.software/faq/#multi-licensing) directory.

## Options

### Tests

This adds a `tests` directory with environments for testing and linting.

```toml tab="config.toml"
[template.plugins.default]
tests = true
```

### CI

This adds a [GitHub Actions workflow](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#workflows) that runs tests on all platforms using modern versions of Python.

```toml tab="config.toml"
[template.plugins.default]
ci = false
```

### `src` layout

See [this blog post](https://blog.ionelmc.ro/2014/05/25/python-packaging/).

```toml tab="config.toml"
[template.plugins.default]
src-layout = true
```

## Feature flags

### Command line interface

The `--cli` flag adds a CLI backed by [Click](https://github.com/pallets/click) that can also be invoked with `python -m <PKG_NAME>`.
</file>

<file path="docs/history/hatch.md">
# Hatch history

-----

All notable changes to Hatch will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## Unreleased

***Changed:***

- Environment type plugins are now no longer expected to support a pseudo-build environment as any environment now may be used for building. The following methods have been removed: `build_environment`, `build_environment_exists`, `run_builder`, `construct_build_command`

***Added:***

- The `version` and `project metadata` commands now support projects that do not use Hatchling as the build backend
- The `version` command accepts a `--force` option, allowing for downgrades when an explicit version number is given.
- Build environments can now be configured, the default build environment is `hatch-build`
- The environment interface now has the following methods and properties in order to better support builds on remote machines: `project_root`, `sep`, `pathsep`, `fs_context`
- Bump the minimum supported version of `packaging` to 24.2

## [1.13.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.13.0) - 2024-10-13 ## {: #hatch-v1.13.0 }

***Added:***

- Support managing Python 3.13 distributions

## [1.12.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.12.0) - 2024-05-28 ## {: #hatch-v1.12.0 }

***Changed:***

- The `run`/`env run` and `test` commands now treat inclusion variable options as an intersection rather than a union to allow for specific targeting of environments

***Added:***

- Add ability to control the source of Python distributions
- Upgrade Ruff to 0.4.5
- Upgrade PyApp to 0.22.0 for binary builds

***Fixed:***

- The `fmt` command no longer hides the commands that are being executed
- Add default timeout for network requests, useful when installing Python distributions
- Fix syntax highlighting contrast for the `config show` command

## [1.11.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.11.1) - 2024-05-23 ## {: #hatch-v1.11.1 }

***Added:***

- Add official GitHub Action for installing Hatch

***Fixed:***

- Fix `terminal.styles.spinner` configuration
- Fix entry points in the pre-built distributions that binaries use

## [1.11.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.11.0) - 2024-05-14 ## {: #hatch-v1.11.0 }

***Added:***

- Upgrade PyApp to 0.21.1 for binary builds

***Fixed:***

- On Linux, install the highest compatible Python distribution variant based on CPU architecture rather than assuming recent hardware

## [1.10.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.10.0) - 2024-05-02 ## {: #hatch-v1.10.0 }

***Changed:***

- The `run`/`env run`, `fmt` and `shell` commands now only change the current working directory to the project root if not already inside the project
- The `shell` command now accepts a single argument to specify the environment to enter which overrides the standard choice mechanisms. The arguments determining shell options have been converted to flags.

***Added:***

- Add `test` command
- The `run` command can now execute scripts that define inline metadata for dependencies and Python version constraints
- The `virtual` environment type now supports the ability to use UV in place of pip & virtualenv
- Add `self report` command for submitting pre-populated bug reports to GitHub
- The reserved environment used for static analysis is now completely configurable
- Add the following methods to the `environment` interface for complete control over output during life cycle management: `app_status_creation`, `app_status_pre_installation`, `app_status_post_installation`, `app_status_project_installation`, `app_status_dependency_state_check`, `app_status_dependency_installation_check`, `app_status_dependency_synchronization`
- Add binaries for 32-bit versions of Windows
- Read configuration from any `~/.pypirc` file for the `index` publisher
- Use the Git user as the default username for new project URL metadata
- Add `HATCH_DEBUG` environment variable that when enabled will show local variables in the case of unhandled tracebacks
- The `env show` command now outputs data about all internal environments when using the `--json` flag
- Upgrade default CPython distributions to 20240415
- Upgrade default PyPy distributions to 7.3.15
- Upgrade Ruff to 0.4.2
- Upgrade PyApp to 0.19.0 for binary builds
- Bump the minimum supported version of Hatchling to 1.24.2
- Bump the minimum supported version of virtualenv to 20.26.1

***Fixed:***

- Maintain consistent data paths for case insensitive file systems
- When projects derive dependencies from metadata hooks, there is now by default a status indicator for when the hooks are executed for better responsiveness
- Properly support projects with a `pyproject.toml` file but no `project` table e.g. applications
- Fix the `fmt` command when automatically installing plugin dependencies
- Fix dependency inheritance for the template of the `types` environment for new projects
- Fix warnings related to tar file extraction on Python 3.12+ when unpacking Python distributions for installation
- De-select Ruff rule `E501` for the `fmt` command by default since it conflicts with the formatter
- Fix colored output from build targets on the first run (build environment creation status indicator issue)
- Set the `packaging` dependency version as `>=23.2` to avoid its URL validation which can conflict with context formatting
- Fix the exit code when there happens to be an unhandled exception
- No longer capture both stdout and stderr streams when parsing metadata payloads from build environments
- Fix the `README.md` file template for new projects to avoid Markdown linting issues

## [1.9.7](https://github.com/pypa/hatch/releases/tag/hatch-v1.9.7) - 2024-04-24 ## {: #hatch-v1.9.7 }

***Fixed:***

- Limit the maximum version of virtualenv due to a backward incompatible change
- Upgrade PyApp to 0.12.0 for binary builds

## [1.9.4](https://github.com/pypa/hatch/releases/tag/hatch-v1.9.4) - 2024-03-12 ## {: #hatch-v1.9.4 }

***Fixed:***

- Limit the maximum version of Hatchling in anticipation of backward incompatible changes

## [1.9.3](https://github.com/pypa/hatch/releases/tag/hatch-v1.9.3) - 2024-01-25 ## {: #hatch-v1.9.3 }

***Fixed:***

- Fix loading of local plugins to account for newly released versions of a dependency

## [1.9.2](https://github.com/pypa/hatch/releases/tag/hatch-v1.9.2) - 2024-01-21 ## {: #hatch-v1.9.2 }

***Fixed:***

- Fix the default token variable name for publishing to PyPI

## [1.9.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.9.1) - 2023-12-25 ## {: #hatch-v1.9.1 }

***Fixed:***

- Ensure that the `dependency_hash` method of the `environment` interface is called after `sync_dependencies` for cases where the hash is only known at that point, such as for dependency lockers
- Only acknowledge the `HATCH_PYTHON_VARIANT_*` environment variables for Python resolution for supported platforms and architectures
- Fix Python resolution when there are metadata hooks with unsatisfied dependencies

## [1.9.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.9.0) - 2023-12-19 ## {: #hatch-v1.9.0 }

***Changed:***

- Environments prefixed by `hatch-` are now considered internal and used for special purposes such as configuration for static analysis

***Added:***

- Enable docstring formatting by default for static analysis
- Allow for overriding config of internal environments
- Concretely state the expected API contract for the environment interface methods `find` and `check_compatibility`
- Upgrade Ruff to 0.1.8
- Bump the minimum supported version of Hatchling to 1.21.0

***Fixed:***

- Ignore a project's Python requirement for environments where the project is not installed
- When not persisting config for static analysis, properly manage internal settings when Ruff's top level table already exists
- Ignore compatibility checks when environments have already been created, significantly improving performance of environment usage
- Properly allow overriding of the `path` option for the `virtual` environment type
- Fix nushell activation on non-Windows systems

## [1.8.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.8.1) - 2023-12-14 ## {: #hatch-v1.8.1 }

***Fixed:***

- Fix regression in calling subprocesses with updated PATH
- Fix automatic installation of environment plugins when running as a standalone binary
- Change default location of Python installations

## [1.8.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.8.0) - 2023-12-11 ## {: #hatch-v1.8.0 }

***Changed:***

- Drop support for Python 3.7
- The `get_build_process` method of the `environment` interface has been removed; plugins should use the new `run_builder` method instead
- Remove `pyperclip` dependency and the `--copy` flag of the `config find` command
- When running the `build` command all output from builders is now displayed as-is in real time without the stripping of ANSI codes
- Version information (for Hatch itself) is now derived from Git

***Added:***

- Support Python 3.12
- Add installers and standalone binaries
- Add the ability to manage Python installations
- Add `fmt` command
- The `virtual` environment type can now automatically download requested versions of Python that are not installed
- Add `dependency_hash` method to the `environment` interface
- The state of installed dependencies for environments is saved as metadata so if dependency definitions have not changed then no checking is performed, which can be computationally expensive
- The `build` command now supports backends other than Hatchling
- Allow the use of `features` for environments when `skip-install` is enabled
- The default is now `__token__` when prompting for a username for the `publish` command
- Add a new `run_builder` method to the `environment` interface
- Bump the minimum supported version of Hatchling to 1.19.0
- Bump the minimum supported version of `click` to 8.0.6

***Fixed:***

- Fix nushell activation
- Better handling of flat storage directory hierarchies for the `virtual` environment type
- Display useful information when running the `version` command outside of a project rather than erroring
- Fix the `project metadata` command by only capturing stdout from the backend
- Properly support Google Artifact Registry
- Fix parsing dependencies for environments when warnings are emitted

## [1.7.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.7.0) - 2023-04-03 ## {: #hatch-v1.7.0 }

***Changed:***

- The `src-layout` project template option is now enabled by default
- Non-critical output now goes to stderr

***Added:***

- Add `tool.hatch.env.requires` configuration to automatically install dependencies for environment and environment collector plugins
- Add `custom` environment collector
- Improve syncing of dependencies provided through Git direct references
- Add `isolated_data_directory` attribute to the environment interface
- Increase the timeout for and add retries to the `index` publisher
- Expand home and environment variables in configured cache and data directories
- Improve readability of exceptions
- Update project templates
- Bump the minimum supported version of Hatchling to 1.14.0

***Fixed:***

- Fix displaying the version with the `version` command when the version is static and build dependencies are unmet
- Fix build environments for the `virtual` environment type when storing within a relative path
- Work around System Integrity Protection on macOS when running commands
- Allow setuptools metadata migration for projects without `setup.py` if `setup.cfg` is present
- Handle additional edge cases for setuptools metadata migration
- Support boolean values for the `config set` command

## [1.6.3](https://github.com/pypa/hatch/releases/tag/hatch-v1.6.3) - 2022-10-24 ## {: #hatch-v1.6.3 }

***Fixed:***

- Fix `version` command when the version is dynamic and build dependencies are unmet

## [1.6.2](https://github.com/pypa/hatch/releases/tag/hatch-v1.6.2) - 2022-10-20 ## {: #hatch-v1.6.2 }

***Fixed:***

- Fix getting dynamic metadata from hooks for environments when dependencies are not dynamic

## [1.6.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.6.1) - 2022-10-16 ## {: #hatch-v1.6.1 }

***Fixed:***

- Computing the path to the user's home directory now gracefully falls back to `~` when it cannot be determined

## [1.6.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.6.0) - 2022-10-08 ## {: #hatch-v1.6.0 }

***Changed:***

- The `run_shell_command` environment interface method now accepts arbitrary `subprocess.Popen` keyword arguments. This is not strictly breaking, but will be utilized in upcoming features.
- The internal directory structure for storing `virtual` environments is now more nested. This is not breaking, but any local environments will be created anew.

***Added:***

- Add `project` command group to view details about the project like PEP 621 metadata
- Better support for auto-detection of environments by tools like Visual Studio Code now that the storage directory of `virtual` environments will be flat if Hatch's configured `virtual` environment directory resides somewhere within the project root or if it is set to a `.virtualenvs` directory within the user's home directory
- Build environments for the `virtual` environment type are now cached for improved performance
- Add `build_environment_exists` method to the environment interface for implementations that cache the build environment
- Add `path` option to the `virtual` environment type
- Add `--initialize-auth` flag to the `index` publisher to allow for the saving of authentication information before publishing
- Support Bash on Windows for the `shell` command
- The `setuptools` migration script no longer modifies the formatting of existing `pyproject.toml` configuration
- Bump the minimum supported version of Hatchling to 1.11.0

***Fixed:***

- Environments now respect dynamically defined project dependencies
- The `dep hash` and all `dep show` commands now respect dynamically defined project dependencies
- The `env show`, `dep hash`, and all `dep show` commands now honor context formatting
- Fix matrix variable inclusion filtering of the `run` and `env run` commands when there are multiple possible variables
- Build environment compatibility is now checked before use
- Decreasing verbosity now has no affect on output that should always be displayed
- Handle more edge cases in the `setuptools` migration script
- Environments now respect user defined environment variables for context formatting
- Update the scripts in the generated test environment template for new projects to reflect the documentation
- Allow `extra-dependencies` in environment overrides
- Depend on `packaging` explicitly rather than relying on it being a transitive dependency of Hatchling

## [1.5.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.5.0) - 2022-08-28 ## {: #hatch-v1.5.0 }

***Added:***

- The `index` publisher now recognizes repository-specific options
- Add the `--ignore-compat` flag to the `env run` command
- Setting the `HATCH_PYTHON` environment variable to `self` will now force the use of the Python executable Hatch is running on for `virtual` environment creation

***Fixed:***

- Fix the `--force-continue` flag of the `env run` command
- Handle more edge cases in the `setuptools` migration script

## [1.4.2](https://github.com/pypa/hatch/releases/tag/hatch-v1.4.2) - 2022-08-16 ## {: #hatch-v1.4.2 }

***Fixed:***

- Fix check for updating static versions with the `version` command when metadata hooks are in use

## [1.4.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.4.1) - 2022-08-13 ## {: #hatch-v1.4.1 }

***Fixed:***

- Fix non-detached inheritance disabling for environments

## [1.4.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.4.0) - 2022-08-06 ## {: #hatch-v1.4.0 }

***Added:***

- The default Python for `virtual` environments now checks PATH before using the one Hatch is running on
- Values for environment `env-vars` now support context formatting
- Add `name` override for environments to allow for regular expression matching
- The `index` publisher now better supports non-PyPI indices
- Add certificate options to the `index` publisher
- Display waiting text when checking dependencies and removing environments
- Display help text the first time the `shell` command is executed
- Update project templates with Python 3.11 and the latest versions of various GitHub Actions
- Add support for Almquist (`ash`) shells
- Add `hyperlink` as a dependency for better handling of package index URLs
- Bump the minimum supported version of `virtualenv` to 20.16.2
- Bump the minimum supported version of `tomlkit` to 0.11.1

***Fixed:***

- Acknowledge `extra-dependencies` for the `env show` command
- Fix locating executables within virtual environments on Debian
- Fix managing the terminal size inside the `shell` command
- Fix default code coverage file omission for the `src-layout` project template option

## [1.3.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.3.1) - 2022-07-11 ## {: #hatch-v1.3.1 }

***Fixed:***

- Support `-h`/`--help` flag for the `run` command

## [1.3.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.3.0) - 2022-07-10 ## {: #hatch-v1.3.0 }

***Changed:***

- Rename the default publishing plugin from `pypi` to the more generic `index`

***Added:***

- Support the absence of `pyproject.toml` files, as is the case for apps and non-Python projects
- Hide scripts that start with an underscore for the `env show` command by default
- Ignoring the exit codes of commands by prefixing with hyphens now works with entire named scripts
- Add a way to require confirmation for publishing
- Add `--force-continue` flag to the `env run` command
- Make tracebacks colorful and less verbose
- When shell configuration has not been defined, attempt to use the current shell based on parent processes before resorting to the defaults
- The shell name `pwsh` is now an alias for `powershell`
- Remove `atomicwrites` dependency
- Relax constraint on `userpath` dependency
- Bump the minimum supported version of Hatchling to 1.4.1

***Fixed:***

- Keep environments in sync with the dependencies of the selected features
- Use `utf-8` for all files generated for new projects
- Escape special characters Git may return in the user name when writing generated files for new projects
- Normalize the package name to lowercase in `setuptools` migration script
- Fix parsing of source distributions during publishing

## [1.2.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.2.1) - 2022-05-30 ## {: #hatch-v1.2.1 }

***Fixed:***

- Fix handling of top level `data_files` in `setuptools` migration script

## [1.2.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.2.0) - 2022-05-22 ## {: #hatch-v1.2.0 }

***Changed:***

- The `enter_shell` environment plugin method now accepts an additional `args` parameter

***Added:***

- Allow context string formatting for environment dependencies
- Add environment context string formatting fields `env_name`, `env_type`, `matrix`, `verbosity`, and `args`
- Support overriding the default arguments used to spawn shells on non-Windows systems
- Bump the minimum supported version of Hatchling to 1.3.0

***Fixed:***

- Improve `setuptools` migration script

## [1.1.2](https://github.com/pypa/hatch/releases/tag/hatch-v1.1.2) - 2022-05-20 ## {: #hatch-v1.1.2 }

***Fixed:***

- Bump the minimum supported version of Hatchling to 1.2.0
- Update project metadata to reflect support for Python 3.11

## [1.1.1](https://github.com/pypa/hatch/releases/tag/hatch-v1.1.1) - 2022-05-12 ## {: #hatch-v1.1.1 }

***Fixed:***

- Fix `setuptools` migration script for non-Windows systems

## [1.1.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.1.0) - 2022-05-12 ## {: #hatch-v1.1.0 }

***Changed:***

- In order to simplify the implementation of command execution for environment plugins, the `run_shell_commands` method has been replaced by the singular `run_shell_command`. A new `command_context` method has been added to more easily satisfy complex use cases.
- The `finalize_command` environment plugin method has been removed in favor of the newly introduced context formatting functionality.

***Added:***

- Add context formatting functionality i.e. the ability to insert values into configuration like environment variables and command line arguments
- Any verbosity for command execution will now always display headers, even for single environments
- Every executed command is now displayed when running multiple commands or when verbosity is enabled
- Similar to `make`, ignore the exit code of executed commands that start with `-` (a hyphen)
- Add ability for the `--init` flag of the `new` command to automatically migrate `setuptools` configuration
- Update project metadata to reflect the adoption by PyPA and production stability

## [1.0.0](https://github.com/pypa/hatch/releases/tag/hatch-v1.0.0) - 2022-04-28 ## {: #hatch-v1.0.0 }

This is the first stable release of Hatch v1, a complete rewrite. Enjoy!
</file>

<file path="docs/history/hatchling.md">
# Hatchling history

-----

All notable changes to Hatchling will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## Unreleased

## [1.27.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.27.0) - 2024-11-26 ## {: #hatchling-v1.27.0 }

***Added:***

- Update the default version of core metadata to 2.4

## [1.26.3](https://github.com/pypa/hatch/releases/tag/hatchling-v1.26.3) - 2024-11-12 ## {: #hatchling-v1.26.3 }

***Fixed:***

- Support an old import path that is still used by some consumers like Hatch

## [1.26.2](https://github.com/pypa/hatch/releases/tag/hatchling-v1.26.2) - 2024-11-12 ## {: #hatchling-v1.26.2 }

***Fixed:***

- Back-populate string `license` fields (`License-Expression`) for core metadata versions prior to 2.4
- Remove the `License-Expression` and `License-Files` core metadata from version 2.2 that was missed in the previous minor release

## [1.26.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.26.1) - 2024-11-10 ## {: #hatchling-v1.26.1 }

***Fixed:***

- Add backward compatibility for the old `license-files` metadata field
- Support an old import path that is still used by some consumers like Hatch

## [1.26.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.26.0) - 2024-11-10 ## {: #hatchling-v1.26.0 }

***Changed:***

- The `license-files` metadata field has been updated to the latest spec and is now just an array of glob patterns

***Added:***

- Support version 2.4 of core metadata for the `wheel` and `sdist` targets
- Add `HATCH_METADATA_CLASSIFIERS_NO_VERIFY` environment variable to disable trove classifier verification
- Add `.pixi` to the list of directories that cannot be traversed
- Bump the minimum supported version of `packaging` to 24.2

***Fixed:***

- No longer write package metadata for license expressions and files for versions of core metadata prior to 2.4
- Properly enable Zip64 support for the `wheel` target
- Properly ignore parent `.gitingore` files when the project root matches one of the patterns

## [1.25.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.25.0) - 2024-06-22 ## {: #hatchling-v1.25.0 }

***Changed:***

- The `macos-max-compat` option for the `wheel` target is now disabled by default and will be removed in a future release

***Added:***

- Artifacts for the `wheel` and `sdist` targets now have their permission bits normalized

***Fixed:***

- Ignore `manylinux`/`musllinux` tags for the `wheel` target artifact name when enabling the `infer_tag` build data
- The `wheel` target build data `infer_tag` when enabled now respects the `MACOSX_DEPLOYMENT_TARGET` environment variable

## [1.24.2](https://github.com/pypa/hatch/releases/tag/hatchling-v1.24.2) - 2024-04-22 ## {: #hatchling-v1.24.2 }

***Fixed:***

- Add `.venv` to the list of directories that cannot be traversed
- Output from the core Application utility now writes to stderr

## [1.24.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.24.1) - 2024-04-18 ## {: #hatchling-v1.24.1 }

***Fixed:***

- Maintain file permissions for `shared-scripts` option/`shared_scripts` build data of the `wheel` target

## [1.24.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.24.0) - 2024-04-16 ## {: #hatchling-v1.24.0 }

***Added:***

- Add `shared_data` and `shared_scripts` build data for the `wheel` target

## [1.23.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.23.0) - 2024-04-14 ## {: #hatchling-v1.23.0 }

***Added:***

- Add `shared-scripts` option for the `wheel` target

***Fixed:***

- Support recursive optional dependencies
- Set the `packaging` dependency version as `>=23.2` to avoid its URL validation which can conflict with context formatting

## [1.22.5](https://github.com/pypa/hatch/releases/tag/hatchling-v1.22.5) - 2024-04-04 ## {: #hatchling-v1.22.5 }

***Fixed:***

- Fix reading metadata from source distributions when fields are dynamic but not part of core metadata like entry points

## [1.22.4](https://github.com/pypa/hatch/releases/tag/hatchling-v1.22.4) - 2024-03-23 ## {: #hatchling-v1.22.4 }

***Fixed:***

- Only read source distribution metadata for fields that are explicitly defined as dynamic

## [1.22.3](https://github.com/pypa/hatch/releases/tag/hatchling-v1.22.3) - 2024-03-19 ## {: #hatchling-v1.22.3 }

***Fixed:***

- Fix the `custom` build hook when using dynamic dependencies

## [1.22.2](https://github.com/pypa/hatch/releases/tag/hatchling-v1.22.2) - 2024-03-16 ## {: #hatchling-v1.22.2 }

***Fixed:***

- Fix regression when loading metadata from source distributions
- Fix metadata hooks when building wheels from source distributions

## [1.22.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.22.1) - 2024-03-16 ## {: #hatchling-v1.22.1 }

***Fixed:***

- Update the default version of core metadata to 2.3

## [1.22.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.22.0) - 2024-03-16 ## {: #hatchling-v1.22.0 }

***Deprecated:***

- The `app` build target has been renamed to `binary` to reduce ambiguity with the name of an upcoming feature. The former name will still be usable for several minor releases.

***Added:***

- Metadata for the `wheel` target now defaults to the `PKG-INFO` metadata within source distributions
- Add `dependencies` method to the build hook interface so that hooks can themselves dynamically define dependencies
- Update the default version of core metadata to 2.2
- Update SPDX license information to version 3.23
- Improve error message for when the default heuristics for wheel file inclusion fail

***Fixed:***

- Properly support core metadata version 2.2
- Remove `editables` as a direct dependency
- Fix default wheel tag when the supported Python version declaration is strict
- Load VCS ignore patterns first so that whitelisted patterns can be excluded by project configuration
- Don't consider VCS ignore files that are outside of the VCS boundary
- The `sdist` build target now gracefully ignores UNIX socket files
- Begin ignoring certain files ubiquitously, like `.DS_Store` on macOS

## [1.21.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.21.1) - 2024-01-25 ## {: #hatchling-v1.21.1 }

***Fixed:***

- Fix loading of local plugins to account for newly released versions of a dependency

## [1.21.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.21.0) - 2023-12-18 ## {: #hatchling-v1.21.0 }

***Added:***

- Add `parent` context modifier for path fields

## [1.20.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.20.0) - 2023-12-13 ## {: #hatchling-v1.20.0 }

***Added:***

- Add `bypass-selection` option to the `wheel` build target to allow for empty (metadata-only) wheels

***Fixed:***

- Fix regression in 1.19.1 that allowed `exclude` to count toward inclusion selection, thus bypassing the default inclusion selection heuristics
- Fix writing optional dependency core metadata in situations where there are multiple environment markers

## [1.19.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.19.1) - 2023-12-12 ## {: #hatchling-v1.19.1 }

***Fixed:***

- Add better error message when the `wheel` build target cannot determine what to ship
- Consider forced inclusion patterns and build-time artifacts as file selection since some build hooks generate the entire wheel contents without user configuration

## [1.19.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.19.0) - 2023-12-11 ## {: #hatchling-v1.19.0 }

***Changed:***

- An error will now be raised if a force-included path does not exist
- An error will now be raised for the `wheel` build target if no file selection options are defined

***Added:***

- Officially support Python 3.12
- Allow using an empty string for the `sources` option to add a prefix to distribution paths

***Fixed:***

- Properly handle non-zero version epoch for the `standard` version scheme
- Fix the `wheel` build target for case insensitive file systems when the project metadata name does not match the directory name on disk
- The `app` build target no longer has suppressed output
- Prevent duplicate paths when projects require the `sources` option while build hooks overwrite included paths
- Properly escape spaces for URI context formatting

## [1.18.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.18.0) - 2023-06-12 ## {: #hatchling-v1.18.0 }

***Changed:***

- Drop support for Python 3.7

***Added:***

- Update the list of directories that are always excluded for builds

## [1.17.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.17.1) - 2023-06-03 ## {: #hatchling-v1.17.1 }

***Fixed:***

- Fix dev mode when the project has symlinks and file inclusion is defined with the `packages` or `only-include` options
- Change the name of generated PTH files for dev mode so they come first lexicographically and therefore load first

## [1.17.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.17.0) - 2023-05-12 ## {: #hatchling-v1.17.0 }

***Added:***

- The `app` build target now embeds the project version in the name of binaries

## [1.16.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.16.1) - 2023-05-11 ## {: #hatchling-v1.16.1 }

***Fixed:***

- Fix determining the built executable path for the `app` build target option when using a local copy of PyApp when there is an explicit target triple set

## [1.16.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.16.0) - 2023-05-11 ## {: #hatchling-v1.16.0 }

***Added:***

- Add `app` build target option to build using a local copy of the PyApp repository

## [1.15.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.15.0) - 2023-05-09 ## {: #hatchling-v1.15.0 }

***Added:***

- Add `app` build target

## [1.14.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.14.1) - 2023-04-23 ## {: #hatchling-v1.14.1 }

***Fixed:***

- Fix internal archive root naming for the `sdist` target when `strict-naming` is disabled to match the file name in order to support the expectation of some frontends

## [1.14.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.14.0) - 2023-04-02 ## {: #hatchling-v1.14.0 }

***Added:***

- Add `trove-classifiers` as a dependency

***Fixed:***

- Properly normalize metadata descriptions that contain line breaks

## [1.13.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.13.0) - 2023-02-09 ## {: #hatchling-v1.13.0 }

***Added:***

- Update the set of known trove classifiers to version 2023.2.8

## [1.12.2](https://github.com/pypa/hatch/releases/tag/hatchling-v1.12.2) - 2023-01-05 ## {: #hatchling-v1.12.2 }

***Fixed:***

- Add `macos-max-compat` option to the `wheel` target that is enabled by default to support the latest version 22.0 of the `packaging` library

## [1.12.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.12.1) - 2022-12-31 ## {: #hatchling-v1.12.1 }

***Fixed:***

- Fix minor regression in the PEP 517/660 function signatures that was discovered by Fedora

## [1.12.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.12.0) - 2022-12-30 ## {: #hatchling-v1.12.0 }

***Added:***

- Improve readability of exceptions
- Add `extra_metadata` build data to the `wheel` target
- Retroactively support `License-Expression` core metadata starting at version 2.1
- Add more type hints
- Update the set of known trove classifiers to version 2022.12.22
- Update SPDX license information to version 3.19
- Store Hatchling's metadata in `pyproject.toml`

***Fixed:***

- Acknowledge the `ARCHFLAGS` environment variable on macOS for the `wheel` target when build hooks set the `infer_tag` build data to `true`
- Fix dependency checking when encountering broken distributions
- Fix the `support-legacy` option for the `sdist` target when using a src-layout project structure
- Remove unnecessary encoding declaration in the default template for the `version` build hook

## [1.11.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.11.1) - 2022-10-19 ## {: #hatchling-v1.11.1 }

***Fixed:***

- Fix default file selection behavior of the `wheel` target when there is a single top-level module

## [1.11.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.11.0) - 2022-10-08 ## {: #hatchling-v1.11.0 }

***Added:***

- Add `env` version source to retrieve the version from an environment variable
- Add `validate-bump` option to the `standard` version scheme

***Fixed:***

- Use proper CSV formatting for the `RECORD` metadata file of the `wheel` target to avoid warnings during installation by `pip` if, for example, file names contain commas
- Fix installations with pip for build hooks that modify runtime dependencies
- Decreasing verbosity now has no affect on output that should always be displayed

## [1.10.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.10.0) - 2022-09-18 ## {: #hatchling-v1.10.0 }

***Added:***

- Add the following to the list of directories that cannot be traversed: `__pypackages__`, `.hg`, `.hatch`, `.tox`, `.nox`
- Add deprecated option to allow ambiguous features

***Fixed:***

- Improve tracking of dynamic metadata
- Fix core metadata for entries in `project.optional-dependencies` that use direct references

## [1.9.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.9.0) - 2022-09-09 ## {: #hatchling-v1.9.0 }

***Changed:***

- File pattern matching now more closely resembles Git's behavior

***Added:***

- Implement a minimal version of `prepare_metadata_for_build_wheel` and `prepare_metadata_for_build_editable` for non-frontend tools that only need to inspect a project's metadata
- Add `metadata` command to view PEP 621 project metadata
- Improve error messages for SPDX license errors
- Retroactively support `License-File` for core metadata starting at version 2.1
- Bump the minimum supported version of `pathspec` to 0.10.1

***Fixed:***

- Allow the valid non-SPDX `license` values `LicenseRef-Public-Domain` and `LicenseRef-Proprietary`
- Show the help text of the CLI when no subcommand is selected

## [1.8.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.8.1) - 2022-08-25 ## {: #hatchling-v1.8.1 }

***Fixed:***

- Fix default file inclusion for `wheel` build targets when both the project name and package directory name are not normalized

## [1.8.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.8.0) - 2022-08-16 ## {: #hatchling-v1.8.0 }

***Added:***

- Add `get_known_classifiers` method to metadata hooks

***Fixed:***

- Fix check for updating static versions with the `version` command when metadata hooks are in use

## [1.7.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.7.1) - 2022-08-13 ## {: #hatchling-v1.7.1 }

***Fixed:***

- Fix the value of the `relative_path` attribute of included files, that some build plugins may use, when selecting explicit paths

## [1.7.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.7.0) - 2022-08-12 ## {: #hatchling-v1.7.0 }

***Added:***

- Add `require-runtime-features` option for builders and build hooks
- Check for unknown trove classifiers
- Update SPDX license information to version 3.18

***Fixed:***

- Add better error message for `wheel` target dev mode installations that define path rewrites with the `sources` option
- Note the `allow-direct-references` option in the relevant error messages

## [1.6.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.6.0) - 2022-07-23 ## {: #hatchling-v1.6.0 }

***Changed:***

- When no build targets are specified on the command line, now default to `sdist` and `wheel` targets rather than what happens to be defined in config
- The `code` version source now only supports files with known extensions
- Global build hooks now run before target-specific build hooks to better match expected behavior

***Added:***

- The `code` version source now supports loading extension modules
- Add `search-paths` option for the `code` version source

***Fixed:***

- Fix removing `sources` using an empty string value in the mapping
- The `strict-naming` option now also applies to the metadata directory of `wheel` targets

## [1.5.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.5.0) - 2022-07-11 ## {: #hatchling-v1.5.0 }

***Added:***

- Support the final draft of PEP 639
- Add `strict-naming` option for `sdist` and `wheel` targets

***Fixed:***

- Project names are now stored in `sdist` and `wheel` target core metadata exactly as defined in `pyproject.toml` without normalization to allow control of how PyPI displays them

## [1.4.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.4.1) - 2022-07-04 ## {: #hatchling-v1.4.1 }

***Fixed:***

- Fix forced inclusion of important files like licenses for `sdist` targets when using the explicit selection options
- Don't sort project URL metadata so that the rendered order on PyPI can be controlled

## [1.4.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.4.0) - 2022-07-03 ## {: #hatchling-v1.4.0 }

***Changed:***

- The `packages` option uses the new `only-include` option to provide targeted inclusion, since that is desired most of the time. You can retain the old behavior by using the `include` and `sources` options together.

***Added:***

- Support PEP 561 type hinting
- Add `version` build hook
- Add `only-include` option
- The `editable` version of `wheel` targets now respects the `force-include` option by default
- The `force-include` option now supports path rewriting with the `sources` option
- The `wheel` target `shared-data` and `extra-metadata` options now respect file selection options
- The `wheel` target now auto-detects single module layouts
- Improve performance by never entering directories that are guaranteed to be undesirable like `__pycache__` rather than excluding individual files within
- Update SPDX license information to version 3.17

***Fixed:***

- Don't write empty entry points file for `wheel` targets if there are no entry points defined
- Allow metadata hooks to set the `version` in all cases
- Prevent duplicate file entries from inclusion when using the `force-include` option

## [1.3.1](https://github.com/pypa/hatch/releases/tag/hatchling-v1.3.1) - 2022-05-30 ## {: #hatchling-v1.3.1 }

***Fixed:***

- Better populate global variables for the `code` version source

## [1.3.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.3.0) - 2022-05-22 ## {: #hatchling-v1.3.0 }

***Removed:***

- Remove unused global `args` context string formatting field

***Added:***

- Improve error messages for the `env` context string formatting field

***Fixed:***

- Fix `uri` context string formatting modifier on Windows

## [1.2.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.2.0) - 2022-05-20 ## {: #hatchling-v1.2.0 }

***Added:***

- Allow context formatting for `project.dependencies` and `project.optional-dependencies`

## [1.1.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.1.0) - 2022-05-19 ## {: #hatchling-v1.1.0 }

***Added:***

- Add `uri` and `real` context string formatting modifiers for file system paths

## [1.0.0](https://github.com/pypa/hatch/releases/tag/hatchling-v1.0.0) - 2022-05-17 ## {: #hatchling-v1.0.0 }

***Changed:***

- Drop support for Python 2

***Added:***

- Improve error messaging for invalid versions
- Update project metadata to reflect support for Python 3.11

## [0.25.1](https://github.com/pypa/hatch/releases/tag/hatchling-v0.25.1) - 2022-06-14 ## {: #hatchling-v0.25.1 }

***Fixed:***

- Fix support for Windows on Python 2 by removing its support for symlinks

## [0.25.0](https://github.com/pypa/hatch/releases/tag/hatchling-v0.25.0) - 2022-05-15 ## {: #hatchling-v0.25.0 }

***Added:***

- Add `skip-excluded-dirs` build option
- Allow build data to add additional project dependencies for `wheel` and `sdist` build targets
- Add `force_include_editable` build data for the `wheel` build target
- Add `build_hooks` build data
- Add support for Mercurial's `.hgignore` files when using glob syntax
- Update project metadata to reflect the adoption by PyPA

***Fixed:***

- Properly use underscores for the name of `force_include` build data
- No longer greedily skip excluded directories by default

## [0.24.0](https://github.com/pypa/hatch/releases/tag/hatchling-v0.24.0) - 2022-04-28 ## {: #hatchling-v0.24.0 }

This is the initial public release of the Hatchling build system. Support for Python 2 will be dropped in version 1.
</file>

<file path="docs/how-to/config/dynamic-metadata.md">
# How to configure custom dynamic metadata

----

If you have [project metadata](../../config/metadata.md) that is not appropriate for static entry into `pyproject.toml` you will need to provide a [custom metadata hook](../../plugins/metadata-hook/custom.md) to apply such data during builds.

!!! abstract "Alternatives"
    Dynamic metadata is a way to have a single source of truth that will be available at build time and at run time. Another way to achieve that is to enter the build data statically and then look up the same information dynamically in the program or package, using [importlib.metadata](https://docs.python.org/3/library/importlib.metadata.html#module-importlib.metadata).

    If the [version field](../../config/metadata.md#version) is the only metadata of concern, Hatchling provides a few built-in ways such as the [`regex` version source](../../plugins/version-source/regex.md) and also [third-party plugins](../../plugins/version-source/reference.md). The approach here will also work, but is more complex.

## Update project metadata

Change the `[project]` section of `pyproject.toml`:

1. Define the [dynamic field](../../config/metadata.md#dynamic) as an array of all the fields you will set dynamically e.g. `dynamic = ["version", "license", "authors", "maintainers"]`
2. If any of those fields have static definitions in `pyproject.toml`, delete those definitions. It is verboten to define a field statically and dynamically.

Add a section to trigger loading of dynamic metadata plugins: `[tool.hatch.metadata.hooks.custom]`. Use exactly that name, regardless of the name of the class you will use or its `PLUGIN_NAME`. There doesn't need to be anything in the section.

If your plugin requires additional third-party packages to do its work, add them to the `requires` array in the `[build-system]` section of `pyproject.toml`.

## Implement hook

The dynamic lookup must happen in a custom plugin that you write. The [default expectation](../../plugins/metadata-hook/custom.md#options) is that it is in a `hatch_build.py` file at the root of the project. Subclass `MetadataHookInterface` and implement `update()`; for example, here's plugin that reads metadata from a JSON file:

```python tab="hatch_build.py"
import json
import os

from hatchling.metadata.plugin.interface import MetadataHookInterface


class JSONMetaDataHook(MetadataHookInterface):
    def update(self, metadata):
        src_file = os.path.join(self.root, "gnumeric", ".constants.json")
        with open(src_file) as src:
            constants = json.load(src)
            metadata["version"] = constants["__version__"]
            metadata["license"] = constants["__license__"]
            metadata["authors"] = [
                {"name": constants["__author__"], "email": constants["__author_email__"]},
            ]
```

1. You must import the [MetadataHookInterface](../../plugins/metadata-hook/reference.md#hatchling.metadata.plugin.interface.MetadataHookInterface) to subclass it.
2. Do your operations inside the [`update`](../../plugins/metadata-hook/reference.md#hatchling.metadata.plugin.interface.MetadataHookInterface.update) method.
3. `metadata` refers to [project metadata](../../config/metadata.md).
4. When writing to metadata, use `list` for TOML arrays. Note that if a list is expected, it is required even if there is a single element.
5. Use `dict` for TOML tables e.g. `authors`.

If you want to store the hook in a different location, set the [`path` option](../../plugins/metadata-hook/custom.md#options):

```toml config-example
[tool.hatch.metadata.hooks.custom]
path = "some/where.py"
```
</file>

<file path="docs/how-to/environment/dependency-resolution.md">
# How to configure dependency resolution

-----

Most Hatch environment types, like the default [virtual](../../plugins/environment/virtual.md), simply use [pip](https://github.com/pypa/pip) to install dependencies. Therefore, you can use the standard [environment variables](https://pip.pypa.io/en/stable/topics/configuration/#environment-variables) that influence `pip`'s behavior.

Here's an example of setting up the [default](../../config/environment/overview.md#inheritance) environment to look at 2 private indices (using [context formatting](../../config/context.md#environment-variables) for authentication) before finally falling back to PyPI:

```toml config-example
[tool.hatch.envs.default.env-vars]
PIP_INDEX_URL = "https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group1_path>/-/packages/pypi/simple/"
PIP_EXTRA_INDEX_URL = "https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group2_path>/-/packages/pypi/simple/ https://pypi.org/simple/"
```

## UV

If you're [using UV](select-installer.md), a different set of [environment variables](https://github.com/astral-sh/uv/tree/0.1.35#environment-variables) are available to configure its behavior. The previous example would look like this instead:

```toml config-example
[tool.hatch.envs.default.env-vars]
UV_EXTRA_INDEX_URL = "https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group1_path>/-/packages/pypi/simple/"
UV_INDEX_URL = "https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group2_path>/-/packages/pypi/simple/ https://pypi.org/simple/"
```

!!! tip
    If you need precise control over the prioritization of package indices, then using UV is recommended because `pip` has no [index order guarantee](https://github.com/pypa/pip/issues/8606).
</file>

<file path="docs/how-to/environment/select-installer.md">
# How to select the installer

-----

## Enabling UV

The [virtual](../../plugins/environment/virtual.md) environment type by default uses [virtualenv](https://github.com/pypa/virtualenv) for virtual environment creation and [pip](https://github.com/pypa/pip) to install dependencies. You can speed up environment creation and dependency resolution by using [UV](https://github.com/astral-sh/uv) instead of both of those tools.

!!! warning "caveat"
    UV is under active development and may not work for all dependencies.

To do so, set the `installer` [option](../../plugins/environment/virtual.md#options) to `uv`. For example, if you wanted to enable this functionality for the [default](../../config/environment/overview.md#inheritance) environment, you could set the following:

```toml config-example
[tool.hatch.envs.default]
installer = "uv"
```

!!! tip
    All environments that enable UV will have the path to UV available as the `HATCH_UV` environment variable.

## Configuring the version

The UV that is shared by all environments uses a specific version range that is known to work with Hatch. If you want to use a different version, you can override the [dependencies](../../config/environment/overview.md#dependencies) for the internal `hatch-uv` environment:

```toml config-example
[tool.hatch.envs.hatch-uv]
dependencies = [
  "uv>9000",
]
```

## Externally managed

If you want to manage UV yourself, you can expose it to Hatch by setting the `HATCH_ENV_TYPE_VIRTUAL_UV_PATH` environment variable which should be the absolute path to a UV binary for Hatch to use instead. This implicitly [enables UV](#enabling-uv).

## Installer script alias

If you have [scripts](../../config/environment/overview.md#scripts) or [commands](../../config/environment/overview.md#commands) that call `pip`, it may be useful to alias the `uv pip` command to `pip` so that you can use the same commands for both methods of configuration and retain your muscle memory. The following is an example of a matrix that [conditionally](../../config/environment/advanced.md#option-overrides) enables UV and sets the alias:

```toml config-example
[[tool.hatch.envs.example.matrix]]
tool = ["uv", "pip"]

[tool.hatch.envs.example.overrides]
matrix.tool.installer = { value = "{matrix:tool}" }
matrix.tool.scripts = [
  { key = "pip", value = "{env:HATCH_UV} pip {args}", if = ["uv"] },
]
```

Another common use case is to expose UV to all [test environments](../../config/internal/testing.md). In this case, you often wouldn't want to modify the `scripts` mapping directly but rather add an [extra script](../../config/environment/overview.md#extra-scripts):

```toml config-example
[tool.hatch.envs.hatch-test.extra-scripts]
pip = "{env:HATCH_UV} pip {args}"
```
</file>

<file path="docs/how-to/integrate/vscode.md">
# How to use Hatch environments from Visual Studio Code

-----

Visual Studio Code announced support for [Hatch environment discovery](https://code.visualstudio.com/updates/v1_88#_hatch-environment-discovery) in `vscode-python`'s [2024.4 release](https://github.com/microsoft/vscode-python/releases/tag/v2024.4.0).

For it to work, you should [install Hatch](../../install.md) globally. If you used the GUI installers on Windows or macOS, or your system package manager on e.g. Arch Linux or Fedora, this should be taken care of.

??? note "Setting up PATH"

    If you installed Hatch with [pipx](../../install.md#pipx) rather than system-wide, you might need to add `$HOME/.local/bin` to your PATH environment variable *for your graphical session*, not just your terminal. Check like this:

    ```console
    $ pgrep bin/code  # or some other graphical application
    1234
    $ cat /proc/1234/environ | tr '\0' '\n' | grep -E '^PATH='
    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    ```

    If the directory is not in there, you need to add it in your session startup script, in a way that depends on your desktop environment:

    - [KDE Plasma](https://userbase.kde.org/Session_Environment_Variables)
    - [GNOME](https://help.ubuntu.com/community/EnvironmentVariables#Session-wide_environment_variables)

## Project setup

1. Make Hatch install the project and its dependencies to an environment using the [`env create`](../../cli/reference.md#hatch-env-create) command.

2. Select an interpreter using the ++"Python: Select Interpreter"++ command:

     <figure markdown>
         ![Select interpreter](./vscode/select-interpreter.png){ loading=lazy role="img" }
     </figure>

3. You should now be able to use the environment. For example, if you have the `python.terminal.activateEnvironment` setting set to `true` and you open a new terminal, the environment should be activated. Alternatively, you could press the "play" button to run a file in the environment:

     <figure markdown>
         ![Run file](./vscode/run-file.png){ loading=lazy role="img" }
     </figure>
</file>

<file path="docs/how-to/meta/report-issues.md">
# How to report issues

-----

All reports regarding unexpected behavior should be generated with the [`self report`](../../cli/reference.md#hatch-self-report) command:

```
$ hatch self report
```

By default, this will open a new tab in your default browser with pre-populated information about your environment.

If Hatch is not installed alongside a web browser, you may also pass the `--no-open`/`-n` command which will output the URL with correct parameters for copying elsewhere:

```
$ hatch self report -n
https://github.com/pypa/hatch/issues/new?body=%23%23+Current+behavior%0A%3C%21--+A+clear+and+concise+description+of+the+behavior.+--%3E%0A%0A%23%23+Expected+behavior%0A%3C%21--+A+clear+and+concise+description+of+what+you+expected+to+happen.+--%3E%0A%0A%23%23+Additional+context%0A%3C%21--+Add+any+other+context+about+the+problem+here.+If+applicable%2C+add+screenshots+to+help+explain.+--%3E%0A%0A%23%23+Debug%0A%0A%23%23%23+Installation%0A%0A-+Source%3A+pip%0A-+Version%3A+1.9.2.dev5%0A-+Platform%3A+Windows%0A-+Python+version%3A%0A++++%60%60%60%0A++++3.11.1+%28tags%2Fv3.11.1%3Aa7a450f%2C+Dec++6+2022%2C+19%3A58%3A39%29+%5BMSC+v.1934+64+bit+%28AMD64%29%5D%0A++++%60%60%60%0A%0A%23%23%23+Configuration%0A%0A%60%60%60toml%0Amode+%3D+%22local%22%0Ashell+%3D+%22nu%22%0A%60%60%60%0A
```
</file>

<file path="docs/how-to/plugins/testing-builds.md">
# Testing build plugins

-----

For testing [Hatchling plugins](../../plugins/about.md#hatchling), you'll usually want to generate a project to execute builds as a real user would. For example, as a minimal [pytest](https://github.com/pytest-dev/pytest) fixture:

```python
from pathlib import Path

import pytest


@pytest.fixture
def new_project(tmp_path):
    project_dir = tmp_path / 'my-app'
    project_dir.mkdir()

    project_file = project_dir / 'pyproject.toml'
    project_file.write_text(
        f"""\
[build-system]
requires = ["hatchling", "hatch-plugin-name @ {Path.cwd().as_uri()}"]
build-backend = "hatchling.build"

[project]
name = "my-app"
version = "0.1.0"
""",
        encoding='utf-8',
    )
    ...
```

The issue with this is that after the first test session, the project will be forever cached by pip based on the file path. Therefore, subsequent tests runs will never use updated code.

To invalidate the cache, copy your code to a new path for every test session:

```python
import shutil
from pathlib import Path
from tempfile import TemporaryDirectory

import pytest


@pytest.fixture(scope='session')
def plugin_dir():
    with TemporaryDirectory() as d:
        directory = Path(d, 'plugin')
        shutil.copytree(
            Path.cwd(), directory, ignore=shutil.ignore_patterns('.git')
        )

        yield directory.resolve()


@pytest.fixture
def new_project(tmp_path, plugin_dir):
    project_dir = tmp_path / 'my-app'
    project_dir.mkdir()

    project_file = project_dir / 'pyproject.toml'
    project_file.write_text(
        f"""\
[build-system]
requires = ["hatchling", "hatch-plugin-name @ {plugin_dir.as_uri()}"]
build-backend = "hatchling.build"

[project]
name = "my-app"
version = "0.1.0"
""",
        encoding='utf-8',
    )
    ...
```

!!! note
    This example chooses to ignore copying `.git` for performance reasons. You may want to ignore more patterns, or copy only specific paths like [this plugin](https://github.com/hynek/hatch-fancy-pypi-readme/blob/main/tests/conftest.py) does.
</file>

<file path="docs/how-to/publish/auth.md">
# How to authenticate for index publishing

----

The username is derived from the following sources, in order of precedence:

1. The  `--user` / `-u` cli option.
2. The `HATCH_INDEX_USER` environment variable.
3. The [`repos` tables](../../plugins/publisher/package-index.md).
4. The [`~/.pypirc` file](https://packaging.python.org/en/latest/specifications/pypirc/).
5. The input to an interactive prompt.

As a fallback the value `__token__` is applied.

The password is looked up in these:

1. The [`~/.pypirc` file](https://packaging.python.org/en/latest/specifications/pypirc/)
   if the username was provided by it.
2. The `--auth` / `-a` cli option.
3. The `HATCH_INDEX_AUTH` environment variable.
4. The [`repos` tables](../../plugins/publisher/package-index.md).
5. A variety of OS-level credentials services backed by [keyring](https://github.com/jaraco/keyring).
6. The input to an interactive prompt.

If interactively provided credentials were used, the username will be stored in
[Hatch's cache](../../config/hatch.md#cache) and the password stored in the available
[keyring](https://github.com/jaraco/keyring) backed credentials stores.

For automated releasing to PyPI, it is recommended to use ["Trusted Publishing" with OIDC](https://docs.pypi.org/trusted-publishers/)
(e.g. PyPA's [`pypi-publish`](https://github.com/pypa/gh-action-pypi-publish) GitHub Action)
or per-project [API tokens](https://pypi.org/help/#apitoken).
</file>

<file path="docs/how-to/publish/repo.md">
# How to configure repositories for index publishing

----

You can select the repository with which to upload using the `-r`/`--repo` option or by setting the `HATCH_INDEX_REPO` environment variable.

Rather than specifying the full URL of a repository, you can use a named repository from a `publish.index.repos` table defined in Hatch's [config file](../../config/hatch.md):

```toml tab="config.toml"
[publish.index.repos.private]
url = "..."
...
```

The following repository names are reserved by Hatch and cannot be overridden:

| Name | Repository |
| --- | --- |
| `main` | https://upload.pypi.org/legacy/ |
| `test` | https://test.pypi.org/legacy/ |

The `main` repository is used by default.
</file>

<file path="docs/how-to/python/custom.md">
# How to use custom Python distributions

----

The built-in [Python management](../../tutorials/python/manage.md) capabilities offer full support for using custom distributions.

## Configuration

Configuring custom Python distributions is done entirely through three environment variables that must all be defined, for each desired distribution. In the following sections, the placeholder `<NAME>` is the uppercased version of the distribution name with periods replaced by underscores e.g. `pypy3.10` would become `PYPY3_10`.

### Source

The `HATCH_PYTHON_CUSTOM_SOURCE_<NAME>` variable is the URL to the distribution's archive. The value must end with the archive's real file extension, which is used to determine the extraction method.

The following extensions are supported:

| Extensions | Description |
| --- | --- |
| <ul><li><code>.tar.bz2</code></li><li><code>.bz2</code></li></ul> | A [tar file](https://en.wikipedia.org/wiki/Tar_(computing)) with [bzip2 compression](https://en.wikipedia.org/wiki/Bzip2) |
| <ul><li><code>.tar.gz</code></li><li><code>.tgz</code></li></ul> | A [tar file](https://en.wikipedia.org/wiki/Tar_(computing)) with [gzip compression](https://en.wikipedia.org/wiki/Gzip) |
| <ul><li><code>.tar.zst</code></li><li><code>.tar.zstd</code></li></ul> | A [tar file](https://en.wikipedia.org/wiki/Tar_(computing)) with [Zstandard compression](https://en.wikipedia.org/wiki/Zstd) |
| <ul><li><code>.zip</code></li></ul> | A [ZIP file](https://en.wikipedia.org/wiki/ZIP_(file_format)) with [DEFLATE compression](https://en.wikipedia.org/wiki/Deflate) |

### Python path

The `HATCH_PYTHON_CUSTOM_PATH_<NAME>` variable is the path to the Python interpreter within the archive. This path is relative to the root of the archive and must be a Unix-style path, even on Windows.

### Version

The `HATCH_PYTHON_CUSTOM_VERSION_<NAME>` variable is the version of the distribution. This value is used to determine whether updates are required and is displayed in the output of the [`python show`](../../cli/reference.md#hatch-python-show) command.
</file>

<file path="docs/how-to/run/python-scripts.md">
# How to run Python scripts

-----

The [`run`](../../cli/reference.md#hatch-run) command supports executing Python scripts with [inline metadata](https://packaging.python.org/en/latest/specifications/inline-script-metadata/), such that a dedicated [environment](../../config/environment/overview.md) is automatically created with the required dependencies and with the correct version of Python.

A script metadata block is a comment block that starts with `# /// script` and ends with `# ///`. Every line between those two lines must be a comment line that starts with `#` and contains a [TOML](https://github.com/toml-lang/toml) document when the comment characters are removed.

The top-level fields are:

- `dependencies`: A list of strings that specifies the runtime dependencies of the script. Each entry must be a valid [dependency specifier](https://packaging.python.org/en/latest/specifications/dependency-specifiers/#dependency-specifiers).
- `requires-python`: A string that specifies the Python version(s) with which the script is compatible. The value of this field must be a valid [version specifier](https://packaging.python.org/en/latest/specifications/version-specifiers/#version-specifiers).

The following is an example of Python script with a valid metadata block:

```python tab="script.py"
# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "httpx",
#   "rich",
# ]
# ///

import httpx
from rich.pretty import pprint

resp = httpx.get("https://peps.python.org/api/peps.json")
data = resp.json()
pprint([(k, v["title"]) for k, v in data.items()][:10])
```

Run it directly:

```
$ hatch run /path/to/script.py
Creating environment: SyB4bPbL
Checking dependencies
Syncing dependencies
[
│   ('1', 'PEP Purpose and Guidelines'),
│   ('2', 'Procedure for Adding New Modules'),
│   ('3', 'Guidelines for Handling Bug Reports'),
│   ('4', 'Deprecation of Standard Modules'),
│   ('5', 'Guidelines for Language Evolution'),
│   ('6', 'Bug Fix Releases'),
│   ('7', 'Style Guide for C Code'),
│   ('8', 'Style Guide for Python Code'),
│   ('9', 'Sample Plaintext PEP Template'),
│   ('10', 'Voting Guidelines')
]
```

!!! note "notes"
    - The informational text in this example is only temporarily shown in your terminal on the first run.
    - Although the environment name is based on the script's absolute path, the command line argument does not have to be.

## Environment configuration

You may use the `[tool.hatch]` table directly to control the script's [environment](../../config/environment/overview.md). For example, if you wanted to disable UV (which is [enabled](../environment/select-installer.md#enabling-uv) by default for scripts), you could add the following:

```python tab="script.py"
# /// script
# ...
# [tool.hatch]
# installer = "pip"
# ///
```
</file>

<file path="docs/how-to/static-analysis/behavior.md">
# Customize static analysis behavior

-----

You can [fully alter](../../config/internal/static-analysis.md#customize-behavior) the static analysis performed by the [`fmt`](../../cli/reference.md#hatch-fmt) command by modifying the reserved [environment](../../config/environment/overview.md) named `hatch-static-analysis`. For example, you could define the following if you wanted to replace the default behavior with a mix of [Black](https://github.com/psf/black), [isort](https://github.com/PyCQA/isort) and basic [flake8](https://github.com/PyCQA/flake8):

```toml config-example
[tool.hatch.envs.hatch-static-analysis]
dependencies = ["black", "flake8", "isort"]

[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = [
  "black --check --diff {args:.}",
  "isort --check-only --diff {args:.}",
]
format-fix = [
  "isort {args:.}",
  "black {args:.}",
]
lint-check = "flake8 {args:.}"
lint-fix = "lint-check"
```

The `format-*` scripts correspond to the `--formatter`/`-f` flag while the `lint-*` scripts correspond to the `--linter`/`-l` flag. The `*-fix` scripts run by default while the `*-check` scripts correspond to the `--check` flag. Based on this example, the following shows how the various scripts influence behavior:

| Command | Expanded scripts |
| --- | --- |
| `hatch fmt` | <ul><li><code>flake8 .</code></li><li><code>isort .</code></li><li><code>black .</code></li></ul> |
| `hatch fmt src tests` | <ul><li><code>flake8 src tests</code></li><li><code>isort src tests</code></li><li><code>black src tests</code></li></ul> |
| `hatch fmt -f` | <ul><li><code>isort .</code></li><li><code>black .</code></li></ul> |
| `hatch fmt -l` | <ul><li><code>flake8 .</code></li></ul> |
| `hatch fmt --check` | <ul><li><code>flake8 .</code></li><li><code>black --check --diff .</code></li><li><code>isort --check-only --diff .</code></li></ul> |
| `hatch fmt --check -f` | <ul><li><code>black --check --diff .</code></li><li><code>isort --check-only --diff .</code></li></ul> |
| `hatch fmt --check -l` | <ul><li><code>flake8 .</code></li></ul> |
</file>

<file path="docs/meta/authors.md">
# Authors

-----

## Maintainers

- Ofek Lev [:material-web:](https://ofek.dev) [:material-github:](https://github.com/ofek) [:material-twitter:](https://twitter.com/Ofekmeister)

## Contributors

- Amjith Ramanujam [:material-twitter:](https://twitter.com/amjithr)
- Arnaud Crowther [:material-github:](https://github.com/areknow)
- Chaojie [:material-web:](https://chaojie.fun) [:material-github:](https://github.com/ischaojie)
- Chris Warrick [:material-twitter:](https://twitter.com/Kwpolska)
- Lumír 'Frenzy' Balhar [:material-email:](mailto:frenzy.madness@gmail.com) [:material-twitter:](https://twitter.com/lumirbalhar)
- Ofek Lev [:material-web:](https://ofek.dev) [:material-github:](https://github.com/ofek) [:material-twitter:](https://twitter.com/Ofekmeister)
- Olga Matoula [:material-github:](https://github.com/olgarithms) [:material-twitter:](https://twitter.com/olgarithms_)
- Philip Blair [:material-email:](mailto:philip@pblair.org)
- Robert Rosca [:material-github:](https://github.com/robertrosca)
</file>

<file path="docs/meta/faq.md">
# FAQ

-----

## Interoperability

***Q***: What is the risk of lock-in?

***A***: Not much! Other than the [plugin system](../plugins/about.md), everything uses Python's established standards by default. Project metadata is based entirely on [the standard][project metadata standard], the build system is compatible with [PEP 517][]/[PEP 660][], versioning uses the scheme specified by [PEP 440](https://peps.python.org/pep-0440/#public-version-identifiers), dependencies are defined with [PEP 508][] strings, and environments use [virtualenv](https://github.com/pypa/virtualenv).

***Q***: Must one use all features?

***A***: No, all features are optional! You can use [just the build system](../build.md#packaging-ecosystem), publish wheels and source distributions that were built by other tools, only use the environment management, etc.

## Libraries vs applications

***Q***: Are workflows for both libraries and applications supported?

***A***: Yes, mostly! Applications can utilize environment management just like libraries, and plugins can be used to [build](../plugins/builder/reference.md) projects in arbitrary formats or [publish](../plugins/publisher/reference.md) artifacts to arbitrary destinations.

The only caveat is that currently there is no support for re-creating an environment given a set of dependencies in a reproducible manner. Although a standard lock file format may be far off since [PEP 665][] was rejected, resolving capabilities are [coming to pip](https://github.com/pypa/pip/pull/10748). When that is stabilized, Hatch will add locking functionality and dedicated documentation for managing applications.

## Tool migration

***Q***: How to migrate to Hatch?

### Build system

=== "Setuptools"
    ```python tab="setup.py"
    import os
    from io import open

    from setuptools import find_packages, setup

    about = {}
    with open(os.path.join('src', 'foo', '__about__.py'), 'r', 'utf-8') as f:
        exec(f.read(), about)

    with open('README.md', 'r', 'utf-8') as f:
        readme = f.read()

    setup(
        # Metadata
        name='foo',
        version=about['__version__'],
        description='...',
        long_description=readme,
        long_description_content_type='text/markdown',
        author='...',
        author_email='...',
        project_urls={
            'Documentation': '...',
            'Source': '...',
        },
        classifiers=[
            '...',
        ],
        keywords=[
            '...',
        ],
        python_requires='>=3.8',
        install_requires=[
            '...',
        ],
        extras_require={
            'feature': ['...'],
        },

        # Packaging
        packages=find_packages(where='src'),
        package_dir={'': 'src'},
        package_data={
            'foo': ['py.typed'],
        },
        zip_safe=False,
        entry_points={
            'console_scripts': [
                'foo = foo.cli:main',
            ],
        },
    )
    ```

    ```text tab="MANIFEST.in"
    graft tests

    global-exclude *.py[cod] __pycache__
    ```

=== "Hatch"
    ```toml tab="pyproject.toml"
    [build-system]
    requires = ["hatchling"]
    build-backend = "hatchling.build"

    [project]
    name = "foo"
    description = "..."
    readme = "README.md"
    authors = [
      { name = "...", email = "..." },
    ]
    classifiers = [
      "...",
    ]
    keywords = [
      "...",
    ]
    requires-python = ">=3.8"
    dependencies = [
      "...",
    ]
    dynamic = ["version"]

    [project.urls]
    Documentation = "..."
    Source = "..."

    [project.optional-dependencies]
    feature = ["..."]

    [project.scripts]
    foo = "foo.cli:main"

    [tool.hatch.version]
    path = "src/foo/__about__.py"

    [tool.hatch.build.targets.sdist]
    include = [
      "/src",
      "/tests",
    ]
    ```

### Environments

=== "Tox"
    Invocation:

    ```
    tox
    ```

    ```ini tab="tox.ini"
    [tox]
    envlist =
        py{38,39}-{42,3.14}
        py{39,310}-{9000}-{foo,bar}

    [testenv]
    usedevelop = true
    deps =
        coverage[toml]
        pytest
        pytest-cov
        foo: cryptography
    commands =
        pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests {posargs}
    setenv =
        3.14: PRODUCT_VERSION=3.14
        42: PRODUCT_VERSION=42
        9000: PRODUCT_VERSION=9000
        {foo,bar}: EXPERIMENTAL=true
    ```

=== "Hatch"
    Invocation:

    ```
    hatch run test
    ```

    ```toml config-example
    [tool.hatch.envs.default]
    dependencies = [
      "coverage[toml]",
      "pytest",
      "pytest-cov",
    ]

    [tool.hatch.envs.default.scripts]
    test = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'

    [tool.hatch.envs.default.overrides]
    matrix.version.env-vars = "PRODUCT_VERSION"
    matrix.feature.env-vars = "EXPERIMENTAL=true"
    matrix.feature.dependencies = [
      { value = "cryptography", if = ["foo"] },
    ]

    [[tool.hatch.envs.default.matrix]]
    python = ["3.8", "3.9"]
    version = ["42", "3.14"]

    [[tool.hatch.envs.default.matrix]]
    python = ["3.9", "3.10"]
    version = ["9000"]
    feature = ["foo", "bar"]
    ```

## Fast CLI?

The claim about being faster than other tools is [based on timings](https://github.com/pypa/hatch/actions/workflows/cli.yml) that are always checked in CI.

Hatch achieves this by using lazy imports, lazily performing computation manually and with [functools.cached_property](https://docs.python.org/3/library/functools.html#functools.cached_property), using hacks like `not not ...` instead of `bool(...)`, etc.
</file>

<file path="docs/plugins/build-hook/custom.md">
# Custom build hook

-----

This is a custom class in a given Python file that inherits from the [BuildHookInterface](reference.md#hatchling.builders.hooks.plugin.interface.BuildHookInterface).

## Configuration

The build hook plugin name is `custom`.

```toml config-example
[tool.hatch.build.hooks.custom]
[tool.hatch.build.targets.<TARGET_NAME>.hooks.custom]
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `path` | `hatch_build.py` | The path of the Python file |

## Example

```python tab="hatch_build.py"
from hatchling.builders.hooks.plugin.interface import BuildHookInterface


class CustomBuildHook(BuildHookInterface):
    ...
```

If multiple subclasses are found, you must define a function named `get_build_hook` that returns the desired build hook.

!!! note
    Any defined [PLUGIN_NAME](reference.md#hatchling.builders.hooks.plugin.interface.BuildHookInterface.PLUGIN_NAME) is ignored and will always be `custom`.
</file>

<file path="docs/plugins/build-hook/reference.md">
# Build hook plugins

-----

A build hook provides code that will be executed at various stages of the build process. See the documentation for [build hook configuration](../../config/build.md#build-hooks).

## Known third-party

- [hatch-argparse-manpage](https://github.com/damonlynch/hatch-argparse-manpage) - generate man pages for [argparse](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser)-based CLIs
- [hatch-autorun](https://github.com/ofek/hatch-autorun) - used to inject code into an installation that will automatically run before the first import
- [hatch-build-scripts](https://github.com/rmorshea/hatch-build-scripts) - run arbitrary shell commands that create artifacts
- [hatch-cython](https://github.com/joshua-auchincloss/hatch-cython) - build [Cython](https://github.com/cython/cython) extensions
- [hatch-gettext](https://github.com/damonlynch/hatch-gettext) - compiles multi-lingual messages with GNU `gettext` tools
- [hatch-jupyter-builder](https://github.com/jupyterlab/hatch-jupyter-builder) - used for packages in the Project Jupyter ecosystem
- [hatch-mypyc](https://github.com/ofek/hatch-mypyc) - compiles code with [Mypyc](https://github.com/mypyc/mypyc)
- [hatch-odoo](https://github.com/acsone/hatch-odoo) - package Odoo add-ons into the appropriate namespace
- [scikit-build-core](https://github.com/scikit-build/scikit-build-core) - build extension modules with CMake

## Overview

Build hooks run for every selected [version](../../config/build.md#versions) of build targets.

The [initialization](#hatchling.builders.hooks.plugin.interface.BuildHookInterface.initialize) stage occurs immediately before each build and the [finalization](#hatchling.builders.hooks.plugin.interface.BuildHookInterface.finalize) stage occurs immediately after. Each stage has the opportunity to view or modify [build data](#build-data).

## Build data

Build data is a simple mapping whose contents can influence the behavior of builds. Which fields exist and are recognized depends on each build target.

The following fields are always present and recognized by the build system itself:

| Field | Type | Description |
| --- | --- | --- |
| `artifacts` | `#!python list[str]` | This is a list of extra [`artifact` patterns](../../config/build.md#artifacts) and should generally only be appended to |
| `force_include` | `#!python dict[str, str]` | This is a mapping of extra [forced inclusion paths](../../config/build.md#forced-inclusion), with this mapping taking precedence in case of conflicts |
| `build_hooks` | `#!python tuple[str, ...]` | This is an immutable sequence of the names of the configured build hooks and matches the order in which they run |

!!! attention
    While user-facing TOML options are hyphenated, build data fields should be named with underscores to allow plugins to use them as valid Python identifiers.

## Notes

In some cases it may be necessary to use `force_include` rather than `artifacts`. For example, say that you want to install a `lib.so` directly at the root of `site-packages` and a project defines a [package](../../config/build.md#packages) `src/foo`. If you create `src/lib.so`, there will never be a match because the directory traversal starts at `src/foo` rather than `src`. In that case you must do either:

```python
build_data['force_include']['src/lib.so'] = 'src/lib.so'
```

or

```python
build_data['force_include']['/absolute/path/to/src/lib.so'] = 'src/lib.so'
```

::: hatchling.builders.hooks.plugin.interface.BuildHookInterface
    options:
      members:
      - PLUGIN_NAME
      - app
      - root
      - config
      - build_config
      - target_name
      - directory
      - dependencies
      - clean
      - initialize
      - finalize
</file>

<file path="docs/plugins/build-hook/version.md">
# Version build hook

-----

This writes the project's version to a file.

## Configuration

The build hook plugin name is `version`.

```toml config-example
[tool.hatch.build.hooks.version]
[tool.hatch.build.targets.<TARGET_NAME>.hooks.version]
```

## Options

| Option | Description |
| --- | --- |
| `path` (required) | A relative path to the desired file |
| `template` | A string representing the entire contents of `path` that will be formatted with a `version` variable |
| `pattern` | Rather than updating the entire file, a regular expression may be used that has a named group called `version` that represents the version. If set to `true`, a pattern will be used that looks for a variable named `__version__` or `VERSION` that is set to a string containing the version, optionally prefixed with the lowercase letter `v`. |
</file>

<file path="docs/plugins/builder/binary.md">
# Binary builder

-----

This uses [PyApp](https://github.com/ofek/pyapp) to build an application that is able to bootstrap itself at runtime.

!!! note
    This requires an installation of [Rust](https://www.rust-lang.org).

## Configuration

The builder plugin name is `binary`.

```toml config-example
[tool.hatch.build.targets.binary]
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `scripts` | all defined | An array of defined [script](../../config/metadata.md#cli) names to limit what gets built |
| `python-version` | latest compatible Python minor version | The [Python version ID](https://ofek.dev/pyapp/latest/config/#known) to use |
| `pyapp-version` | | The version of PyApp to use |

## Build behavior

If any [scripts](../../config/metadata.md#cli) are defined then each one will be built (limited by the `scripts` option). Otherwise, a single executable will be built based on the project name assuming there is an equivalently named module with a `__main__.py` file.

Every executable will be built inside an `app` directory in the [output directory](../../config/build.md#output-directory).

If the `CARGO` environment variable is set then that path will be used as the executable for performing builds.

If the [`CARGO_BUILD_TARGET`](https://doc.rust-lang.org/cargo/reference/config.html#buildtarget) environment variable is set then its value will be appended to the file name stems.

If the `PYAPP_REPO` environment variable is set then a local build will be performed inside that directory rather than installing from [crates.io](https://crates.io). Note that this is [required](https://github.com/cross-rs/cross/issues/1215) if the `CARGO` environment variable refers to [cross](https://github.com/cross-rs/cross).
</file>

<file path="docs/plugins/builder/custom.md">
# Custom builder

-----

This is a custom class in a given Python file that inherits from the [BuilderInterface](reference.md#hatchling.builders.plugin.interface.BuilderInterface).

## Configuration

The builder plugin name is `custom`.

```toml config-example
[tool.hatch.build.targets.custom]
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `path` | `hatch_build.py` | The path of the Python file |

## Example

```python tab="hatch_build.py"
from hatchling.builders.plugin.interface import BuilderInterface


class CustomBuilder(BuilderInterface):
    ...
```

If multiple subclasses are found, you must define a function named `get_builder` that returns the desired builder.

!!! note
    Any defined [PLUGIN_NAME](reference.md#hatchling.builders.plugin.interface.BuilderInterface.PLUGIN_NAME) is ignored and will always be `custom`.
</file>

<file path="docs/plugins/builder/reference.md">
# Builder plugins

-----

See the documentation for [build configuration](../../config/build.md).

## Known third-party

- [hatch-aws](https://github.com/aka-raccoon/hatch-aws) - used for building AWS Lambda functions with SAM
- [hatch-zipped-directory](https://github.com/dairiki/hatch-zipped-directory) - used for building ZIP archives for installation into various foreign package installation systems

::: hatchling.builders.plugin.interface.BuilderInterface
    options:
      members:
      - PLUGIN_NAME
      - app
      - root
      - build_config
      - target_config
      - config
      - get_config_class
      - get_version_api
      - get_default_versions
      - clean
      - recurse_included_files
      - get_default_build_data
</file>

<file path="docs/plugins/builder/sdist.md">
# Source distribution builder

-----

A source distribution, or `sdist`, is an archive of Python "source code". Although largely unspecified, by convention it should include everything that is required to build a [wheel](wheel.md) without making network requests.

## Configuration

The builder plugin name is `sdist`.

```toml config-example
[tool.hatch.build.targets.sdist]
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `core-metadata-version` | `"2.4"` | The version of [core metadata](https://packaging.python.org/specifications/core-metadata/) to use |
| `strict-naming` | `true` | Whether or not file names should contain the normalized version of the project name |
| `support-legacy` | `false` | Whether or not to include a `setup.py` file to support legacy installation mechanisms |

## Versions

| Version | Description |
| --- | --- |
| `standard` (default) | The latest conventional format |

## Default file selection

When the user has not set any [file selection](../../config/build.md#file-selection) options, all files that are not [ignored by your VCS](../../config/build.md#vcs) will be included.

!!! note
    The following files are always included and cannot be excluded:

    - `/pyproject.toml`
    - `/hatch.toml`
    - `/hatch_build.py`
    - `/.gitignore` or `/.hgignore`
    - Any defined [`readme`](../../config/metadata.md#readme) file
    - All defined [`license-files`](../../config/metadata.md#license)

## Reproducibility

[Reproducible builds](../../config/build.md#reproducible-builds) are supported.

## Build data

This is data that can be modified by [build hooks](../build-hook/reference.md).

| Data | Default | Description |
| --- | --- | --- |
| `dependencies` | | Extra [project dependencies](../../config/metadata.md#required) |
</file>

<file path="docs/plugins/builder/wheel.md">
# Wheel builder

-----

A [wheel](https://packaging.python.org/specifications/binary-distribution-format/) is a binary distribution of a Python package that can be installed directly into an environment.

## Configuration

The builder plugin name is `wheel`.

```toml config-example
[tool.hatch.build.targets.wheel]
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `core-metadata-version` | `"2.4"` | The version of [core metadata](https://packaging.python.org/specifications/core-metadata/) to use |
| `shared-data` | | A mapping similar to the [forced inclusion](../../config/build.md#forced-inclusion) option corresponding to the `data` subdirectory within the standard [data directory](https://packaging.python.org/en/latest/specifications/binary-distribution-format/#the-data-directory) that will be installed globally in a given Python environment, usually under `#!python sys.prefix` |
| `shared-scripts` | | A mapping similar to the [forced inclusion](../../config/build.md#forced-inclusion) option corresponding to the `scripts` subdirectory within the standard [data directory](https://packaging.python.org/en/latest/specifications/binary-distribution-format/#the-data-directory) that will be installed in a given Python environment, usually under `Scripts` on Windows or `bin` otherwise, and would normally be available on PATH |
| `extra-metadata` | | A mapping similar to the [forced inclusion](../../config/build.md#forced-inclusion) option corresponding to extra [metadata](https://peps.python.org/pep-0427/#the-dist-info-directory) that will be shipped in a directory named `extra_metadata` |
| `strict-naming` | `true` | Whether or not file names should contain the normalized version of the project name |
| `macos-max-compat` | `false` | Whether or not on macOS, when build hooks have set the `infer_tag` [build data](#build-data), the wheel name should signal broad support rather than specific versions for newer SDK versions.<br><br>Note: This option will eventually be removed. |
| `bypass-selection` | `false` | Whether or not to suppress the error when one has not defined any file selection options and all heuristics have failed to determine what to ship |

## Versions

| Version | Description |
| --- | --- |
| `standard` (default) | The latest standardized format |
| `editable` | A wheel that only ships `.pth` files or import hooks for real-time development |

## Default file selection

When the user has not set any [file selection](../../config/build.md#file-selection) options, the [project name](../../config/metadata.md#name) will be used to determine the package to ship in the following heuristic order:

1. `<NAME>/__init__.py`
2. `src/<NAME>/__init__.py`
3. `<NAME>.py`
4. `<NAMESPACE>/<NAME>/__init__.py`

If none of these heuristics are satisfied, an error will be raised.

## Reproducibility

[Reproducible builds](../../config/build.md#reproducible-builds) are supported.

## Build data

This is data that can be modified by [build hooks](../build-hook/reference.md).

| Data | Default | Description |
| --- | --- | --- |
| `tag` | | The full [tag](https://peps.python.org/pep-0425/) part of the filename (e.g. `py3-none-any`), defaulting to a cross-platform wheel with the supported major versions of Python based on [project metadata](../../config/metadata.md#python-support) |
| `infer_tag` | `#!python False` | When `tag` is not set, this may be enabled to use the one most specific to the platform, Python interpreter, and ABI |
| `pure_python` | `#!python True` | Whether or not to write metadata indicating that the package does not contain any platform-specific files |
| `dependencies` | | Extra [project dependencies](../../config/metadata.md#required) |
| `shared_data` | | Additional [`shared-data`](#options) entries, which take precedence in case of conflicts |
| `shared_scripts` | | Additional [`shared-scripts`](#options) entries, which take precedence in case of conflicts |
| `extra_metadata` | | Additional [`extra-metadata`](#options) entries, which take precedence in case of conflicts |
| `force_include_editable` | | Similar to the [`force_include` option](../build-hook/reference.md#build-data) but specifically for the `editable` [version](#versions) and takes precedence |
</file>

<file path="docs/plugins/environment/reference.md">
# Environment plugins

-----

See the documentation for [environment configuration](../../config/environment/overview.md).

## Known third-party

- [hatch-conda](https://github.com/OldGrumpyViking/hatch-conda) - environments backed by Conda/Mamba
- [hatch-containers](https://github.com/ofek/hatch-containers) - environments run inside containers
- [hatch-pip-compile](https://github.com/juftin/hatch-pip-compile) - use [pip-compile](https://github.com/jazzband/pip-tools) to manage project dependencies and lockfiles
- [hatch-pip-deepfreeze](https://github.com/sbidoul/hatch-pip-deepfreeze) - [virtual](virtual.md) environments with dependency locking by [pip-deepfreeze](https://github.com/sbidoul/pip-deepfreeze)

## Installation

Any required environment types that are not built-in must be manually installed alongside Hatch or listed in the `tool.hatch.env.requires` array for automatic management:

```toml config-example
[tool.hatch.env]
requires = [
  "...",
]
```

## Life cycle

Whenever an environment is used, the following logic is performed:

::: hatch.project.core.Project.prepare_environment
    options:
      show_root_heading: false
      show_root_toc_entry: false

## Build environments

All environment types should [offer support](#hatch.env.plugin.interface.EnvironmentInterface.fs_context) for synchronized storage between the local file system and the environment. This functionality is used in the following scenarios:

- the [`build`](../../cli/reference.md#hatch-build) command
- commands that read dependencies, like [`dep hash`](../../cli/reference.md#hatch-dep-hash), if any [project dependencies](../../config/metadata.md#dependencies) are [set dynamically](../../config/metadata.md#dynamic)

::: hatch.env.plugin.interface.EnvironmentInterface
    options:
      members:
      - PLUGIN_NAME
      - find
      - create
      - remove
      - exists
      - install_project
      - install_project_dev_mode
      - dependencies_in_sync
      - sync_dependencies
      - dependency_hash
      - project_root
      - sep
      - pathsep
      - fs_context
      - activate
      - deactivate
      - app_status_creation
      - app_status_pre_installation
      - app_status_post_installation
      - app_status_project_installation
      - app_status_dependency_state_check
      - app_status_dependency_installation_check
      - app_status_dependency_synchronization
      - app
      - root
      - name
      - data_directory
      - isolated_data_directory
      - config
      - platform
      - environment_dependencies
      - dependencies
      - env_vars
      - env_include
      - env_exclude
      - platforms
      - skip_install
      - dev_mode
      - description
      - command_context
      - enter_shell
      - run_shell_command
      - resolve_commands
      - get_env_vars
      - apply_features
      - construct_pip_install_command
      - join_command_args
      - check_compatibility
      - get_option_types
      - get_env_var_option
      - get_context
</file>

<file path="docs/plugins/environment/virtual.md">
# Virtual environment

-----

This uses virtual environments backed by [virtualenv](https://github.com/pypa/virtualenv) or [UV](https://github.com/astral-sh/uv).

## Configuration

The environment plugin name is `virtual`.

```toml config-example
[tool.hatch.envs.<ENV_NAME>]
type = "virtual"
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `python` | | The version of Python to find on your system and subsequently use to create the environment, defaulting to the `HATCH_PYTHON` environment variable, followed by the [normal resolution logic](#python-resolution). Setting the `HATCH_PYTHON` environment variable to `self` will force the use of the Python executable Hatch is running on. For more information, see the [documentation](https://virtualenv.pypa.io/en/latest/user_guide.html#python-discovery). |
| `python-sources` | `['external', 'internal']` | This may be set to an array of strings that are either the literal `internal` or `external`. External considers only Python executables that are already on `PATH`. Internal considers only [internally managed Python distributions](#internal-distributions). |
| `path` | | An explicit path to the virtual environment. The path may be absolute or relative to the project root. Any environments that [inherit](../../config/environment/overview.md#inheritance) this option will also use this path. The environment variable `HATCH_ENV_TYPE_VIRTUAL_PATH` may be used, which will take precedence. |
| `system-packages` | `false` | Whether or not to give the virtual environment access to the system `site-packages` directory |
| `installer` | `pip` | When set to `uv`, [UV](https://github.com/astral-sh/uv) will be used in place of virtualenv & pip for virtual environment creation and dependency management, respectively. If you intend to provide UV yourself, you may set the `HATCH_ENV_TYPE_VIRTUAL_UV_PATH` environment variable which should be the absolute path to a UV binary. This environment variable implicitly sets the `installer` option to `uv` (if unset). |

## Location

The [location](../../cli/reference.md#hatch-env-find) of environments is determined in the following heuristic order:

1. The `path` option
2. A directory named after the environment within the configured `virtual` [environment directory](../../config/hatch.md#environments) if the directory resides somewhere within the project root or if it is set to a `.virtualenvs` directory within the user's home directory
3. Otherwise, environments are stored within the configured `virtual` [environment directory](../../config/hatch.md#environments) in a deeply nested structure in order to support multiple projects

Additionally, when the `path` option is not used, the name of the directory for the `default` environment will be the normalized project name to provide a more meaningful default [shell](../../cli/reference.md#hatch-shell) prompt.

## Python resolution

Virtual environments necessarily require a parent installation of Python. The following rules determine how the parent is resolved.

The Python choice is determined by the [`python` option](#options) followed by the `HATCH_PYTHON` environment variable. If the choice is via the environment variable, then resolution stops and that path is used unconditionally.

The resolvers will be based on the [`python-sources` option](#options) and all resolved interpreters will ensure compatibility with the project's defined [Python support](../../config/metadata.md#python-support).

If a Python version has been chosen then each resolver will try to find an interpreter that satisfies that version.

If no version has been chosen, then each resolver will try to find a version that matches the version of Python that Hatch is currently running on. If not found then each resolver will try to find the highest compatible version.

!!! note
    Some external Python paths are considered unstable and are ignored during resolution. For example, if Hatch is installed via Homebrew then `sys.executable` will be ignored because the interpreter could change or be removed at any time.

!!! note
    When resolution finds a match using an [internally managed distribution](#internal-distributions) and an update is available, the latest distribution will automatically be downloaded before environment creation.

## Internal distributions

The following options are recognized for internal Python resolution.

!!! tip
    You can set custom sources for distributions by setting the `HATCH_PYTHON_SOURCE_<NAME>` environment variable where `<NAME>` is the uppercased version of the distribution name with periods replaced by underscores e.g. `HATCH_PYTHON_SOURCE_PYPY3_10`.

### CPython

| NAME |
| --- |
| `3.7` |
| `3.8` |
| `3.9` |
| `3.10` |
| `3.11` |
| `3.12` |
| `3.13` |

The source of distributions is the [python-build-standalone](https://github.com/indygreg/python-build-standalone) project.

Some distributions have [variants](https://gregoryszorc.com/docs/python-build-standalone/main/running.html) that may be configured with environment variables. Options may be combined.

| Option | Platforms | Allowed values |
| --- | --- | --- |
| `HATCH_PYTHON_VARIANT_CPU` | <ul><li>Linux</li></ul> | <ul><li><code>v1</code></li><li><code>v2</code></li><li><code>v3</code> (default)</li><li><code>v4</code></li></ul> |
| `HATCH_PYTHON_VARIANT_GIL` | <ul><li>Linux</li><li>Windows</li><li>macOS</li></ul> | <ul><li><code>freethreaded</code></li></ul> |

### PyPy

| NAME |
| --- |
| `pypy2.7` |
| `pypy3.9` |
| `pypy3.10` |

The source of distributions is the [PyPy](https://www.pypy.org) project.

## Troubleshooting

### macOS SIP

If you need to set linker environment variables like those starting with `DYLD_` or `LD_`, any executable secured by [System Integrity Protection](https://en.wikipedia.org/wiki/System_Integrity_Protection) that is invoked when [running commands](../../environment.md#command-execution) will not see those environment variable modifications as macOS strips those.

Hatch interprets such commands as shell commands but deliberately ignores such paths to protected shells. This workaround suffices for the majority of use cases but there are 2 situations in which it may not:

1. There are no unprotected `sh`, `bash`, `zsh`, nor `fish` executables found along PATH.
2. The desired executable is a project's [script](../../config/metadata.md#cli), and the [location](#location) of environments contains spaces or is longer than 124[^1] characters. In this case `pip` and other installers will create such an entry point with a shebang pointing to `/bin/sh` (which is protected) to avoid shebang limitations. Rather than changing the location, you could invoke the script as e.g. `python -m pytest` (if the project supports that method of invocation by shipping a `__main__.py`).

[^1]: The shebang length limit is [usually](https://web.archive.org/web/20221231220856/https://www.in-ulm.de/~mascheck/various/shebang/#length) 127 but 3 characters surround the executable path: `#!<EXE_PATH>\n`
</file>

<file path="docs/plugins/environment-collector/custom.md">
# Custom environment collector

-----

This is a custom class in a given Python file that inherits from the [EnvironmentCollectorInterface](reference.md#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface).

## Configuration

The environment collector plugin name is `custom`.

```toml config-example
[tool.hatch.env.collectors.custom]
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `path` | `hatch_plugins.py` | The path of the Python file |

## Example

```python tab="hatch_plugins.py"
    from hatch.env.collectors.plugin.interface import EnvironmentCollectorInterface


    class CustomEnvironmentCollector(EnvironmentCollectorInterface):
        ...
```

If multiple subclasses are found, you must define a function named `get_environment_collector` that returns the desired environment collector.

!!! note
    Any defined [PLUGIN_NAME](reference.md#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface.PLUGIN_NAME) is ignored and will always be `custom`.
</file>

<file path="docs/plugins/environment-collector/default.md">
# Default environment collector

-----

This adds the `default` environment with [type](../../config/environment/overview.md#type) set to [virtual](../environment/virtual.md) and will always be applied.

## Configuration

The environment collector plugin name is `default`.

```toml config-example
[tool.hatch.env.collectors.default]
```

## Options

There are no options available currently.
</file>

<file path="docs/plugins/environment-collector/reference.md">
# Environment collector plugins

-----

Environment collectors allow for dynamically modifying environments or adding environments beyond those defined in config. Users can override default values provided by each environment.

## Known third-party

- [hatch-mkdocs](https://github.com/mkdocs/hatch-mkdocs) - integrate [MkDocs](https://github.com/mkdocs/mkdocs) and infer dependencies into an env

## Installation

Any required environment collectors that are not built-in must be manually installed alongside Hatch or listed in the `tool.hatch.env.requires` array for automatic management:

```toml config-example
[tool.hatch.env]
requires = [
  "...",
]
```

::: hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface
    options:
      members:
      - PLUGIN_NAME
      - root
      - config
      - get_initial_config
      - finalize_config
      - finalize_environments
</file>

<file path="docs/plugins/metadata-hook/custom.md">
# Custom metadata hook

-----

This is a custom class in a given Python file that inherits from the [MetadataHookInterface](reference.md#hatchling.metadata.plugin.interface.MetadataHookInterface).

## Configuration

The metadata hook plugin name is `custom`.

```toml config-example
[tool.hatch.metadata.hooks.custom]
```

## Options

| Option | Default | Description |
| --- | --- | --- |
| `path` | `hatch_build.py` | The path of the Python file |

## Example

```python tab="hatch_build.py"
from hatchling.metadata.plugin.interface import MetadataHookInterface


class CustomMetadataHook(MetadataHookInterface):
    ...
```

If multiple subclasses are found, you must define a function named `get_metadata_hook` that returns the desired build hook.

!!! note
    Any defined [PLUGIN_NAME](reference.md#hatchling.metadata.plugin.interface.MetadataHookInterface.PLUGIN_NAME) is ignored and will always be `custom`.
</file>

<file path="docs/plugins/metadata-hook/reference.md">
# Metadata hook plugins

-----

Metadata hooks allow for the modification of [project metadata](../../config/metadata.md) after it has been loaded.

## Known third-party

- [hatch-docstring-description](https://github.com/flying-sheep/hatch-docstring-description) - set the project description using docstrings
- [hatch-fancy-pypi-readme](https://github.com/hynek/hatch-fancy-pypi-readme) - dynamically construct the README
- [hatch-nodejs-version](https://github.com/agoose77/hatch-nodejs-version) - uses fields from NodeJS `package.json` files
- [hatch-odoo](https://github.com/acsone/hatch-odoo) - determine dependencies based on manifests of Odoo add-ons
- [hatch-requirements-txt](https://github.com/repo-helper/hatch-requirements-txt) - read project dependencies from `requirements.txt` files
- [UniDep](https://github.com/basnijholt/unidep) - for unified `pip` and `conda` dependency management using a single `requirements.yaml` file for both 

::: hatchling.metadata.plugin.interface.MetadataHookInterface
    options:
      members:
      - PLUGIN_NAME
      - root
      - config
      - update
      - get_known_classifiers
</file>

<file path="docs/plugins/publisher/package-index.md">
# Index publisher

-----

See the documentation for [publishing](../../publish.md).

## Options

| Flag | Config name | Description |
| --- | --- | --- |
| `-r`/`--repo` | `repo` | The repository with which to publish artifacts |
| `-u`/`--user` | `user` | The user with which to authenticate |
| `-a`/`--auth` | `auth` | The credentials to use for authentication |
| `--ca-cert` | `ca-cert` | The path to a CA bundle |
| `--client-cert` | `client-cert` | The path to a client certificate, optionally containing the private key |
| `--client-key` | `client-key` | The path to the client certificate's private key |
| | `repos` | A table of named [repositories](#repositories) to their respective options |

## Configuration

The publisher plugin name is `index`.

```toml tab="config.toml"
[publish.index]
```

### Repositories

All top-level options can be overridden per repository using the `repos` table
with a required `url` attribute for each repository. The following shows the
default configuration:

```toml tab="config.toml"
[publish.index.repos.main]
url = "https://upload.pypi.org/legacy/"

[publish.index.repos.test]
url = "https://test.pypi.org/legacy/"
```

The `repo` and `repos` options have no effect.

### Confirmation prompt

You can require a confirmation prompt or use of the `-y`/`--yes` flag by
setting publishers' `disable` option to `true` in either Hatch's
[config file](../../config/hatch.md) or project-specific configuration (which takes
precedence):

```toml tab="config.toml"
[publish.index]
disable = true
```

```toml config-example
[tool.hatch.publish.index]
disable = true
```
</file>

<file path="docs/plugins/publisher/reference.md">
# Publisher plugins

-----

## Known third-party

- [hatch-aws-publisher](https://github.com/aka-raccoon/hatch-aws-publisher) - publish AWS Lambda functions with SAM

::: hatch.publish.plugin.interface.PublisherInterface
    options:
      members:
      - PLUGIN_NAME
      - app
      - root
      - cache_dir
      - project_config
      - plugin_config
      - disable
      - publish
</file>

<file path="docs/plugins/version-scheme/reference.md">
# Version scheme plugins

-----

## Known third-party

- [hatch-semver](https://github.com/Nagidal/hatch-semver) - uses [semantic versioning](https://semver.org)

::: hatchling.version.scheme.plugin.interface.VersionSchemeInterface
    options:
      members:
      - PLUGIN_NAME
      - root
      - config
      - validate_bump
      - update
</file>

<file path="docs/plugins/version-scheme/standard.md">
# Standard version scheme

-----

See the documentation for [versioning](../../version.md#updating).

## Configuration

The version scheme plugin name is `standard`.

```toml config-example
[tool.hatch.version]
scheme = "standard"
```

## Options

| Option | Description |
| --- | --- |
| `validate-bump` | When setting a specific version, this determines whether to check that the new version is higher than the original. The default is `true`. |
</file>

<file path="docs/plugins/version-source/code.md">
# Code version source

-----

## Updates

Setting the version is not supported.

## Configuration

The version source plugin name is `code`.

```toml config-example
[tool.hatch.version]
source = "code"
```

## Options

| Option | Description |
| --- | --- |
| `path` (required) | A relative path to a Python file or extension module that will be loaded |
| `expression` | A Python expression that when evaluated in the context of the loaded file returns the version. The default expression is simply `__version__`. |
| `search-paths` | A list of relative paths to directories that will be prepended to Python's search path |

## Missing imports

If the chosen path imports another module in your project, then you'll need to use absolute imports coupled with the `search-paths` option. For example, say you need to load the following file:

```python tab="src/pkg/\_\_init\_\_.py"
    from ._version import get_version

    __version__ = get_version()
```

You should change it to:

```python tab="src/pkg/\_\_init\_\_.py"
    from pkg._version import get_version

    __version__ = get_version()
```

and the configuration would become:

```toml config-example
[tool.hatch.version]
source = "code"
path = "src/pkg/__init__.py"
search-paths = ["src"]
```
</file>

<file path="docs/plugins/version-source/env.md">
# Environment version source

-----

Retrieves the version from an environment variable. This can be useful in build pipelines where the version is set by an external trigger.

## Updates

Setting the version is not supported.

## Configuration

The version source plugin name is `env`.

```toml config-example
[tool.hatch.version]
source = "env"
```

## Options

| Option | Description |
| --- | --- |
| `variable` (required) | The name of the environment variable |
</file>

<file path="docs/plugins/version-source/reference.md">
# Version source plugins

-----

## Known third-party

- [hatch-vcs](https://github.com/ofek/hatch-vcs) - uses your preferred version control system (like Git)
- [hatch-nodejs-version](https://github.com/agoose77/hatch-nodejs-version) - uses the `version` field of NodeJS `package.json` files
- [hatch-regex-commit](https://github.com/frankie567/hatch-regex-commit) - automatically creates a Git commit and tag after version bumping
- [versioningit](https://github.com/jwodder/versioningit) - determines version from Git or Mercurial tags, with customizable version formatting

::: hatchling.version.source.plugin.interface.VersionSourceInterface
    options:
      members:
      - PLUGIN_NAME
      - root
      - config
      - get_version_data
      - set_version
</file>

<file path="docs/plugins/version-source/regex.md">
# Regex version source

-----

See the documentation for [versioning](../../version.md).

## Updates

Setting the version is supported.

## Configuration

The version source plugin name is `regex`.

```toml config-example
[tool.hatch.version]
source = "regex"
```

## Options

| Option | Description |
| --- | --- |
| `path` (required) | A relative path to a file containing the project's version |
| `pattern` | A regular expression that has a named group called `version` that represents the version. The default pattern looks for a variable named `__version__` or `VERSION` that is set to a string containing the version, optionally prefixed with the lowercase letter `v`. |
</file>

<file path="docs/plugins/about.md">
# Plugins

-----

Hatch utilizes [pluggy](https://github.com/pytest-dev/pluggy) for its plugin functionality.

## Overview

All plugins provide registration hooks that return one or more classes that inherit from a particular [type](#types) interface.

Each registration hook must be decorated by Hatch's hook marker. For example, if you wanted to create a new kind of environment you could do:

```python tab="hooks.py"
from hatchling.plugin import hookimpl

from .plugin import SpecialEnvironment


@hookimpl
def hatch_register_environment():
    return SpecialEnvironment
```

The hooks can return a single class or a list of classes.

Every class must define an attribute called `PLUGIN_NAME` that users will select when they wish to use the plugin. So in the example above, the class might be defined like:

```python tab="plugin.py"
...
class SpecialEnvironment(...):
    PLUGIN_NAME = 'special'
    ...
```

## Project configuration

### Naming

It is recommended that plugin project names are prefixed with `hatch-`. For example, if you wanted to make a plugin that provides some functionality for a product named `foo` you might do:

```toml tab="pyproject.toml"
[project]
name = "hatch-foo"
```

### Discovery

You'll need to define your project as a [Python plugin](../config/metadata.md#plugins) for Hatch:

```toml tab="pyproject.toml"
[project.entry-points.hatch]
foo = "pkg.hooks"
```

The name of the plugin should be the project name (excluding any `hatch-` prefix) and the path should represent the module that contains the registration hooks.

### Classifier

Add [`Framework :: Hatch`](https://pypi.org/search/?c=Framework+%3A%3A+Hatch) to your project's [classifiers](../config/metadata.md#classifiers) to make it easy to search for Hatch plugins:

```toml tab="pyproject.toml"
[project]
classifiers = [
  ...
  "Framework :: Hatch",
  ...
]
```

## Types

### Hatchling

These are all involved in building projects and therefore any defined dependencies are automatically installed in each build environment.

- [Builder](builder/reference.md)
- [Build hook](build-hook/reference.md)
- [Metadata hook](metadata-hook/reference.md)
- [Version source](version-source/reference.md)
- [Version scheme](version-scheme/reference.md)

### Hatch

These must be installed in the same environment as Hatch itself.

- [Environment](environment/reference.md)
- [Environment collector](environment-collector/reference.md)
- [Publisher](publisher/reference.md)
</file>

<file path="docs/plugins/utilities.md">
# Plugin utilities

-----

::: hatchling.builders.utils.get_reproducible_timestamp
    options:
      show_root_full_path: true

::: hatchling.builders.config.BuilderConfig
    options:
      show_source: false
      members:
      - directory
      - ignore_vcs
      - reproducible
      - dev_mode_dirs
      - versions
      - dependencies
      - default_include
      - default_exclude
      - default_packages
      - default_only_include

::: hatchling.bridge.app.Application
    options:
      show_source: false
      members:
      - abort
      - verbosity
      - display_debug
      - display_error
      - display_info
      - display_success
      - display_waiting
      - display_warning

::: hatch.utils.platform.Platform
    options:
      show_source: false
      members:
      - format_for_subprocess
      - run_command
      - check_command
      - check_command_output
      - capture_process
      - exit_with_command
      - default_shell
      - modules
      - home
      - name
      - display_name
      - windows
      - macos
      - linux

::: hatch.env.context.EnvironmentContextFormatter
    options:
      show_source: false
      members:
      - formatters

::: hatch.env.plugin.interface.FileSystemContext
    options:
      show_source: false
      members:
      - env
      - sync_local
      - sync_env
      - local_path
      - env_path
      - join
</file>

<file path="docs/tutorials/environment/basic-usage.md">
# Managing environments

-----

Hatch [environments](../../environment.md) are isolated workspaces that can be used for project tasks including running tests, building documentation and running code formatters and linters.

## The default environment

When you start using Hatch, you can create the `default` environment. To do this use the [`env create`](../../cli/reference.md#hatch-env-create) command:

```
hatch env create
```

This will not only create will the `default` environment for you to work in but will also install your project in [dev mode](../../config/environment/overview.md#dev-mode) in this `default` environment.

!!! tip
    You never need to manually create environments as [spawning a shell](#launching-a-shell-within-a-specific-environment) or [running commands](#run-commands-within-a-specific-environment) within one will automatically trigger creation.

### Using the default environment

Hatch will always use the `default` environment if an environment is not chosen explicitly when [running a command](../../environment.md#command-execution).

For instance, the following shows how to get version information for the Python in use.

```console
$ hatch run python -V
Python 3.12.1
```

### Configure the default environment

You can customize the tools that are installed into the `default` environment by adding a table called `tool.hatch.envs.default` to your `pyproject.toml` file. Below is an example of adding the [dependencies](../../config/environment/overview.md#dependencies) `pydantic` and `numpy` to the `default` environment.

```toml config-example
[tool.hatch.envs.default]
dependencies = [
  "pydantic",
  "numpy",
]
```

You can declare versions for your dependencies as well within this configuration.

```toml config-example
[tool.hatch.envs.default]
dependencies = [
  "pydantic>=2.0",
  "numpy",
]
```

## Create custom environment

You can create custom environments in Hatch by adding a section to your `pyproject.toml` file `[tool.hatch.envs.<ENV_NAME>]`. Below you define an environment called `test` and you add the `pytest` and `pytest-cov` dependencies to that environment's configuration.

```toml config-example
[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "pytest-cov"
]
```

The first time that you call the test environment, Hatch will:

1. Create the environment
2. Install your project into that environment in [dev mode](../../config/environment/overview.md#dev-mode) (by default) along with its [dependencies](../../config/metadata.md#dependencies).
3. Install the environment's [dependencies](../../config/environment/overview.md#dependencies)

## Run commands within a specific environment

Hatch offers a unique environment feature that allows you run a specific command within a specific environment rather than needing to activate the environment as you would using a tool such as [Conda](https://conda.org) or [venv](https://docs.python.org/3/library/venv.html).

For instance, if you define an environment called `test` that contains the dependencies from the previous section, you can run the `pytest` command from the `test` environment using the syntax:

```
hatch run <ENV_NAME>:command
```

To access the `test` environment and run `pytest`, you can run:

```console
$ hatch run test:pytest
============================== test session starts ===============================
platform darwin -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0
rootdir: /your/path/to/yourproject
collected 0 items
```

!!! note
    `test:pytest` represents the name of the environment to call (`test`) and the command to run (`pytest`).

## View current environments

Above you defined and created a new test environment in your `pyproject.toml` file. You can now use the [`env show`](../../cli/reference.md#hatch-env-show) command to see both the currently created environments and the dependencies in each environment.

```
$ hatch env show
             Standalone
┏━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━┓
┃ Name    ┃ Type    ┃ Dependencies ┃
┡━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━┩
│ default │ virtual │              │
├─────────┼─────────┼──────────────┤
│ test    │ virtual │ pytest       │
│         │         │ pytest-cov   │
└─────────┴─────────┴──────────────┘
```

!!! note
    The output may have more columns depending on your environment configuration.

## Locating environments

To see where your current environment is located you can use the [`env find`](../../cli/reference.md#hatch-env-find) command.

```
$ hatch env find test
/your/path/Application Support/hatch/env/virtual/yourproject/twO2iQR3/test
```

!!! note
    That path is what you would see on macOS but differs for each platform, and is [configurable](../../plugins/environment/virtual.md#location).

## Launching a shell within a specific environment

If you wish to [launch a shell](../../environment.md#entering-environments) for a specific environment that you have created, like the previous `test` environment, you can use:

```
hatch -e test shell
```

Once the environment is active, you can run commands like you would in any Python environment.

Notice below that when running `pip list` in the test environment, you can see:

1. That your package is installed in editable mode.
2. That the environment contains both `pytest` and `pytest-cov` as specified above in the `pyproject.toml` file.

```
$ pip list
Package     Version Editable project location
----------- ------- ----------------------------------------------------
coverage    7.4.1
iniconfig   2.0.0
packaging   23.2
pip         23.3.1
pluggy      1.4.0
pytest      8.0.0
pytest-cov  4.1.0
yourproject 0.1.0  /your/path/to/yourproject
```

## Conda environments

If you prefer to use [Conda](https://conda.org) environments with Hatch, you can check out the [hatch-conda plugin](https://github.com/OldGrumpyViking/hatch-conda).
</file>

<file path="docs/tutorials/python/manage.md">
# Managing Python distributions

-----

The [`python`](../../cli/reference.md#hatch-python) command group provides a set of commands to manage Python distributions that may be used by other tools.

!!! note
    When using environments, manual management is not necessary since by default Hatch will [automatically](../../plugins/environment/virtual.md#python-resolution) download and manage Python distributions internally when a requested version cannot be found.

## Location

There are two ways to control where Python distributions are installed. Both methods make it so that each installed distribution is placed in a subdirectory of the configured location named after the distribution.

1. The globally configured [default directory](../../config/hatch.md#python-installations) for Python installations.
2. The `-d`/`--dir` option of every [`python`](../../cli/reference.md#hatch-python) subcommand, which takes precedence over the default directory.

## Installation

To install a Python distribution, use the [`python install`](../../cli/reference.md#hatch-python-install) command. For example:

```
hatch python install 3.12
```

This will:

1. Download the `3.12` Python distribution
2. Unpack it into a directory named `3.12` within the configured [default directory](../../config/hatch.md#python-installations) for Python installations
3. Add the installation to the user PATH

Now its `python` executable can be used by you or other tools.

!!! note
    For PATH changes to take effect in the current shell, you will need to restart it.

### Multiple

You can install multiple Python distributions at once by providing multiple distribution names. For example:

```
hatch python install 3.12 3.11 pypy3.10
```

If you would like to install all available Python distributions that are compatible with your system, use `all` as the distribution name:

```
hatch python install all
```

!!! tip
    The commands for [updating](#updates) and [removing](#removal) also support this functionality.

### Private

By default, installing Python distributions will add them to the user PATH. To disable this behavior, use the `--private` flag like so:

```
hatch python install 3.12 --private
```

This when combined with the [directory option](#location) can be used to create private, isolated installations.

## Listing distributions

You can see all of the available and installed Python distributions by using the [`python show`](../../cli/reference.md#hatch-python-show) command. For example, if you already installed the `3.12` distribution you may see something like this:

```
$ hatch python show
    Installed
┏━━━━━━┳━━━━━━━━━┓
┃ Name ┃ Version ┃
┡━━━━━━╇━━━━━━━━━┩
│ 3.12 │ 3.12.7  │
└──────┴─────────┘
      Available
┏━━━━━━━━━━┳━━━━━━━━━┓
┃ Name     ┃ Version ┃
┡━━━━━━━━━━╇━━━━━━━━━┩
│ 3.7      │ 3.7.9   │
├──────────┼─────────┤
│ 3.8      │ 3.8.20  │
├──────────┼─────────┤
│ 3.9      │ 3.9.20  │
├──────────┼─────────┤
│ 3.10     │ 3.10.15 │
├──────────┼─────────┤
│ 3.11     │ 3.11.10 │
├──────────┼─────────┤
│ 3.13     │ 3.13.0  │
├──────────┼─────────┤
│ pypy2.7  │ 7.3.15  │
├──────────┼─────────┤
│ pypy3.9  │ 7.3.15  │
├──────────┼─────────┤
│ pypy3.10 │ 7.3.15  │
└──────────┴─────────┘
```

## Finding installations

The Python executable of an installed distribution can be found by using the [`python find`](../../cli/reference.md#hatch-python-find) command. For example:

```
$ hatch python find 3.12
/home/.local/share/hatch/pythons/3.12/python/bin/python3
```

You can instead output its parent directory by using the `-p`/`--parent` flag:

```
$ hatch python find 3.12 --parent
/home/.local/share/hatch/pythons/3.12/python/bin
```

This is useful when other tools do not need to use the executable directly but require knowing the directory containing it.

## Updates

To update installed Python distributions, use the [`python update`](../../cli/reference.md#hatch-python-update) command. For example:

```
hatch python update 3.12 3.11 pypy3.10
```

When there are no updates available for a distribution, a warning will be displayed:

```
$ hatch python update 3.12
The latest version is already installed: 3.12.7
```

## Removal

To remove installed Python distributions, use the [`python remove`](../../cli/reference.md#hatch-python-remove) command. For example:

```
hatch python remove 3.12 3.11 pypy3.10
```
</file>

<file path="docs/tutorials/testing/overview.md">
# Testing projects

-----

The [`test`](../../cli/reference.md#hatch-test) command ([by default](../../config/internal/testing.md#customize-environment)) uses [pytest](https://github.com/pytest-dev/pytest) with select plugins and [coverage.py](https://github.com/nedbat/coveragepy). View the [testing configuration](../../config/internal/testing.md) for more information.

The majority of projects can be fully tested this way without the need for custom [environments](../../config/environment/overview.md).

## Passing arguments

When you run the `test` command without any arguments, `tests` is passed as the [default argument](../../config/internal/testing.md#default-arguments) to `pytest` (this assumes that you have a `tests` directory). For example, the following command invocation:

```
hatch test
```

would be translated roughly to:

```
pytest tests
```

You can pass arguments to `pytest` by appending them to the `test` command. For example, the following command invocation:

```
hatch test -vv tests/test_foo.py::test_bar
```

would be translated roughly to:

```
pytest -vv tests/test_foo.py::test_bar
```

You can force the treatment of arguments as positional by using the `--` separator, especially useful when built-in flags of the `test` command conflict with those of `pytest`, such as the `--help` flag. For example, the following command invocation:

```
hatch test -r -- -r fE -- tests
```

would be translated roughly to:

```
pytest -r fE -- tests
```

!!! note
    It's important to ensure that `pytest` receives an argument instructing what to run/where to locate tests. It's default behavior is `.` meaning that it will exhaustively search for tests in the current directory. This can not just be slow but also lead to unexpected behavior.

## Environment selection

### Single environment

If no environment options are selected, the `test` command will only run tests in the first defined environment that either already exists or is compatible. Additionally, the checking order will prioritize environments that define a [version of Python](../../config/environment/overview.md#python-version) that matches the interpreter that Hatch is running on.

For example, if you overrode the [default matrix](../../config/internal/testing.md#matrix) as follows:

```toml config-example
[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.12", "3.11"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.11"]
feature = ["foo", "bar"]
```

the expanded environments would normally be:

```
hatch-test.py3.12
hatch-test.py3.11
hatch-test.py3.11-foo
hatch-test.py3.11-bar
```

If you install Hatch on Python 3.11, the checking order would be:

```
hatch-test.py3.11
hatch-test.py3.11-foo
hatch-test.py3.11-bar
hatch-test.py3.12
```

!!! note
    If you installed Hatch with an official [installer](../../install.md#installers) or are using one of the [standalone binaries](../../install.md#standalone-binaries), the version of Python that Hatch runs on is out of your control. If you are relying on the single environment resolution behavior, consider [explicitly selecting environments](#specific-environments) based on the Python version instead.

### All environments

You can run tests in all compatible environments by using the `--all` flag. For example, say you defined the matrix and [overrides](../../config/environment/advanced.md#option-overrides) as follows:

```toml config-example
[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.12", "3.11"]
feature = ["foo", "bar"]

[tool.hatch.envs.hatch-test.overrides]
matrix.feature.platforms = [
  { value = "linux", if = ["foo", "bar"] },
  { value = "windows", if = ["foo"] },
  { value = "macos", if = ["bar"] },
]
```

The following table shows the environments in which tests would be run:

| Environment | Linux | Windows | macOS |
| --- | --- | --- | --- |
| `hatch-test.py3.12-foo` | :white_check_mark: | :white_check_mark: | :x: |
| `hatch-test.py3.12-bar` | :white_check_mark: | :x: | :white_check_mark: |
| `hatch-test.py3.11-foo` | :white_check_mark: | :white_check_mark: | :x: |
| `hatch-test.py3.11-bar` | :white_check_mark: | :x: | :white_check_mark: |

### Specific environments

You can select subsets of environments by using the `--include`/`-i` and `--exclude`/`-x` options. These options may be used to include or exclude certain matrix variables, optionally followed by specific comma-separated values, and may be selected multiple times.

For example, say you defined the matrix as follows:

```toml config-example
[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.12", "3.11"]
feature = ["foo", "bar", "baz"]
```

If you wanted to run tests in all environments that have Python 3.12 and either the `foo` or `bar` feature, you could use the following command invocation:

```
hatch test -i python=3.12 -i feature=foo,bar
```

Alternatively, we could exclude the `baz` feature to achieve the same result:

```
hatch test -i python=3.12 -x feature=baz
```

!!! tip
    Since selecting the version of Python is a common use case, you can use the `--python`/`-py` option as a shorthand. For example, the previous commands could have been written as:

    ```
    hatch test -py 3.12 -i feature=foo,bar
    hatch test -py 3.12 -x feature=baz
    ```

## Measuring code coverage

You can enable [code coverage](https://github.com/nedbat/coveragepy) by using the `--cover` flag. For example, the following command invocation:

```
hatch test --cover
```

would be translated roughly to:

```
coverage run -m pytest tests
```

After tests run in all of the [selected environments](#environment-selection), the coverage data is combined and a report is shown. The `--cover-quiet` flag can be used to suppress the report and implicitly enables the `--cover` flag:

```
hatch test --cover-quiet
```

!!! note
    Coverage data files are generated at the root of the project. Be sure to exclude them from version control with the following glob-style pattern:

    ```
    .coverage*
    ```

## Retry failed tests

You can [retry](https://github.com/pytest-dev/pytest-rerunfailures) failed tests with the `--retries` option:

```
hatch test --retries 2
```

If a test fails every time and the number of retries is set to `2`, the test will be run a total of three times.

You can also set the number of seconds to wait between retries with the `--retry-delay` option:

```
hatch test --retries 2 --retry-delay 1
```

## Parallelize test execution

You can [parallelize](https://github.com/pytest-dev/pytest-xdist) test execution with the `--parallel`/`-p` flag:

```
hatch test --parallel
```

This distributes tests within an environment across multiple workers. The number of workers corresponds to the number of logical rather than physical CPUs that are available.

## Randomize test order

You can [randomize](https://github.com/pytest-dev/pytest-randomly) the order of tests with the `--randomize`/`-r` flag:

```
hatch test --randomize
```
</file>

<file path="docs/build.md">
# Builds

-----

## Configuration

Builds are [configured](config/build.md) using the `tool.hatch.build` table. Every [target](config/build.md#build-targets) is defined by a section within `tool.hatch.build.targets`, for example:

```toml config-example
[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/docs",
]

[tool.hatch.build.targets.wheel]
packages = ["src/foo"]
```

## Building

Invoking the [`build`](cli/reference.md#hatch-build) command without any arguments will build the [sdist](plugins/builder/sdist.md) and [wheel](plugins/builder/wheel.md) targets:

```console
$ hatch build
[sdist]
dist/hatch_demo-1rc0.tar.gz

[wheel]
dist/hatch_demo-1rc0-py3-none-any.whl
```

To only build specific targets, use the `-t`/`--target` option:

```console
$ hatch build -t wheel
[wheel]
dist/hatch_demo-1rc0-py3-none-any.whl
```

If the target supports multiple [versions](config/build.md#versions), you can specify the exact versions to build by appending a colon followed by the desired versions separated by commas:

```console
$ hatch -v build -t wheel:standard
[wheel]
Building `wheel` version `standard`
dist/hatch_demo-1rc0-py3-none-any.whl
```

## Packaging ecosystem

Hatch [complies](config/build.md#build-system) with modern Python packaging specs and therefore your projects can be used by other tools with Hatch serving as just the build backend.

So you could use [tox](https://github.com/tox-dev/tox) as an alternative to Hatch's [environment management](environment.md), or [cibuildwheel](https://github.com/pypa/cibuildwheel) to distribute packages for every platform, and they both will transparently use Hatch without any extra modification.
</file>

<file path="docs/environment.md">
# Environments

-----

[Environments](config/environment/overview.md) are designed to allow for isolated workspaces for testing, building documentation, or anything else projects need.

Unless an environment is [chosen explicitly](#selection), Hatch will use the `default` environment.

!!! tip
    For a more comprehensive walk-through, see the [Basic usage](tutorials/environment/basic-usage.md) tutorial.

## Creation

You can create environments by using the [`env create`](cli/reference.md#hatch-env-create) command. Let's enter the directory of the project we created in the [setup phase](intro.md#new-project):

```console
$ hatch env create
Creating environment: default
Installing project in development mode
Syncing dependencies
```

!!! tip
    You never need to manually create environments as [spawning a shell](#entering-environments) or [running commands](#command-execution) within one will automatically trigger creation.

## Entering environments

You can spawn a [shell](config/hatch.md#shell) within an environment by using the [`shell`](cli/reference.md#hatch-shell) command.

```console
$ hatch shell
(hatch-demo) $
```

Now confirm the project has been installed:

```console
(hatch-demo) $ pip show hatch-demo
Name: hatch-demo
Version: 0.0.1
...
```

Finally, see where your environment's Python is [located](config/hatch.md#environments):

```console
(hatch-demo) $ python -c "import sys;print(sys.executable)"
...
```

You can type `exit` to leave the environment.

## Command execution

The [`run`](cli/reference.md#hatch-run) command allows you to execute commands in an environment as if you had already entered it. For example, running the following command will output the same path as before:

```
hatch run python -c "import sys;print(sys.executable)"
```

!!! tip
    Be sure to check out how to define [scripts](config/environment/overview.md#scripts) for your project.

## Dependencies

Hatch ensures that environments are always compatible with the currently defined [project dependencies](config/metadata.md#dependencies) (if [installed](config/environment/overview.md#skip-install) and in [dev mode](config/environment/overview.md#dev-mode)) and [environment dependencies](config/environment/overview.md#dependencies).

To add `cowsay` as a dependency, open `pyproject.toml` and add it to the [`dependencies`](config/metadata.md#dependencies) array:

```toml tab="pyproject.toml"
[project]
...
dependencies = [
  "cowsay"
]
```

This dependency will be installed the next time you [spawn a shell](#entering-environments) or [run a command](#command-execution). For example:

```console
$ hatch run cowsay -t "Hello, world!"
Syncing dependencies
  _____________
| Hello, world! |
  =============
             \
              \
                ^__^
                (oo)\_______
                (__)\       )\/\
                    ||----w |
                    ||     ||
```

!!! note
    The `Syncing dependencies` status will display temporarily when Hatch updates environments in response to any dependency changes that you make.

## Selection

You can select which environment to enter or run commands in by using the `-e`/`--env` [root option](cli/reference.md#hatch) or by setting the `HATCH_ENV` environment variable.

The [`run`](cli/reference.md#hatch-run) command allows for more explicit selection by prepending `<ENV_NAME>:` to commands. For example, if you had the following configuration:

```toml config-example
[tool.hatch.envs.docs]
dependencies = [
  "mkdocs"
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"
```

you could then serve your documentation by running:

```
hatch run docs:serve
```

!!! tip
    If you've already [entered](#entering-environments) an environment, commands will target it by default.

## Matrix

Every environment can define its own set of [matrices](config/environment/advanced.md#matrix):

```toml config-example
[tool.hatch.envs.test]
dependencies = [
  "pytest"
]

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11"]
version = ["42", "3.14"]

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]
version = ["9000"]
feature = ["foo", "bar"]
```

Using the [`env show`](cli/reference.md#hatch-env-show) command would then display:

```console
$ hatch env show --ascii
     Standalone
+---------+---------+
| Name    | Type    |
+=========+=========+
| default | virtual |
+---------+---------+
                        Matrices
+------+---------+----------------------+--------------+
| Name | Type    | Envs                 | Dependencies |
+======+=========+======================+==============+
| test | virtual | test.py3.10-42       | pytest       |
|      |         | test.py3.10-3.14     |              |
|      |         | test.py3.11-42       |              |
|      |         | test.py3.11-3.14     |              |
|      |         | test.py3.11-9000-foo |              |
|      |         | test.py3.11-9000-bar |              |
|      |         | test.py3.12-9000-foo |              |
|      |         | test.py3.12-9000-bar |              |
+------+---------+----------------------+--------------+
```

## Removal

You can remove a single environment or environment matrix by using the [`env remove`](cli/reference.md#hatch-env-remove) command or all of a project's environments by using the [`env prune`](cli/reference.md#hatch-env-prune) command.
</file>

<file path="docs/index.md">
# Hatch

<div class="grid" markdown>

![Hatch logo](assets/images/logo.svg){ role="img" }

| | |
| --- | --- |
| CI/CD | [![CI - Test](https://github.com/pypa/hatch/actions/workflows/test.yml/badge.svg){ loading=lazy .off-glb }](https://github.com/pypa/hatch/actions/workflows/test.yml) [![CD - Build Hatch](https://github.com/pypa/hatch/actions/workflows/build-hatch.yml/badge.svg){ loading=lazy .off-glb }](https://github.com/pypa/hatch/actions/workflows/build-hatch.yml) [![CD - Build Hatchling](https://github.com/pypa/hatch/actions/workflows/build-hatchling.yml/badge.svg){ loading=lazy .off-glb }](https://github.com/pypa/hatch/actions/workflows/build-hatchling.yml) |
| Docs | [![Docs - Release](https://github.com/pypa/hatch/actions/workflows/docs-release.yml/badge.svg){ loading=lazy .off-glb }](https://github.com/pypa/hatch/actions/workflows/docs-release.yml) [![Docs - Dev](https://github.com/pypa/hatch/actions/workflows/docs-dev.yml/badge.svg){ loading=lazy .off-glb }](https://github.com/pypa/hatch/actions/workflows/docs-dev.yml) |
| Package | [![PyPI - Version](https://img.shields.io/pypi/v/hatch.svg?logo=pypi&label=PyPI&logoColor=gold){ loading=lazy .off-glb }](https://pypi.org/project/hatch/) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/hatch.svg?logo=python&label=Python&logoColor=gold){ loading=lazy .off-glb }](https://pypi.org/project/hatch/) [![PyPI - Installs](https://img.shields.io/pypi/dm/hatchling.svg?color=blue&label=Installs&logo=pypi&logoColor=gold){ loading=lazy .off-glb }](https://pypi.org/project/hatch/) [![Release - Downloads](https://img.shields.io/github/downloads/pypa/hatch/total?label=Downloads){ loading=lazy .off-glb }](https://github.com/pypa/hatch/releases) |
| Meta | [![Hatch project](https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg){ loading=lazy .off-glb }](https://github.com/pypa/hatch) [![linting - Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json){ loading=lazy .off-glb }](https://github.com/astral-sh/ruff) [![types - Mypy](https://img.shields.io/badge/types-Mypy-blue.svg){ loading=lazy .off-glb }](https://github.com/python/mypy) [![License - MIT](https://img.shields.io/badge/license-MIT-9400d3.svg){ loading=lazy .off-glb }](https://spdx.org/licenses/) [![GitHub Sponsors](https://img.shields.io/github/sponsors/ofek?logo=GitHub%20Sponsors&style=social){ loading=lazy .off-glb }](https://github.com/sponsors/ofek) |

</div>

-----

Hatch is a modern, extensible Python project manager. See the [Why Hatch?](why.md) page for more information.

<div class="grid cards" markdown>

-   :material-hammer-wrench:{ .lg .middle } __Build system__

    ---

    Reproducible builds by default with a rich ecosystem of plugins

    [:octicons-arrow-right-24: Configure builds](config/build.md#build-system)

-   :material-lock:{ .lg .middle } __Environments__

    ---

    Robust environment management with support for custom scripts and UV

    [:octicons-arrow-right-24: Getting started](environment.md)

-   :material-language-python:{ .lg .middle } __Python management__

    ---

    Choose between easy manual installations or automatic as part of environments

    [:octicons-arrow-right-24: Try it](tutorials/python/manage.md)

-   :octicons-shield-check-24:{ .lg .middle } __Testing__

    ---

    Test execution with known best practices

    [:octicons-arrow-right-24: Run](tutorials/testing/overview.md)

-   :material-magnify-scan:{ .lg .middle } __Static analysis__

    ---

    Static analysis backed by Ruff with up-to-date, sane defaults

    [:octicons-arrow-right-24: Learn](config/internal/static-analysis.md)

-   :material-console-line:{ .lg .middle } __Script runner__

    ---

    Execute Python scripts with specific dependencies and Python versions

    [:octicons-arrow-right-24: Execute](how-to/run/python-scripts.md)

-   :material-publish:{ .lg .middle } __Publishing__

    ---

    Easily upload to PyPI or other indices

    [:octicons-arrow-right-24: See how](publish.md)

-   :octicons-number-24:{ .lg .middle } __Versioning__

    ---

    Streamlined workflow for bumping versions

    [:octicons-arrow-right-24: Managing versions](version.md)

-   :octicons-project-template-24:{ .lg .middle } __Project generation__

    ---

    Create new projects from templates with known best practices

    [:octicons-arrow-right-24: Project setup](intro.md#setup)

-   :material-speedometer:{ .lg .middle } __Responsive CLI__

    ---

    Hatch is up to 3x faster than equivalent tools

    [:octicons-arrow-right-24: CLI reference](cli/about.md)

</div>

## License

Hatch is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.

## Navigation

Documentation for specific `MAJOR.MINOR` versions can be chosen by using the dropdown on the top of every page. The `dev` version reflects changes that have not yet been released.

Also, desktop readers can use special keyboard shortcuts:

| Keys | Action |
| --- | --- |
| <ul><li><kbd>,</kbd> (comma)</li><li><kbd>p</kbd></li></ul> | Navigate to the "previous" page |
| <ul><li><kbd>.</kbd> (period)</li><li><kbd>n</kbd></li></ul> | Navigate to the "next" page |
| <ul><li><kbd>/</kbd></li><li><kbd>s</kbd></li></ul> | Display the search modal |
</file>

<file path="docs/install.md">
# Installation

-----

## GitHub Actions

```yaml
- name: Install Hatch
  uses: pypa/hatch@install
```

Refer to the [official action](https://github.com/pypa/hatch/tree/install) for more information.

## Installers

=== "macOS"
    === "GUI installer"
        1. In your browser, download the `.pkg` file: [hatch-universal.pkg](https://github.com/pypa/hatch/releases/latest/download/hatch-universal.pkg)
        2. Run your downloaded file and follow the on-screen instructions.
        3. Restart your terminal.
        4. To verify that the shell can find and run the `hatch` command in your `PATH`, use the following command.

            ```
            $ hatch --version
            <HATCH_LATEST_VERSION>
            ```
    === "Command line installer"
        1. Download the file using the `curl` command. The `-o` option specifies the file name that the downloaded package is written to. In this example, the file is written to `hatch-universal.pkg` in the current directory.

            ```
            curl -Lo hatch-universal.pkg https://github.com/pypa/hatch/releases/latest/download/hatch-universal.pkg
            ```
        2. Run the standard macOS [`installer`](https://ss64.com/osx/installer.html) program, specifying the downloaded `.pkg` file as the source. Use the `-pkg` parameter to specify the name of the package to install, and the `-target /` parameter for the drive in which to install the package. The files are installed to `/usr/local/hatch`, and an entry is created at `/etc/paths.d/hatch` that instructs shells to add the `/usr/local/hatch` directory to. You must include sudo on the command to grant write permissions to those folders.

            ```
            sudo installer -pkg ./hatch-universal.pkg -target /
            ```
        3. Restart your terminal.
        4. To verify that the shell can find and run the `hatch` command in your `PATH`, use the following command.

            ```
            $ hatch --version
            <HATCH_LATEST_VERSION>
            ```

=== "Windows"
    === "GUI installer"
        1. In your browser, download one the `.msi` files:
              - [hatch-x64.msi](https://github.com/pypa/hatch/releases/latest/download/hatch-x64.msi)
        2. Run your downloaded file and follow the on-screen instructions.
        3. Restart your terminal.
        4. To verify that the shell can find and run the `hatch` command in your `PATH`, use the following command.

            ```
            $ hatch --version
            <HATCH_LATEST_VERSION>
            ```
    === "Command line installer"
        1. Download and run the installer using the standard Windows [`msiexec`](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec) program, specifying one of the `.msi` files as the source. Use the `/passive` and `/i` parameters to request an unattended, normal installation.

            === "x64"
                ```
                msiexec /passive /i https://github.com/pypa/hatch/releases/latest/download/hatch-x64.msi
                ```
            === "x86"
                ```
                msiexec /passive /i https://github.com/pypa/hatch/releases/latest/download/hatch-x86.msi
                ```
        2. Restart your terminal.
        3. To verify that the shell can find and run the `hatch` command in your `PATH`, use the following command.

            ```
            $ hatch --version
            <HATCH_LATEST_VERSION>
            ```

## Standalone binaries

After downloading the archive corresponding to your platform and architecture, extract the binary to a directory that is on your PATH and rename to `hatch`.

=== "Linux"
    - [hatch-aarch64-unknown-linux-gnu.tar.gz](https://github.com/pypa/hatch/releases/latest/download/hatch-aarch64-unknown-linux-gnu.tar.gz)
    - [hatch-x86_64-unknown-linux-gnu.tar.gz](https://github.com/pypa/hatch/releases/latest/download/hatch-x86_64-unknown-linux-gnu.tar.gz)
    - [hatch-x86_64-unknown-linux-musl.tar.gz](https://github.com/pypa/hatch/releases/latest/download/hatch-x86_64-unknown-linux-musl.tar.gz)
    - [hatch-powerpc64le-unknown-linux-gnu.tar.gz](https://github.com/pypa/hatch/releases/latest/download/hatch-powerpc64le-unknown-linux-gnu.tar.gz)

=== "macOS"
    - [hatch-aarch64-apple-darwin.tar.gz](https://github.com/pypa/hatch/releases/latest/download/hatch-aarch64-apple-darwin.tar.gz)
    - [hatch-x86_64-apple-darwin.tar.gz](https://github.com/pypa/hatch/releases/latest/download/hatch-x86_64-apple-darwin.tar.gz)

=== "Windows"
    - [hatch-x86_64-pc-windows-msvc.zip](https://github.com/pypa/hatch/releases/latest/download/hatch-x86_64-pc-windows-msvc.zip)
    - [hatch-i686-pc-windows-msvc.zip](https://github.com/pypa/hatch/releases/latest/download/hatch-i686-pc-windows-msvc.zip)

## pip

Hatch is available on PyPI and can be installed with [pip](https://github.com/pypa/pip).

```
pip install hatch
```

!!! warning
    This method modifies the Python environment in which you choose to install. Consider instead using [pipx](#pipx) to avoid dependency conflicts.

## pipx

[pipx](https://github.com/pypa/pipx) allows for the global installation of Python applications in isolated environments.

```
pipx install hatch
```

## Homebrew

See the [formula](https://formulae.brew.sh/formula/hatch) for more details.

```
brew install hatch
```

## Conda

See the [feedstock](https://github.com/conda-forge/hatch-feedstock) for more details.

```
conda install -c conda-forge hatch
```

or with [mamba](https://github.com/mamba-org/mamba):

```
mamba install hatch
```

!!! warning
    This method modifies the Conda environment in which you choose to install. Consider instead using [pipx](#pipx) or [condax](https://github.com/mariusvniekerk/condax) to avoid dependency conflicts.

## MacPorts

See the [port](https://ports.macports.org/port/hatch/) for more details.

```
sudo port install hatch
```

## Fedora

The minimum supported version is 37, currently in development as [Rawhide](https://docs.fedoraproject.org/en-US/releases/rawhide/).

```
sudo dnf install hatch
```

## Void Linux

```
xbps-install hatch
```

## Build system availability

Hatchling is Hatch's [build backend](config/build.md#build-system) which you will never need to install manually. See its [changelog](history/hatchling.md) for version information.

[![Packaging status](https://repology.org/badge/vertical-allrepos/hatchling.svg){ loading=lazy .off-glb }](https://repology.org/project/hatchling/versions)
</file>

<file path="docs/intro.md">
# Introduction

-----

## Setup

Projects can be set up for use by Hatch using the [`new`](cli/reference.md#hatch-new) command.

### New project

Let's say you want to create a project named `Hatch Demo`. You would run:

```
hatch new "Hatch Demo"
```

This would create the following structure in your current working directory:

```
hatch-demo
├── src
│   └── hatch_demo
│       ├── __about__.py
│       └── __init__.py
├── tests
│   └── __init__.py
├── LICENSE.txt
├── README.md
└── pyproject.toml
```

!!! tip
    There are many ways to [customize](config/project-templates.md) project generation.

### Existing project

To initialize an existing project, enter the directory containing the project and run the following:

```
hatch new --init
```

If your project has a `setup.py` file the command will automatically migrate `setuptools` configuration for you. Otherwise, this will interactively guide you through the setup process.

## Project metadata

Next you'll want to define more of your project's [metadata](config/metadata.md) located in the `pyproject.toml` file. You can specify things like its [license](config/metadata.md#license), the [supported versions of Python](config/metadata.md#python-support), and [URLs](config/metadata.md#urls) referring to various parts of your project, like documentation.

## Dependencies

The last step of the setup process is to define any [dependencies](config/dependency.md) that you'd like your project to begin with.

## Configuration

All project-specific configuration recognized by Hatch can be defined in either the `pyproject.toml` file, or a file named `hatch.toml` where options are not contained within the `tool.hatch` table:

```toml config-example
[tool.hatch]
option = "..."

[tool.hatch.table1]
option = "..."

[tool.hatch.table2]
option = "..."
```

Top level keys in the latter file take precedence when defined in both.

!!! tip
    If you want to make your file more compact, you can use [dotted keys](https://toml.io/en/v1.0.0#table), turning the above example into:

    ```toml config-example
    [tool.hatch]
    option = "..."
    table1.option = "..."
    table2.option = "..."
    ```
</file>

<file path="docs/next-steps.md">
# Next steps

-----

## Learn more

At this point you should have a basic understanding of how to use Hatch.

Now you may want to check out advanced configuration for [environments](config/environment/overview.md) or [builds](config/build.md), set up your [preferred shell](config/hatch.md#shell), or read more about Hatch's [CLI](cli/about.md).

After that, check out the [Hatch Showcase](https://github.com/ofek/hatch-showcase) project to see examples of what is possible.

Finally, if you see a need, feel free to write a [plugin](plugins/about.md) for extended functionality.

## Community

For any projects using Hatch, you may add its official badge somewhere prominent like the README.

[![Hatch project](https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg){ loading=lazy .off-glb }](https://github.com/pypa/hatch)

=== "Markdown"
    ```md
    [![Hatch project](https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg)](https://github.com/pypa/hatch)
    ```

=== "reStructuredText"
    ```rst
    .. image:: https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg
       :alt: Hatch project
       :target: https://github.com/pypa/hatch
    ```
</file>

<file path="docs/publish.md">
# Publishing

-----

After your project is [built](build.md), you can distribute it using the [`publish`](cli/reference.md#hatch-publish) command.

The `-p`/`--publisher` option controls which publisher to use, with the default being [index](plugins/publisher/package-index.md).

## Artifact selection

By default, the `dist` directory located at the root of your project will be used:

```console
$ hatch publish
dist/hatch_demo-1rc0-py3-none-any.whl ... success
dist/hatch_demo-1rc0.tar.gz ... success

[hatch-demo]
https://pypi.org/project/hatch-demo/1rc0/
```

You can instead pass specific paths as arguments:

```
hatch publish /path/to/artifacts foo-1.tar.gz
```

Only files ending with `.whl` or `.tar.gz` will be published.

## Further resources

Please refer to the publisher plugin [reference](plugins/publisher/package-index.md)
for configuration options.

There's a How-To on [authentication](how-to/publish/auth.md)
and on options to select the target [repository](how-to/publish/repo.md).

The `publish` command is implemented as a built-in plugin, if you're
planning your own plugin, read about the [publisher plugin API](plugins/publisher/reference.md).
</file>

<file path="docs/version.md">
# Versioning

-----

## Configuration

When the version is not [statically set](config/metadata.md#version), configuration is defined in the `tool.hatch.version` table. The `source` option determines the [source](plugins/version-source/reference.md) to use for [retrieving](#display) and [updating](#updating) the version. The [regex](plugins/version-source/regex.md) source is used by default.

The `regex` source requires an option `path` that represents a relative path to a file containing the project's version:

```toml config-example
[tool.hatch.version]
path = "src/hatch_demo/__about__.py"
```

The default pattern looks for a variable named `__version__` or `VERSION` that is set to a string containing the version, optionally prefixed with the lowercase letter `v`.

If this doesn't reflect how you store the version, you can define a different regular expression using the `pattern` option:

```toml config-example
[tool.hatch.version]
path = "pkg/__init__.py"
pattern = "BUILD = 'b(?P<version>[^']+)'"
```

The pattern must have a named group called `version` that represents the version.

## Display

Invoking the [`version`](cli/reference.md#hatch-version) command without any arguments will display the current version of the project:

```console
$ hatch version
0.0.1
```

## Updating

You can update the version like so:

```console
$ hatch version "0.1.0"
Old: 0.0.1
New: 0.1.0
```

The `scheme` option determines the [scheme](plugins/version-scheme/reference.md) to use for parsing both the existing and new versions. The [standard](plugins/version-scheme/standard.md) scheme is used by default, which is based on [PEP 440](https://peps.python.org/pep-0440/#public-version-identifiers).

Rather than setting the version explicitly, you can select the name of a [segment](#supported-segments) used to increment the version:

```console
$ hatch version minor
Old: 0.1.0
New: 0.2.0
```

You can chain multiple segment updates with a comma. For example, if you wanted to release a preview of your project's first major version, you could do:

```console
$ hatch version major,rc
Old: 0.2.0
New: 1.0.0rc0
```

When you want to release the final version, you would do:

```console
$ hatch version release
Old: 1.0.0rc0
New: 1.0.0
```

### Supported segments

Here are the supported segments and how they would influence an existing version of `1.0.0`:

| Segments | New version |
| --- | --- |
| `release` | `1.0.0` |
| `major` | `2.0.0` |
| `minor` | `1.1.0` |
| `micro`<br>`patch`<br>`fix` | `1.0.1` |
| `a`<br>`alpha` | `1.0.0a0` |
| `b`<br>`beta` | `1.0.0b0` |
| `c`<br>`rc`<br>`pre`<br>`preview` | `1.0.0rc0` |
| `r`<br>`rev`<br>`post` | `1.0.0.post0` |
| `dev` | `1.0.0.dev0` |
</file>

<file path="docs/why.md">
# Why Hatch?

-----

The high level value proposition of Hatch is that if one adopts all functionality then many other tools become unnecessary since there is support for everything one might require. Further, if one chooses to use only specific features then there are still benefits compared to alternatives.

## Build backend

Hatchling, the [build backend](config/build.md#build-system) sister project, has many benefits compared to [setuptools](https://github.com/pypa/setuptools). Here we only compare setuptools as that is the one most people are familiar with.

- **Better defaults:** The default behavior for setuptools is often not desirable for the average user.
    - For source distributions, setuptools has a custom enumeration of files that get included and excluded by default. Hatchling takes the [defaults](plugins/builder/sdist.md#default-file-selection) from your version control system such as Git's `.gitignore` file.
    - For wheels, setuptools attempts to find every directory that looks like a Python package. This is often undesirable as you might ship files to the end-user unintentionally such as test or tooling directories. Hatchling [defaults](plugins/builder/wheel.md#default-file-selection) to very specific inclusion based on the project name and errors if no heuristic is satisfied.
- **Ease of configurability:** Hatchling was designed based on a history of significant challenges when configuring setuptools.
    - Hatchling [uses](config/build.md#patterns) the same glob pattern syntax as Git itself for every option which is what most users are familiar with. On the other hand, setuptools uses shell-style glob patterns for source distributions while wheels use a mix of shell-style globs and Python package syntax.
    - Configuring what gets included in source distributions requires a separate [`MANIFEST.in` file](https://setuptools.pypa.io/en/latest/userguide/miscellaneous.html#using-manifest-in). The custom syntax and directives must be learned and it is difficult knowing which options in the main files like `setup.py` influence the behavior and under what conditions. For Hatchling, everything gets [configured](config/build.md) in a single file under dedicated sections for specific targets like `[tool.hatch.build.targets.wheel]`.
    - By default, non-Python files are excluded from wheels. Including such files requires usually verbose rules for every nested package directory. Hatchling makes no such distinction between file types and acts more like a general build system one might already be familiar with.
- **Editable installations:** The default behavior of Hatchling allows for proper static analysis by external tools such as IDEs. With setuptools, you must provide [additional configuration](https://setuptools.pypa.io/en/latest/userguide/development_mode.html#legacy-behavior) which means that by default, for example, you would not get autocompletion in Visual Studio Code. This is marked as a legacy feature and may in fact be removed in future versions of setuptools.
- **Reproducibility:** Hatchling builds reproducible wheels and source distributions by default. setuptools [does not support this](https://github.com/pypa/setuptools/issues/2133) for source distributions and there is no guarantee that wheels are reproducible.
- **Extensibility:** Although it is possible to [extend](https://setuptools.pypa.io/en/latest/userguide/extension.html) setuptools, the API is quite low level. Hatchling has the concept of [plugins](https://hatch.pypa.io/latest/plugins/about/) that are separated into discrete types and only expose what is necessary, leading to an easier developer experience.

***Why not?:***

If building extension modules is required then it is recommended that you continue using setuptools, or even other backends that specialize in interfacing with compilers.

## Environment management

Here we compare to both `tox` and `nox`. At a high level, there are a few common advantages:

- **Python management:** Hatch is able to automatically download [Python distributions](plugins/environment/virtual.md#internal-distributions) on the fly when specific versions that environments request cannot be found. The alternatives will raise an error, with the option to ignore unknown distributions.
- **Philosophy:** In the alternatives, environments are for the most part treated as executable units where a dependency set is associated with an action. If you are familiar with container ecosystems, this would be like defining a `CMD` at the end of a Dockerfile but without the ability to change the action at runtime. This involves significant wasted disk space usually because one often requires slight modifications to the actions and therefore will define entirely different environments inherited from a base config just to perform different logic. Additionally, this can be confusing to users not just configuration-wise but also for execution of the different environments.

    In Hatch, [environments](environment.md) are treated as isolated areas where you can execute arbitrary commands at runtime. For example, you can define a single test environment with named [scripts](config/environment/overview.md#scripts) that runs unit vs non-unit tests, each command being potentially very long but named however you wish so you get to control the interface. Since environments are treated as places where work is performed, you can also [spawn a shell](environment.md#entering-environments) into any which will execute a subprocess that automatically drops into your [shell of choice](config/hatch.md#shell). Your shell will be configured appropriately like `python` on PATH being updated and the prompt being changed to reflect the chosen environment.

- **Configuration:**
    - `nox` config is defined in Python which often leads to increased verbosity and makes it challenging to onboard folks compared to a standardized format with known behaviors.
- **Extensibility:**
    - `tox` allows for [extending](https://tox.wiki/en/4.11.4/plugins_api.html) most aspects of its functionality however the API is so low-level and attached to internals that creating plugins may be challenging. For example, [here](https://github.com/DataDog/integrations-core/blob/4f4cf10613797e97e7155c75859532a0732d1dff/datadog_checks_dev/datadog_checks/dev/plugin/tox.py) is a `tox` plugin that was [migrated](https://github.com/DataDog/integrations-core/blob/4eb2a1d530bcf810542cf9e45b48fadc7057301c/datadog_checks_dev/datadog_checks/dev/plugin/hatch/environment_collector.py#L100-L148) to an equivalent Hatch [environment collector plugin](plugins/environment-collector/reference.md).
    - `nox` is configured with Python so for the local project you can do whatever you want, however there is no concept of third-party plugins per se. To achieve that, you must usually use a package that wraps `nox` and use that package's imports instead ([example](https://github.com/cjolowicz/nox-poetry)).

***Why not?:***

If you are using `nox` and you wish to migrate, and for some reason you [notify](https://nox.thea.codes/en/stable/config.html#nox.sessions.Session.notify) sessions, then migration wouldn't be a straight translation but rather you might have to redesign that conditional step.

## Python management

Here we compare [Python management](tutorials/python/manage.md) to that of [pyenv](https://github.com/pyenv/pyenv).

- ***Cross-platform:*** Hatch allows for the same experience no matter the system whereas `pyenv` does not support Windows so you must use an [entirely different project](https://github.com/pyenv-win/pyenv-win) that tries to emulate the functionality.
- ***No build dependencies:*** Hatch guarantees that every [available distribution](cli/reference.md#hatch-python-show) is prebuilt whereas the alternative requires one to maintain a precise [build environment](https://github.com/pyenv/pyenv/wiki#suggested-build-environment) which differs by platform and potentially Python version. Another benefit to this is extremely fast installations since the distributions are simply downloaded and unpacked.
- ***Optimized by default:*** The [CPython distributions](plugins/environment/virtual.md#cpython) are built with profile guided optimization and link-time optimization, resulting in a 10-30% performance improvement depending on the workload. These distributions have seen wide adoption throughout the industry and are even used by the build system [Bazel](https://bazel.build).
- ***Simplicity:*** Hatch treats Python installations as just another directory that one would add to PATH. It can do this for you or you can manage PATH yourself, even allowing for custom install locations. On the other hand, `pyenv` operates by adding [shims](https://github.com/pyenv/pyenv/tree/74a2523c97d2e5c1dbdca7b58f3372324ccad4e6#understanding-shims) which then act as wrappers around the actual underlying binaries. This has many unfortunate side effects:
    - It is incumbent upon the user to manage which specific Python comes first via the CLI, switch when necessary, and/or have a mental model of which versions are exposed globally and locally per-project. This can become confusing quite quickly. When working with Hatch, your global Python installations are only important insofar as they are on PATH somewhere since environments do not use them directly but rather create virtual environments from them, always using a version that is compatible with your project.
    - Configuration is required for each shell to properly set up `pyenv` on start, leading to inconsistencies when running processes that do not spawn a shell.
    - Debugging issues with Python search paths can be extremely difficult, especially for users of software. If you or users have ever ran into an issue where code was being executed that you did not anticipate, the issue is almost always `pyenv` influencing the `python` on PATH.

***Why not?:***

Currently, Hatch does not allow for the installation of specific patch release versions but rather only uses minor release granularity that tracks the latest patch release. If specific patch releases are important to you then it is best to use an alternative installation mechanism.
</file>

</repository_files>
